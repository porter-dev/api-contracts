// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: porter/v1/notification.proto

package porterv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EnumNotificationStatus describes the status of a notification
type EnumNotificationStatus int32

const (
	EnumNotificationStatus_ENUM_NOTIFICATION_STATUS_UNSPECIFIED EnumNotificationStatus = 0
	EnumNotificationStatus_ENUM_NOTIFICATION_STATUS_PROGRESSING EnumNotificationStatus = 1
	EnumNotificationStatus_ENUM_NOTIFICATION_STATUS_SUCCESSFUL  EnumNotificationStatus = 2
	EnumNotificationStatus_ENUM_NOTIFICATION_STATUS_FAILED      EnumNotificationStatus = 3
)

// Enum value maps for EnumNotificationStatus.
var (
	EnumNotificationStatus_name = map[int32]string{
		0: "ENUM_NOTIFICATION_STATUS_UNSPECIFIED",
		1: "ENUM_NOTIFICATION_STATUS_PROGRESSING",
		2: "ENUM_NOTIFICATION_STATUS_SUCCESSFUL",
		3: "ENUM_NOTIFICATION_STATUS_FAILED",
	}
	EnumNotificationStatus_value = map[string]int32{
		"ENUM_NOTIFICATION_STATUS_UNSPECIFIED": 0,
		"ENUM_NOTIFICATION_STATUS_PROGRESSING": 1,
		"ENUM_NOTIFICATION_STATUS_SUCCESSFUL":  2,
		"ENUM_NOTIFICATION_STATUS_FAILED":      3,
	}
)

func (x EnumNotificationStatus) Enum() *EnumNotificationStatus {
	p := new(EnumNotificationStatus)
	*p = x
	return p
}

func (x EnumNotificationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumNotificationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_notification_proto_enumTypes[0].Descriptor()
}

func (EnumNotificationStatus) Type() protoreflect.EnumType {
	return &file_porter_v1_notification_proto_enumTypes[0]
}

func (x EnumNotificationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumNotificationStatus.Descriptor instead.
func (EnumNotificationStatus) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_notification_proto_rawDescGZIP(), []int{0}
}

// EnumNotificationEventType describes the type of notification event
type EnumNotificationEventType int32

const (
	EnumNotificationEventType_ENUM_NOTIFICATION_EVENT_TYPE_UNSPECIFIED EnumNotificationEventType = 0
	EnumNotificationEventType_ENUM_NOTIFICATION_EVENT_TYPE_BUILD       EnumNotificationEventType = 1
	EnumNotificationEventType_ENUM_NOTIFICATION_EVENT_TYPE_PREDEPLOY   EnumNotificationEventType = 2
	EnumNotificationEventType_ENUM_NOTIFICATION_EVENT_TYPE_DEPLOY      EnumNotificationEventType = 3
)

// Enum value maps for EnumNotificationEventType.
var (
	EnumNotificationEventType_name = map[int32]string{
		0: "ENUM_NOTIFICATION_EVENT_TYPE_UNSPECIFIED",
		1: "ENUM_NOTIFICATION_EVENT_TYPE_BUILD",
		2: "ENUM_NOTIFICATION_EVENT_TYPE_PREDEPLOY",
		3: "ENUM_NOTIFICATION_EVENT_TYPE_DEPLOY",
	}
	EnumNotificationEventType_value = map[string]int32{
		"ENUM_NOTIFICATION_EVENT_TYPE_UNSPECIFIED": 0,
		"ENUM_NOTIFICATION_EVENT_TYPE_BUILD":       1,
		"ENUM_NOTIFICATION_EVENT_TYPE_PREDEPLOY":   2,
		"ENUM_NOTIFICATION_EVENT_TYPE_DEPLOY":      3,
	}
)

func (x EnumNotificationEventType) Enum() *EnumNotificationEventType {
	p := new(EnumNotificationEventType)
	*p = x
	return p
}

func (x EnumNotificationEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumNotificationEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_notification_proto_enumTypes[1].Descriptor()
}

func (EnumNotificationEventType) Type() protoreflect.EnumType {
	return &file_porter_v1_notification_proto_enumTypes[1]
}

func (x EnumNotificationEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumNotificationEventType.Descriptor instead.
func (EnumNotificationEventType) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_notification_proto_rawDescGZIP(), []int{1}
}

// EnumNotificationScope describes the scope of a notification
type EnumNotificationScope int32

const (
	EnumNotificationScope_ENUM_NOTIFICATION_SCOPE_UNSPECIFIED EnumNotificationScope = 0
	EnumNotificationScope_ENUM_NOTIFICATION_SCOPE_SERVICE     EnumNotificationScope = 1
	EnumNotificationScope_ENUM_NOTIFICATION_SCOPE_REVISION    EnumNotificationScope = 2
	EnumNotificationScope_ENUM_NOTIFICATION_SCOPE_APPLICATION EnumNotificationScope = 3
)

// Enum value maps for EnumNotificationScope.
var (
	EnumNotificationScope_name = map[int32]string{
		0: "ENUM_NOTIFICATION_SCOPE_UNSPECIFIED",
		1: "ENUM_NOTIFICATION_SCOPE_SERVICE",
		2: "ENUM_NOTIFICATION_SCOPE_REVISION",
		3: "ENUM_NOTIFICATION_SCOPE_APPLICATION",
	}
	EnumNotificationScope_value = map[string]int32{
		"ENUM_NOTIFICATION_SCOPE_UNSPECIFIED": 0,
		"ENUM_NOTIFICATION_SCOPE_SERVICE":     1,
		"ENUM_NOTIFICATION_SCOPE_REVISION":    2,
		"ENUM_NOTIFICATION_SCOPE_APPLICATION": 3,
	}
)

func (x EnumNotificationScope) Enum() *EnumNotificationScope {
	p := new(EnumNotificationScope)
	*p = x
	return p
}

func (x EnumNotificationScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumNotificationScope) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_notification_proto_enumTypes[2].Descriptor()
}

func (EnumNotificationScope) Type() protoreflect.EnumType {
	return &file_porter_v1_notification_proto_enumTypes[2]
}

func (x EnumNotificationScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumNotificationScope.Descriptor instead.
func (EnumNotificationScope) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_notification_proto_rawDescGZIP(), []int{2}
}

// EnumServiceDeploymentStatus describes the deployment status of a service
type EnumNotificationServiceDeploymentStatus int32

const (
	EnumNotificationServiceDeploymentStatus_ENUM_NOTIFICATION_SERVICE_DEPLOYMENT_STATUS_UNSPECIFIED EnumNotificationServiceDeploymentStatus = 0
	EnumNotificationServiceDeploymentStatus_ENUM_NOTIFICATION_SERVICE_DEPLOYMENT_STATUS_PENDING     EnumNotificationServiceDeploymentStatus = 1
	EnumNotificationServiceDeploymentStatus_ENUM_NOTIFICATION_SERVICE_DEPLOYMENT_STATUS_SUCCESS     EnumNotificationServiceDeploymentStatus = 2
	EnumNotificationServiceDeploymentStatus_ENUM_NOTIFICATION_SERVICE_DEPLOYMENT_STATUS_FAILURE     EnumNotificationServiceDeploymentStatus = 3
	EnumNotificationServiceDeploymentStatus_ENUM_NOTIFICATION_SERVICE_DEPLOYMENT_STATUS_UNKNOWN     EnumNotificationServiceDeploymentStatus = 4
)

// Enum value maps for EnumNotificationServiceDeploymentStatus.
var (
	EnumNotificationServiceDeploymentStatus_name = map[int32]string{
		0: "ENUM_NOTIFICATION_SERVICE_DEPLOYMENT_STATUS_UNSPECIFIED",
		1: "ENUM_NOTIFICATION_SERVICE_DEPLOYMENT_STATUS_PENDING",
		2: "ENUM_NOTIFICATION_SERVICE_DEPLOYMENT_STATUS_SUCCESS",
		3: "ENUM_NOTIFICATION_SERVICE_DEPLOYMENT_STATUS_FAILURE",
		4: "ENUM_NOTIFICATION_SERVICE_DEPLOYMENT_STATUS_UNKNOWN",
	}
	EnumNotificationServiceDeploymentStatus_value = map[string]int32{
		"ENUM_NOTIFICATION_SERVICE_DEPLOYMENT_STATUS_UNSPECIFIED": 0,
		"ENUM_NOTIFICATION_SERVICE_DEPLOYMENT_STATUS_PENDING":     1,
		"ENUM_NOTIFICATION_SERVICE_DEPLOYMENT_STATUS_SUCCESS":     2,
		"ENUM_NOTIFICATION_SERVICE_DEPLOYMENT_STATUS_FAILURE":     3,
		"ENUM_NOTIFICATION_SERVICE_DEPLOYMENT_STATUS_UNKNOWN":     4,
	}
)

func (x EnumNotificationServiceDeploymentStatus) Enum() *EnumNotificationServiceDeploymentStatus {
	p := new(EnumNotificationServiceDeploymentStatus)
	*p = x
	return p
}

func (x EnumNotificationServiceDeploymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumNotificationServiceDeploymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_notification_proto_enumTypes[3].Descriptor()
}

func (EnumNotificationServiceDeploymentStatus) Type() protoreflect.EnumType {
	return &file_porter_v1_notification_proto_enumTypes[3]
}

func (x EnumNotificationServiceDeploymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumNotificationServiceDeploymentStatus.Descriptor instead.
func (EnumNotificationServiceDeploymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_notification_proto_rawDescGZIP(), []int{3}
}

// NotificationConfig describes the configuration available for notifications.
// Empty lists are ignored.
// Multiple lists are treated as an AND condition.
// Multiple items in one list are treated as an OR condition.
// For example, if statuses and cluster_ids are both provided, the notification
// will only be sent if the event matches one of the statuses AND one of the cluster_ids.
type NotificationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_instance_ids is a list of app instance ids
	AppInstanceIds []string `protobuf:"bytes,1,rep,name=app_instance_ids,json=appInstanceIds,proto3" json:"app_instance_ids,omitempty"`
	// cluster_ids is a list of cluster ids
	ClusterIds []int64 `protobuf:"varint,2,rep,packed,name=cluster_ids,json=clusterIds,proto3" json:"cluster_ids,omitempty"`
	// deployment_target_ids is a list of deployment target ids
	DeploymentTargetIds []string `protobuf:"bytes,3,rep,name=deployment_target_ids,json=deploymentTargetIds,proto3" json:"deployment_target_ids,omitempty"`
	// statuses is a list of statuses
	Statuses []EnumNotificationStatus `protobuf:"varint,4,rep,packed,name=statuses,proto3,enum=porter.v1.EnumNotificationStatus" json:"statuses,omitempty"`
	// event_types is a list of event types
	EventTypes []EnumNotificationEventType `protobuf:"varint,5,rep,packed,name=event_types,json=eventTypes,proto3,enum=porter.v1.EnumNotificationEventType" json:"event_types,omitempty"`
	// slack_config is the slack-specific configuration for notifications
	SlackConfig *SlackConfig `protobuf:"bytes,6,opt,name=slack_config,json=slackConfig,proto3" json:"slack_config,omitempty"`
}

func (x *NotificationConfig) Reset() {
	*x = NotificationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_notification_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationConfig) ProtoMessage() {}

func (x *NotificationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_notification_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationConfig.ProtoReflect.Descriptor instead.
func (*NotificationConfig) Descriptor() ([]byte, []int) {
	return file_porter_v1_notification_proto_rawDescGZIP(), []int{0}
}

func (x *NotificationConfig) GetAppInstanceIds() []string {
	if x != nil {
		return x.AppInstanceIds
	}
	return nil
}

func (x *NotificationConfig) GetClusterIds() []int64 {
	if x != nil {
		return x.ClusterIds
	}
	return nil
}

func (x *NotificationConfig) GetDeploymentTargetIds() []string {
	if x != nil {
		return x.DeploymentTargetIds
	}
	return nil
}

func (x *NotificationConfig) GetStatuses() []EnumNotificationStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *NotificationConfig) GetEventTypes() []EnumNotificationEventType {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *NotificationConfig) GetSlackConfig() *SlackConfig {
	if x != nil {
		return x.SlackConfig
	}
	return nil
}

// SlackConfig describes the slack-specific configuration for notifications
type SlackConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mentions is a list of slack handles to mention on failure
	Mentions []string `protobuf:"bytes,1,rep,name=mentions,proto3" json:"mentions,omitempty"`
}

func (x *SlackConfig) Reset() {
	*x = SlackConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_notification_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlackConfig) ProtoMessage() {}

func (x *SlackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_notification_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlackConfig.ProtoReflect.Descriptor instead.
func (*SlackConfig) Descriptor() ([]byte, []int) {
	return file_porter_v1_notification_proto_rawDescGZIP(), []int{1}
}

func (x *SlackConfig) GetMentions() []string {
	if x != nil {
		return x.Mentions
	}
	return nil
}

// Notification describes a notification
type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the id for the notification
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// app_revision_id is the id of the app revision
	AppRevisionId string `protobuf:"bytes,2,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
	// scope is the scope of the notification
	Scope EnumNotificationScope `protobuf:"varint,3,opt,name=scope,proto3,enum=porter.v1.EnumNotificationScope" json:"scope,omitempty"`
	// details is the details of the notification
	Details *NotificationDetails `protobuf:"bytes,4,opt,name=details,proto3" json:"details,omitempty"`
	// metadata is the metadata of the notification
	Metadata *NotificationMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// timestamp is the timestamp of the notification
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_notification_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_notification_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_porter_v1_notification_proto_rawDescGZIP(), []int{2}
}

func (x *Notification) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Notification) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

func (x *Notification) GetScope() EnumNotificationScope {
	if x != nil {
		return x.Scope
	}
	return EnumNotificationScope_ENUM_NOTIFICATION_SCOPE_UNSPECIFIED
}

func (x *Notification) GetDetails() *NotificationDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Notification) GetMetadata() *NotificationMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Notification) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// NotificationDetails describes the details of a notification
type NotificationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code is the Porter-internal code for the notification
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// summary is a short summary of the notification
	Summary string `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	// detail is a detailed description of the notification
	Detail string `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	// mitigation_steps is a description of mitigation steps for the notification
	MitigationSteps string `protobuf:"bytes,4,opt,name=mitigation_steps,json=mitigationSteps,proto3" json:"mitigation_steps,omitempty"`
	// documentation is a list of documentation links for the notification
	Documentation []string `protobuf:"bytes,5,rep,name=documentation,proto3" json:"documentation,omitempty"`
	// should_view_logs is a flag indicating whether logs should be viewed for the notification
	ShouldViewLogs bool `protobuf:"varint,6,opt,name=should_view_logs,json=shouldViewLogs,proto3" json:"should_view_logs,omitempty"`
}

func (x *NotificationDetails) Reset() {
	*x = NotificationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_notification_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationDetails) ProtoMessage() {}

func (x *NotificationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_notification_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationDetails.ProtoReflect.Descriptor instead.
func (*NotificationDetails) Descriptor() ([]byte, []int) {
	return file_porter_v1_notification_proto_rawDescGZIP(), []int{3}
}

func (x *NotificationDetails) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *NotificationDetails) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *NotificationDetails) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *NotificationDetails) GetMitigationSteps() string {
	if x != nil {
		return x.MitigationSteps
	}
	return ""
}

func (x *NotificationDetails) GetDocumentation() []string {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *NotificationDetails) GetShouldViewLogs() bool {
	if x != nil {
		return x.ShouldViewLogs
	}
	return false
}

// NotificationMetadata describes the metadata of a notification
type NotificationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// service_name is the name of the service that generated the notification
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// service_deployment_status is the deployment status of the service
	ServiceDeploymentStatus EnumNotificationServiceDeploymentStatus `protobuf:"varint,2,opt,name=service_deployment_status,json=serviceDeploymentStatus,proto3,enum=porter.v1.EnumNotificationServiceDeploymentStatus" json:"service_deployment_status,omitempty"`
	// job_run_id is the id of the job run that generated the notification
	JobRunId string `protobuf:"bytes,3,opt,name=job_run_id,json=jobRunId,proto3" json:"job_run_id,omitempty"`
}

func (x *NotificationMetadata) Reset() {
	*x = NotificationMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_notification_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationMetadata) ProtoMessage() {}

func (x *NotificationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_notification_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationMetadata.ProtoReflect.Descriptor instead.
func (*NotificationMetadata) Descriptor() ([]byte, []int) {
	return file_porter_v1_notification_proto_rawDescGZIP(), []int{4}
}

func (x *NotificationMetadata) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *NotificationMetadata) GetServiceDeploymentStatus() EnumNotificationServiceDeploymentStatus {
	if x != nil {
		return x.ServiceDeploymentStatus
	}
	return EnumNotificationServiceDeploymentStatus_ENUM_NOTIFICATION_SERVICE_DEPLOYMENT_STATUS_UNSPECIFIED
}

func (x *NotificationMetadata) GetJobRunId() string {
	if x != nil {
		return x.JobRunId
	}
	return ""
}

var File_porter_v1_notification_proto protoreflect.FileDescriptor

var file_porter_v1_notification_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x02, 0x0a, 0x12, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x3d, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x45, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x29, 0x0a, 0x0b, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaf, 0x02, 0x0a,
	0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xd6,
	0x01, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x10,
	0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x56,
	0x69, 0x65, 0x77, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x17, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x49,
	0x64, 0x2a, 0xba, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x24,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xc6,
	0x01, 0x0a, 0x19, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x28,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x02, 0x12, 0x27,
	0x0a, 0x23, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x03, 0x2a, 0xb4, 0x01, 0x0a, 0x15, 0x45, 0x6e, 0x75, 0x6d,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x24, 0x0a, 0x20, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0xca,
	0x02, 0x0a, 0x27, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x37, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x33, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x37, 0x0a, 0x33, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45,
	0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x37, 0x0a, 0x33, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x03, 0x12, 0x37, 0x0a, 0x33, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x42, 0xac, 0x01, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x09,
	0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x09, 0x50, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a,
	0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_porter_v1_notification_proto_rawDescOnce sync.Once
	file_porter_v1_notification_proto_rawDescData = file_porter_v1_notification_proto_rawDesc
)

func file_porter_v1_notification_proto_rawDescGZIP() []byte {
	file_porter_v1_notification_proto_rawDescOnce.Do(func() {
		file_porter_v1_notification_proto_rawDescData = protoimpl.X.CompressGZIP(file_porter_v1_notification_proto_rawDescData)
	})
	return file_porter_v1_notification_proto_rawDescData
}

var file_porter_v1_notification_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_porter_v1_notification_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_porter_v1_notification_proto_goTypes = []interface{}{
	(EnumNotificationStatus)(0),                  // 0: porter.v1.EnumNotificationStatus
	(EnumNotificationEventType)(0),               // 1: porter.v1.EnumNotificationEventType
	(EnumNotificationScope)(0),                   // 2: porter.v1.EnumNotificationScope
	(EnumNotificationServiceDeploymentStatus)(0), // 3: porter.v1.EnumNotificationServiceDeploymentStatus
	(*NotificationConfig)(nil),                   // 4: porter.v1.NotificationConfig
	(*SlackConfig)(nil),                          // 5: porter.v1.SlackConfig
	(*Notification)(nil),                         // 6: porter.v1.Notification
	(*NotificationDetails)(nil),                  // 7: porter.v1.NotificationDetails
	(*NotificationMetadata)(nil),                 // 8: porter.v1.NotificationMetadata
	(*timestamppb.Timestamp)(nil),                // 9: google.protobuf.Timestamp
}
var file_porter_v1_notification_proto_depIdxs = []int32{
	0, // 0: porter.v1.NotificationConfig.statuses:type_name -> porter.v1.EnumNotificationStatus
	1, // 1: porter.v1.NotificationConfig.event_types:type_name -> porter.v1.EnumNotificationEventType
	5, // 2: porter.v1.NotificationConfig.slack_config:type_name -> porter.v1.SlackConfig
	2, // 3: porter.v1.Notification.scope:type_name -> porter.v1.EnumNotificationScope
	7, // 4: porter.v1.Notification.details:type_name -> porter.v1.NotificationDetails
	8, // 5: porter.v1.Notification.metadata:type_name -> porter.v1.NotificationMetadata
	9, // 6: porter.v1.Notification.timestamp:type_name -> google.protobuf.Timestamp
	3, // 7: porter.v1.NotificationMetadata.service_deployment_status:type_name -> porter.v1.EnumNotificationServiceDeploymentStatus
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_porter_v1_notification_proto_init() }
func file_porter_v1_notification_proto_init() {
	if File_porter_v1_notification_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_porter_v1_notification_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_notification_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlackConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_notification_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_notification_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_notification_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_porter_v1_notification_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_porter_v1_notification_proto_goTypes,
		DependencyIndexes: file_porter_v1_notification_proto_depIdxs,
		EnumInfos:         file_porter_v1_notification_proto_enumTypes,
		MessageInfos:      file_porter_v1_notification_proto_msgTypes,
	}.Build()
	File_porter_v1_notification_proto = out.File
	file_porter_v1_notification_proto_rawDesc = nil
	file_porter_v1_notification_proto_goTypes = nil
	file_porter_v1_notification_proto_depIdxs = nil
}
