// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: porter/v1/cluster_control_plane.proto

package porterv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/porter-dev/api-contracts/generated/go/porter/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ClusterControlPlaneServiceName is the fully-qualified name of the ClusterControlPlaneService
	// service.
	ClusterControlPlaneServiceName = "porter.v1.ClusterControlPlaneService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClusterControlPlaneServiceQuotaIncreaseProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's QuotaIncrease RPC.
	ClusterControlPlaneServiceQuotaIncreaseProcedure = "/porter.v1.ClusterControlPlaneService/QuotaIncrease"
	// ClusterControlPlaneServiceUpdateCloudProviderCredentialsProcedure is the fully-qualified name of
	// the ClusterControlPlaneService's UpdateCloudProviderCredentials RPC.
	ClusterControlPlaneServiceUpdateCloudProviderCredentialsProcedure = "/porter.v1.ClusterControlPlaneService/UpdateCloudProviderCredentials"
	// ClusterControlPlaneServiceQuotaPreflightCheckProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's QuotaPreflightCheck RPC.
	ClusterControlPlaneServiceQuotaPreflightCheckProcedure = "/porter.v1.ClusterControlPlaneService/QuotaPreflightCheck"
	// ClusterControlPlaneServicePreflightCheckProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's PreflightCheck RPC.
	ClusterControlPlaneServicePreflightCheckProcedure = "/porter.v1.ClusterControlPlaneService/PreflightCheck"
	// ClusterControlPlaneServiceCreateAssumeRoleChainProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CreateAssumeRoleChain RPC.
	ClusterControlPlaneServiceCreateAssumeRoleChainProcedure = "/porter.v1.ClusterControlPlaneService/CreateAssumeRoleChain"
	// ClusterControlPlaneServiceSaveAzureCredentialsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's SaveAzureCredentials RPC.
	ClusterControlPlaneServiceSaveAzureCredentialsProcedure = "/porter.v1.ClusterControlPlaneService/SaveAzureCredentials"
	// ClusterControlPlaneServiceKubeConfigForClusterProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's KubeConfigForCluster RPC.
	ClusterControlPlaneServiceKubeConfigForClusterProcedure = "/porter.v1.ClusterControlPlaneService/KubeConfigForCluster"
	// ClusterControlPlaneServiceUpdateContractProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's UpdateContract RPC.
	ClusterControlPlaneServiceUpdateContractProcedure = "/porter.v1.ClusterControlPlaneService/UpdateContract"
	// ClusterControlPlaneServiceReadContractProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ReadContract RPC.
	ClusterControlPlaneServiceReadContractProcedure = "/porter.v1.ClusterControlPlaneService/ReadContract"
	// ClusterControlPlaneServiceClusterStatusProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ClusterStatus RPC.
	ClusterControlPlaneServiceClusterStatusProcedure = "/porter.v1.ClusterControlPlaneService/ClusterStatus"
	// ClusterControlPlaneServiceDeleteClusterProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeleteCluster RPC.
	ClusterControlPlaneServiceDeleteClusterProcedure = "/porter.v1.ClusterControlPlaneService/DeleteCluster"
	// ClusterControlPlaneServiceTokenForRegistryProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's TokenForRegistry RPC.
	ClusterControlPlaneServiceTokenForRegistryProcedure = "/porter.v1.ClusterControlPlaneService/TokenForRegistry"
	// ClusterControlPlaneServiceValidatePorterAppProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ValidatePorterApp RPC.
	ClusterControlPlaneServiceValidatePorterAppProcedure = "/porter.v1.ClusterControlPlaneService/ValidatePorterApp"
	// ClusterControlPlaneServiceApplyPorterAppProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ApplyPorterApp RPC.
	ClusterControlPlaneServiceApplyPorterAppProcedure = "/porter.v1.ClusterControlPlaneService/ApplyPorterApp"
	// ClusterControlPlaneServiceUpdateAppProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's UpdateApp RPC.
	ClusterControlPlaneServiceUpdateAppProcedure = "/porter.v1.ClusterControlPlaneService/UpdateApp"
	// ClusterControlPlaneServiceRollbackRevisionProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's RollbackRevision RPC.
	ClusterControlPlaneServiceRollbackRevisionProcedure = "/porter.v1.ClusterControlPlaneService/RollbackRevision"
	// ClusterControlPlaneServiceUpdateRevisionStatusProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's UpdateRevisionStatus RPC.
	ClusterControlPlaneServiceUpdateRevisionStatusProcedure = "/porter.v1.ClusterControlPlaneService/UpdateRevisionStatus"
	// ClusterControlPlaneServiceDeletePorterAppProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeletePorterApp RPC.
	ClusterControlPlaneServiceDeletePorterAppProcedure = "/porter.v1.ClusterControlPlaneService/DeletePorterApp"
	// ClusterControlPlaneServiceDeleteAppDeploymentProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeleteAppDeployment RPC.
	ClusterControlPlaneServiceDeleteAppDeploymentProcedure = "/porter.v1.ClusterControlPlaneService/DeleteAppDeployment"
	// ClusterControlPlaneServiceDeleteDeploymentTargetProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeleteDeploymentTarget RPC.
	ClusterControlPlaneServiceDeleteDeploymentTargetProcedure = "/porter.v1.ClusterControlPlaneService/DeleteDeploymentTarget"
	// ClusterControlPlaneServiceCurrentAppRevisionProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CurrentAppRevision RPC.
	ClusterControlPlaneServiceCurrentAppRevisionProcedure = "/porter.v1.ClusterControlPlaneService/CurrentAppRevision"
	// ClusterControlPlaneServiceListAppRevisionsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ListAppRevisions RPC.
	ClusterControlPlaneServiceListAppRevisionsProcedure = "/porter.v1.ClusterControlPlaneService/ListAppRevisions"
	// ClusterControlPlaneServiceLatestAppRevisionsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's LatestAppRevisions RPC.
	ClusterControlPlaneServiceLatestAppRevisionsProcedure = "/porter.v1.ClusterControlPlaneService/LatestAppRevisions"
	// ClusterControlPlaneServiceGetAppRevisionProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's GetAppRevision RPC.
	ClusterControlPlaneServiceGetAppRevisionProcedure = "/porter.v1.ClusterControlPlaneService/GetAppRevision"
	// ClusterControlPlaneServiceAppTemplateProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's AppTemplate RPC.
	ClusterControlPlaneServiceAppTemplateProcedure = "/porter.v1.ClusterControlPlaneService/AppTemplate"
	// ClusterControlPlaneServicePredeployStatusProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's PredeployStatus RPC.
	ClusterControlPlaneServicePredeployStatusProcedure = "/porter.v1.ClusterControlPlaneService/PredeployStatus"
	// ClusterControlPlaneServiceDeploymentTargetDetailsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeploymentTargetDetails RPC.
	ClusterControlPlaneServiceDeploymentTargetDetailsProcedure = "/porter.v1.ClusterControlPlaneService/DeploymentTargetDetails"
	// ClusterControlPlaneServiceCreateDeploymentTargetProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CreateDeploymentTarget RPC.
	ClusterControlPlaneServiceCreateDeploymentTargetProcedure = "/porter.v1.ClusterControlPlaneService/CreateDeploymentTarget"
	// ClusterControlPlaneServiceDeploymentTargetsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeploymentTargets RPC.
	ClusterControlPlaneServiceDeploymentTargetsProcedure = "/porter.v1.ClusterControlPlaneService/DeploymentTargets"
	// ClusterControlPlaneServiceDefaultDeploymentTargetProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DefaultDeploymentTarget RPC.
	ClusterControlPlaneServiceDefaultDeploymentTargetProcedure = "/porter.v1.ClusterControlPlaneService/DefaultDeploymentTarget"
	// ClusterControlPlaneServiceSeedAppRevisionsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's SeedAppRevisions RPC.
	ClusterControlPlaneServiceSeedAppRevisionsProcedure = "/porter.v1.ClusterControlPlaneService/SeedAppRevisions"
	// ClusterControlPlaneServiceEnvGroupVariablesProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's EnvGroupVariables RPC.
	ClusterControlPlaneServiceEnvGroupVariablesProcedure = "/porter.v1.ClusterControlPlaneService/EnvGroupVariables"
	// ClusterControlPlaneServiceLatestEnvGroupWithVariablesProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's LatestEnvGroupWithVariables RPC.
	ClusterControlPlaneServiceLatestEnvGroupWithVariablesProcedure = "/porter.v1.ClusterControlPlaneService/LatestEnvGroupWithVariables"
	// ClusterControlPlaneServiceUpdateAppImageProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's UpdateAppImage RPC.
	ClusterControlPlaneServiceUpdateAppImageProcedure = "/porter.v1.ClusterControlPlaneService/UpdateAppImage"
	// ClusterControlPlaneServiceUpdateAppBuildSettingsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's UpdateAppBuildSettings RPC.
	ClusterControlPlaneServiceUpdateAppBuildSettingsProcedure = "/porter.v1.ClusterControlPlaneService/UpdateAppBuildSettings"
	// ClusterControlPlaneServiceUpdateAppsLinkedToEnvGroupProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's UpdateAppsLinkedToEnvGroup RPC.
	ClusterControlPlaneServiceUpdateAppsLinkedToEnvGroupProcedure = "/porter.v1.ClusterControlPlaneService/UpdateAppsLinkedToEnvGroup"
	// ClusterControlPlaneServiceAppHelmValuesProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's AppHelmValues RPC.
	ClusterControlPlaneServiceAppHelmValuesProcedure = "/porter.v1.ClusterControlPlaneService/AppHelmValues"
	// ClusterControlPlaneServiceManualServiceRunProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ManualServiceRun RPC.
	ClusterControlPlaneServiceManualServiceRunProcedure = "/porter.v1.ClusterControlPlaneService/ManualServiceRun"
	// ClusterControlPlaneServiceClusterNetworkSettingsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ClusterNetworkSettings RPC.
	ClusterControlPlaneServiceClusterNetworkSettingsProcedure = "/porter.v1.ClusterControlPlaneService/ClusterNetworkSettings"
	// ClusterControlPlaneServiceSharedNetworkSettingsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's SharedNetworkSettings RPC.
	ClusterControlPlaneServiceSharedNetworkSettingsProcedure = "/porter.v1.ClusterControlPlaneService/SharedNetworkSettings"
	// ClusterControlPlaneServiceImagesProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's Images RPC.
	ClusterControlPlaneServiceImagesProcedure = "/porter.v1.ClusterControlPlaneService/Images"
	// ClusterControlPlaneServiceCreateAppInstanceProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CreateAppInstance RPC.
	ClusterControlPlaneServiceCreateAppInstanceProcedure = "/porter.v1.ClusterControlPlaneService/CreateAppInstance"
	// ClusterControlPlaneServiceDeleteAppInstanceProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeleteAppInstance RPC.
	ClusterControlPlaneServiceDeleteAppInstanceProcedure = "/porter.v1.ClusterControlPlaneService/DeleteAppInstance"
	// ClusterControlPlaneServiceListAppInstancesProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ListAppInstances RPC.
	ClusterControlPlaneServiceListAppInstancesProcedure = "/porter.v1.ClusterControlPlaneService/ListAppInstances"
	// ClusterControlPlaneServiceCreateNotificationProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CreateNotification RPC.
	ClusterControlPlaneServiceCreateNotificationProcedure = "/porter.v1.ClusterControlPlaneService/CreateNotification"
	// ClusterControlPlaneServiceUpdateServiceDeploymentStatusProcedure is the fully-qualified name of
	// the ClusterControlPlaneService's UpdateServiceDeploymentStatus RPC.
	ClusterControlPlaneServiceUpdateServiceDeploymentStatusProcedure = "/porter.v1.ClusterControlPlaneService/UpdateServiceDeploymentStatus"
	// ClusterControlPlaneServiceDockerConfigFileForRegistryProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DockerConfigFileForRegistry RPC.
	ClusterControlPlaneServiceDockerConfigFileForRegistryProcedure = "/porter.v1.ClusterControlPlaneService/DockerConfigFileForRegistry"
	// ClusterControlPlaneServiceECRTokenForRegistryProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ECRTokenForRegistry RPC.
	ClusterControlPlaneServiceECRTokenForRegistryProcedure = "/porter.v1.ClusterControlPlaneService/ECRTokenForRegistry"
	// ClusterControlPlaneServiceAssumeRoleCredentialsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's AssumeRoleCredentials RPC.
	ClusterControlPlaneServiceAssumeRoleCredentialsProcedure = "/porter.v1.ClusterControlPlaneService/AssumeRoleCredentials"
	// ClusterControlPlaneServiceAssumeRoleChainTargetsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's AssumeRoleChainTargets RPC.
	ClusterControlPlaneServiceAssumeRoleChainTargetsProcedure = "/porter.v1.ClusterControlPlaneService/AssumeRoleChainTargets"
	// ClusterControlPlaneServiceCertificateAuthorityDataProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CertificateAuthorityData RPC.
	ClusterControlPlaneServiceCertificateAuthorityDataProcedure = "/porter.v1.ClusterControlPlaneService/CertificateAuthorityData"
	// ClusterControlPlaneServiceEKSBearerTokenProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's EKSBearerToken RPC.
	ClusterControlPlaneServiceEKSBearerTokenProcedure = "/porter.v1.ClusterControlPlaneService/EKSBearerToken"
	// ClusterControlPlaneServiceListRepositoriesForRegistryProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ListRepositoriesForRegistry RPC.
	ClusterControlPlaneServiceListRepositoriesForRegistryProcedure = "/porter.v1.ClusterControlPlaneService/ListRepositoriesForRegistry"
	// ClusterControlPlaneServiceListImagesForRepositoryProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ListImagesForRepository RPC.
	ClusterControlPlaneServiceListImagesForRepositoryProcedure = "/porter.v1.ClusterControlPlaneService/ListImagesForRepository"
	// ClusterControlPlaneServiceDatastoreStatusProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DatastoreStatus RPC.
	ClusterControlPlaneServiceDatastoreStatusProcedure = "/porter.v1.ClusterControlPlaneService/DatastoreStatus"
	// ClusterControlPlaneServiceRegistryStatusProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's RegistryStatus RPC.
	ClusterControlPlaneServiceRegistryStatusProcedure = "/porter.v1.ClusterControlPlaneService/RegistryStatus"
	// ClusterControlPlaneServiceSetupExternalSecretsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's SetupExternalSecrets RPC.
	ClusterControlPlaneServiceSetupExternalSecretsProcedure = "/porter.v1.ClusterControlPlaneService/SetupExternalSecrets"
	// ClusterControlPlaneServiceCreateEnvGroupProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CreateEnvGroup RPC.
	ClusterControlPlaneServiceCreateEnvGroupProcedure = "/porter.v1.ClusterControlPlaneService/CreateEnvGroup"
	// ClusterControlPlaneServiceDeleteEnvGroupProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeleteEnvGroup RPC.
	ClusterControlPlaneServiceDeleteEnvGroupProcedure = "/porter.v1.ClusterControlPlaneService/DeleteEnvGroup"
)

// ClusterControlPlaneServiceClient is a client for the porter.v1.ClusterControlPlaneService
// service.
type ClusterControlPlaneServiceClient interface {
	// QuotaIncrease will auto request increases to the quota in a specific region given a list of quotas
	QuotaIncrease(context.Context, *connect.Request[v1.QuotaIncreaseRequest]) (*connect.Response[v1.QuotaIncreaseResponse], error)
	// UpdateCloudProviderCredentials creates or updates the credentials used for accessing the specific cloud
	UpdateCloudProviderCredentials(context.Context, *connect.Request[v1.UpdateCloudProviderCredentialsRequest]) (*connect.Response[v1.UpdateCloudProviderCredentialsResponse], error)
	// QuotaPreflightCheck checks if the target account and region has sufficient resources (EIP addresses and VPCs) to provision a new cluster
	//
	// Deprecated: do not use.
	QuotaPreflightCheck(context.Context, *connect.Request[v1.QuotaPreflightCheckRequest]) (*connect.Response[v1.QuotaPreflightCheckResponse], error)
	// PreflightCheck checks if the target account is able to provision a cluster
	PreflightCheck(context.Context, *connect.Request[v1.PreflightCheckRequest]) (*connect.Response[v1.PreflightCheckResponse], error)
	// CreateAssumeRoleChain creates a new assume role chain for a given project and checks if the target assumed role has sufficient permissions. Use UpdateCloudProviderCredentials instead.
	//
	// Deprecated: do not use.
	CreateAssumeRoleChain(context.Context, *connect.Request[v1.CreateAssumeRoleChainRequest]) (*connect.Response[v1.CreateAssumeRoleChainResponse], error)
	// SaveAzureCredentials stores the new azure service principal credentials and creates the azure cluster identity. Deprecated. Use UpdateCloudProviderCredentials instead.
	//
	// Deprecated: do not use.
	SaveAzureCredentials(context.Context, *connect.Request[v1.SaveAzureCredentialsRequest]) (*connect.Response[v1.SaveAzureCredentialsResponse], error)
	// KubeConfigForCluster gets a valid kubeconfig from the management cluster, for a given workload cluster
	KubeConfigForCluster(context.Context, *connect.Request[v1.KubeConfigForClusterRequest]) (*connect.Response[v1.KubeConfigForClusterResponse], error)
	// UpdateContract takes in a Porter Contract, actioning upon it where necessary
	UpdateContract(context.Context, *connect.Request[v1.UpdateContractRequest]) (*connect.Response[v1.UpdateContractResponse], error)
	// ReadContract returns the base64 encoded contract for a given cluster and project
	ReadContract(context.Context, *connect.Request[v1.ReadContractRequest]) (*connect.Response[v1.ReadContractResponse], error)
	// ClusterStatus returns the status of a given workload cluster
	ClusterStatus(context.Context, *connect.Request[v1.ClusterStatusRequest]) (*connect.Response[v1.ClusterStatusResponse], error)
	// DeleteCluster uninstalls system components from a given workload cluster before deleting it.
	// This should ultimately be wrapped into UpdateContract
	DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error)
	// TokenForRegistry returns a token for accessing a given registry
	TokenForRegistry(context.Context, *connect.Request[v1.TokenForRegistryRequest]) (*connect.Response[v1.TokenForRegistryResponse], error)
	// ValidatePorterApp validates and hydrates a definition of a porter app, based on the porter.yaml file
	ValidatePorterApp(context.Context, *connect.Request[v1.ValidatePorterAppRequest]) (*connect.Response[v1.ValidatePorterAppResponse], error)
	// ApplyPorterApp applies a porter app as defined by the provided porter.yaml file to a given deployment id
	ApplyPorterApp(context.Context, *connect.Request[v1.ApplyPorterAppRequest]) (*connect.Response[v1.ApplyPorterAppResponse], error)
	// UpdateApp hydrates a definition of a porter app, and takes necessary actions to update the app on the cluster
	UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error)
	// RollbackRevision reverts an app to the previous revision, or optionally to the revision specified
	RollbackRevision(context.Context, *connect.Request[v1.RollbackRevisionRequest]) (*connect.Response[v1.RollbackRevisionResponse], error)
	// UpdateRevisionStatus updates the status of a revision
	UpdateRevisionStatus(context.Context, *connect.Request[v1.UpdateRevisionStatusRequest]) (*connect.Response[v1.UpdateRevisionStatusResponse], error)
	// DeletePorterApp deletes all instances of a porter app across deployment targets in a given project
	DeletePorterApp(context.Context, *connect.Request[v1.DeletePorterAppRequest]) (*connect.Response[v1.DeletePorterAppResponse], error)
	// DeleteAppDeployment deletes a porter app from a given deployment target
	DeleteAppDeployment(context.Context, *connect.Request[v1.DeleteAppDeploymentRequest]) (*connect.Response[v1.DeleteAppDeploymentResponse], error)
	// DeleteDeploymentTarget deletes a deployment target from a given cluster
	DeleteDeploymentTarget(context.Context, *connect.Request[v1.DeleteDeploymentTargetRequest]) (*connect.Response[v1.DeleteDeploymentTargetResponse], error)
	// CurrentAppRevision returns the currently deployed app revision for a given porter_app and deployment_target
	CurrentAppRevision(context.Context, *connect.Request[v1.CurrentAppRevisionRequest]) (*connect.Response[v1.CurrentAppRevisionResponse], error)
	ListAppRevisions(context.Context, *connect.Request[v1.ListAppRevisionsRequest]) (*connect.Response[v1.ListAppRevisionsResponse], error)
	// LatestAppRevisions returns the currently deployed app revisions for a given deployment_target
	LatestAppRevisions(context.Context, *connect.Request[v1.LatestAppRevisionsRequest]) (*connect.Response[v1.LatestAppRevisionsResponse], error)
	// GetAppRevision returns the app revision for a given app revision id
	GetAppRevision(context.Context, *connect.Request[v1.GetAppRevisionRequest]) (*connect.Response[v1.GetAppRevisionResponse], error)
	// AppTemplate returns the app template for a given app id
	AppTemplate(context.Context, *connect.Request[v1.AppTemplateRequest]) (*connect.Response[v1.AppTemplateResponse], error)
	// PredeployStatus returns the status of the predeploy job for a given app revision
	PredeployStatus(context.Context, *connect.Request[v1.PredeployStatusRequest]) (*connect.Response[v1.PredeployStatusResponse], error)
	// DeploymentTargetDetails returns the details of a deployment target job given the id.  This is a work-around to moving all namespace-related
	// logic to CCP and should only be used to support metrics and logging (and confirming cluster RBAC). This will fail once
	// we start using deployment targets that do not have a selector kind of "namespace"
	DeploymentTargetDetails(context.Context, *connect.Request[v1.DeploymentTargetDetailsRequest]) (*connect.Response[v1.DeploymentTargetDetailsResponse], error)
	// CreateDeploymentTarget creates a new deployment target for a given cluster, returning the deployment target id. If a deployment target with the same name already exists with
	// the same namespace, cluster and preview status, the existing deployment target ID will be returned. Otherwise, an error will be returned.
	CreateDeploymentTarget(context.Context, *connect.Request[v1.CreateDeploymentTargetRequest]) (*connect.Response[v1.CreateDeploymentTargetResponse], error)
	// DeploymentTargets returns all of the deployment targets for a given project
	DeploymentTargets(context.Context, *connect.Request[v1.DeploymentTargetsRequest]) (*connect.Response[v1.DeploymentTargetsResponse], error)
	// DefaultDeploymentTarget returns the default deployment target for a given cluster
	DefaultDeploymentTarget(context.Context, *connect.Request[v1.DefaultDeploymentTargetRequest]) (*connect.Response[v1.DefaultDeploymentTargetResponse], error)
	// SeedAppRevision seeds app revisions for a given project id, cluster id, release name, namespace.  It should only be called
	// from the Cluster Control Plane CLI and should be removed once all legacy users are migrated to the new apply validate.
	SeedAppRevisions(context.Context, *connect.Request[v1.SeedAppRevisionsRequest]) (*connect.Response[v1.SeedAppRevisionsResponse], error)
	// EnvGroupVariables returns the variables for a given env group name and version
	EnvGroupVariables(context.Context, *connect.Request[v1.EnvGroupVariablesRequest]) (*connect.Response[v1.EnvGroupVariablesResponse], error)
	// LatestEnvGroupWithVariables returns the latest env group and variables for a given env group name in the given deployment target
	LatestEnvGroupWithVariables(context.Context, *connect.Request[v1.LatestEnvGroupWithVariablesRequest]) (*connect.Response[v1.LatestEnvGroupWithVariablesResponse], error)
	// UpdateAppImage updates the image of a porter app and applies the new app revision to the deployment target.
	UpdateAppImage(context.Context, *connect.Request[v1.UpdateAppImageRequest]) (*connect.Response[v1.UpdateAppImageResponse], error)
	// UpdateAppBuildSettings updates the build settings for an app
	UpdateAppBuildSettings(context.Context, *connect.Request[v1.UpdateAppBuildSettingsRequest]) (*connect.Response[v1.UpdateAppBuildSettingsResponse], error)
	// UpdateAppsLinkedToEnvGroup updates all apps that are linked to a given env group
	UpdateAppsLinkedToEnvGroup(context.Context, *connect.Request[v1.UpdateAppsLinkedToEnvGroupRequest]) (*connect.Response[v1.UpdateAppsLinkedToEnvGroupResponse], error)
	// AppHelmValues retrieves the raw helm values used to install an app on the cluster.
	AppHelmValues(context.Context, *connect.Request[v1.AppHelmValuesRequest]) (*connect.Response[v1.AppHelmValuesResponse], error)
	// ManualServiceRun creates a pod/job with the same spec as the provided service (as defined in the latest app revision)
	// and runs the provided command, or if no command is provided, runs the command defined for the service.
	ManualServiceRun(context.Context, *connect.Request[v1.ManualServiceRunRequest]) (*connect.Response[v1.ManualServiceRunResponse], error)
	// ClusterNetworkSettings gets the network settings (region, subnets, vpc) for a given project/cluster combination
	ClusterNetworkSettings(context.Context, *connect.Request[v1.ClusterNetworkSettingsRequest]) (*connect.Response[v1.ClusterNetworkSettingsResponse], error)
	// SharedNetworkSettings gets the network settings (region, subnets, vpc) for a given project/cluster/service combination
	SharedNetworkSettings(context.Context, *connect.Request[v1.SharedNetworkSettingsRequest]) (*connect.Response[v1.SharedNetworkSettingsResponse], error)
	// Images returns images matching provided filter parameters
	Images(context.Context, *connect.Request[v1.ImagesRequest]) (*connect.Response[v1.ImagesResponse], error)
	// CreateAppInstance creates a new app instance for a given name and deployment target. If an app instance with the same name and deployment target already exists, the existing app instance ID will be returned.
	CreateAppInstance(context.Context, *connect.Request[v1.CreateAppInstanceRequest]) (*connect.Response[v1.CreateAppInstanceResponse], error)
	// DeleteAppInstance deletes an app instance and all associated revisions.
	DeleteAppInstance(context.Context, *connect.Request[v1.DeleteAppInstanceRequest]) (*connect.Response[v1.DeleteAppInstanceResponse], error)
	// ListAppInstances lists app instance in a project (and deployment target if provided).
	ListAppInstances(context.Context, *connect.Request[v1.ListAppInstancesRequest]) (*connect.Response[v1.ListAppInstancesResponse], error)
	// CreateNotification creates a notification for a porter app and service at a given app revision
	CreateNotification(context.Context, *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error)
	// UpdateServiceDeploymentStatus updates the current deployment status of a service with a new status
	UpdateServiceDeploymentStatus(context.Context, *connect.Request[v1.UpdateServiceDeploymentStatusRequest]) (*connect.Response[v1.UpdateServiceDeploymentStatusResponse], error)
	// DockerConfigFileForRegistry returns a stringified config.json for accessing a given registry.
	// Deprecated. Use TokenForRegistry instead.
	//
	// Deprecated: do not use.
	DockerConfigFileForRegistry(context.Context, *connect.Request[v1.DockerConfigFileForRegistryRequest]) (*connect.Response[v1.DockerConfigFileForRegistryResponse], error)
	// ECRTokenForRegistry returns a docker-compatible token for accessing a given ECR registry.
	// This cannot be deleted before TokenForRegistry supports AWS and we edit RegistryGetECRTokenHandler to call that endpoint.
	// Deprecated. Use TokenForRegistry instead.
	//
	// Deprecated: do not use.
	ECRTokenForRegistry(context.Context, *connect.Request[v1.ECRTokenForRegistryRequest]) (*connect.Response[v1.ECRTokenForRegistryResponse], error)
	// AssumeRoleCredentials should be used vary sparingly, and ONLY for replacing AWS Integrations which have no workaround on the Porter API.
	// This endpoint returns temporary AWS credentials for a given AWS Account ID, and should not be expanded further to allow specifc role selection without being tied to a project and cluster.
	// Deprecated. This is no longer needed once ListRepositoriesForRegistry, ListImages, and CreateRepository supports AWS
	//
	// Deprecated: do not use.
	AssumeRoleCredentials(context.Context, *connect.Request[v1.AssumeRoleCredentialsRequest]) (*connect.Response[v1.AssumeRoleCredentialsResponse], error)
	// AssumeRoleChainTargets gets the final destination target_arns for a given project.
	// Deprecated. Do not use.
	//
	// Deprecated: do not use.
	AssumeRoleChainTargets(context.Context, *connect.Request[v1.AssumeRoleChainTargetsRequest]) (*connect.Response[v1.AssumeRoleChainTargetsResponse], error)
	// CertificateAuthorityData gets the certificate authority data for a customer cluster
	//
	// Deprecated: do not use.
	CertificateAuthorityData(context.Context, *connect.Request[v1.CertificateAuthorityDataRequest]) (*connect.Response[v1.CertificateAuthorityDataResponse], error)
	// EKSBearerToken gets a bearer token for programatic access to an EKS cluster's kubernetes API.
	// Deprecated. Use KubeConfigForCluster instead.
	//
	// Deprecated: do not use.
	EKSBearerToken(context.Context, *connect.Request[v1.EKSBearerTokenRequest]) (*connect.Response[v1.EKSBearerTokenResponse], error)
	// ListRepositoriesForRegistry lists the repositories for a given registry, provided it is in the scope of the project id
	// Deprecated. Use Images instead.
	//
	// Deprecated: do not use.
	ListRepositoriesForRegistry(context.Context, *connect.Request[v1.ListRepositoriesForRegistryRequest]) (*connect.Response[v1.ListRepositoriesForRegistryResponse], error)
	// ListImagesForRepository lists the repositories for a given registry, provided it is in the scope of the project id
	// Deprecated. Use Images instead.
	//
	// Deprecated: do not use.
	ListImagesForRepository(context.Context, *connect.Request[v1.ListImagesForRepositoryRequest]) (*connect.Response[v1.ListImagesForRepositoryResponse], error)
	// DatastoreStatus returns the status of a given datastore within a project/cluster scope
	DatastoreStatus(context.Context, *connect.Request[v1.DatastoreStatusRequest]) (*connect.Response[v1.DatastoreStatusResponse], error)
	// RegistryStatus returns the status of a given docker registry within a project scope
	RegistryStatus(context.Context, *connect.Request[v1.RegistryStatusRequest]) (*connect.Response[v1.RegistryStatusResponse], error)
	// SetupExternalSecrets will set up the cluster to handle external secrets
	SetupExternalSecrets(context.Context, *connect.Request[v1.SetupExternalSecretsRequest]) (*connect.Response[v1.SetupExternalSecretsResponse], error)
	// CreateEnvGroup will create an env group
	CreateEnvGroup(context.Context, *connect.Request[v1.CreateEnvGroupRequest]) (*connect.Response[v1.CreateEnvGroupResponse], error)
	// DeleteEnvGroup will delete an env group
	DeleteEnvGroup(context.Context, *connect.Request[v1.DeleteEnvGroupRequest]) (*connect.Response[v1.DeleteEnvGroupResponse], error)
}

// NewClusterControlPlaneServiceClient constructs a client for the
// porter.v1.ClusterControlPlaneService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterControlPlaneServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClusterControlPlaneServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &clusterControlPlaneServiceClient{
		quotaIncrease: connect.NewClient[v1.QuotaIncreaseRequest, v1.QuotaIncreaseResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceQuotaIncreaseProcedure,
			opts...,
		),
		updateCloudProviderCredentials: connect.NewClient[v1.UpdateCloudProviderCredentialsRequest, v1.UpdateCloudProviderCredentialsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateCloudProviderCredentialsProcedure,
			opts...,
		),
		quotaPreflightCheck: connect.NewClient[v1.QuotaPreflightCheckRequest, v1.QuotaPreflightCheckResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceQuotaPreflightCheckProcedure,
			opts...,
		),
		preflightCheck: connect.NewClient[v1.PreflightCheckRequest, v1.PreflightCheckResponse](
			httpClient,
			baseURL+ClusterControlPlaneServicePreflightCheckProcedure,
			opts...,
		),
		createAssumeRoleChain: connect.NewClient[v1.CreateAssumeRoleChainRequest, v1.CreateAssumeRoleChainResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCreateAssumeRoleChainProcedure,
			opts...,
		),
		saveAzureCredentials: connect.NewClient[v1.SaveAzureCredentialsRequest, v1.SaveAzureCredentialsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceSaveAzureCredentialsProcedure,
			opts...,
		),
		kubeConfigForCluster: connect.NewClient[v1.KubeConfigForClusterRequest, v1.KubeConfigForClusterResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceKubeConfigForClusterProcedure,
			opts...,
		),
		updateContract: connect.NewClient[v1.UpdateContractRequest, v1.UpdateContractResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateContractProcedure,
			opts...,
		),
		readContract: connect.NewClient[v1.ReadContractRequest, v1.ReadContractResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceReadContractProcedure,
			opts...,
		),
		clusterStatus: connect.NewClient[v1.ClusterStatusRequest, v1.ClusterStatusResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceClusterStatusProcedure,
			opts...,
		),
		deleteCluster: connect.NewClient[v1.DeleteClusterRequest, v1.DeleteClusterResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeleteClusterProcedure,
			opts...,
		),
		tokenForRegistry: connect.NewClient[v1.TokenForRegistryRequest, v1.TokenForRegistryResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceTokenForRegistryProcedure,
			opts...,
		),
		validatePorterApp: connect.NewClient[v1.ValidatePorterAppRequest, v1.ValidatePorterAppResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceValidatePorterAppProcedure,
			opts...,
		),
		applyPorterApp: connect.NewClient[v1.ApplyPorterAppRequest, v1.ApplyPorterAppResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceApplyPorterAppProcedure,
			opts...,
		),
		updateApp: connect.NewClient[v1.UpdateAppRequest, v1.UpdateAppResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateAppProcedure,
			opts...,
		),
		rollbackRevision: connect.NewClient[v1.RollbackRevisionRequest, v1.RollbackRevisionResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceRollbackRevisionProcedure,
			opts...,
		),
		updateRevisionStatus: connect.NewClient[v1.UpdateRevisionStatusRequest, v1.UpdateRevisionStatusResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateRevisionStatusProcedure,
			opts...,
		),
		deletePorterApp: connect.NewClient[v1.DeletePorterAppRequest, v1.DeletePorterAppResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeletePorterAppProcedure,
			opts...,
		),
		deleteAppDeployment: connect.NewClient[v1.DeleteAppDeploymentRequest, v1.DeleteAppDeploymentResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeleteAppDeploymentProcedure,
			opts...,
		),
		deleteDeploymentTarget: connect.NewClient[v1.DeleteDeploymentTargetRequest, v1.DeleteDeploymentTargetResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeleteDeploymentTargetProcedure,
			opts...,
		),
		currentAppRevision: connect.NewClient[v1.CurrentAppRevisionRequest, v1.CurrentAppRevisionResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCurrentAppRevisionProcedure,
			opts...,
		),
		listAppRevisions: connect.NewClient[v1.ListAppRevisionsRequest, v1.ListAppRevisionsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceListAppRevisionsProcedure,
			opts...,
		),
		latestAppRevisions: connect.NewClient[v1.LatestAppRevisionsRequest, v1.LatestAppRevisionsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceLatestAppRevisionsProcedure,
			opts...,
		),
		getAppRevision: connect.NewClient[v1.GetAppRevisionRequest, v1.GetAppRevisionResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceGetAppRevisionProcedure,
			opts...,
		),
		appTemplate: connect.NewClient[v1.AppTemplateRequest, v1.AppTemplateResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceAppTemplateProcedure,
			opts...,
		),
		predeployStatus: connect.NewClient[v1.PredeployStatusRequest, v1.PredeployStatusResponse](
			httpClient,
			baseURL+ClusterControlPlaneServicePredeployStatusProcedure,
			opts...,
		),
		deploymentTargetDetails: connect.NewClient[v1.DeploymentTargetDetailsRequest, v1.DeploymentTargetDetailsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeploymentTargetDetailsProcedure,
			opts...,
		),
		createDeploymentTarget: connect.NewClient[v1.CreateDeploymentTargetRequest, v1.CreateDeploymentTargetResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCreateDeploymentTargetProcedure,
			opts...,
		),
		deploymentTargets: connect.NewClient[v1.DeploymentTargetsRequest, v1.DeploymentTargetsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeploymentTargetsProcedure,
			opts...,
		),
		defaultDeploymentTarget: connect.NewClient[v1.DefaultDeploymentTargetRequest, v1.DefaultDeploymentTargetResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDefaultDeploymentTargetProcedure,
			opts...,
		),
		seedAppRevisions: connect.NewClient[v1.SeedAppRevisionsRequest, v1.SeedAppRevisionsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceSeedAppRevisionsProcedure,
			opts...,
		),
		envGroupVariables: connect.NewClient[v1.EnvGroupVariablesRequest, v1.EnvGroupVariablesResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceEnvGroupVariablesProcedure,
			opts...,
		),
		latestEnvGroupWithVariables: connect.NewClient[v1.LatestEnvGroupWithVariablesRequest, v1.LatestEnvGroupWithVariablesResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceLatestEnvGroupWithVariablesProcedure,
			opts...,
		),
		updateAppImage: connect.NewClient[v1.UpdateAppImageRequest, v1.UpdateAppImageResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateAppImageProcedure,
			opts...,
		),
		updateAppBuildSettings: connect.NewClient[v1.UpdateAppBuildSettingsRequest, v1.UpdateAppBuildSettingsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateAppBuildSettingsProcedure,
			opts...,
		),
		updateAppsLinkedToEnvGroup: connect.NewClient[v1.UpdateAppsLinkedToEnvGroupRequest, v1.UpdateAppsLinkedToEnvGroupResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateAppsLinkedToEnvGroupProcedure,
			opts...,
		),
		appHelmValues: connect.NewClient[v1.AppHelmValuesRequest, v1.AppHelmValuesResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceAppHelmValuesProcedure,
			opts...,
		),
		manualServiceRun: connect.NewClient[v1.ManualServiceRunRequest, v1.ManualServiceRunResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceManualServiceRunProcedure,
			opts...,
		),
		clusterNetworkSettings: connect.NewClient[v1.ClusterNetworkSettingsRequest, v1.ClusterNetworkSettingsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceClusterNetworkSettingsProcedure,
			opts...,
		),
		sharedNetworkSettings: connect.NewClient[v1.SharedNetworkSettingsRequest, v1.SharedNetworkSettingsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceSharedNetworkSettingsProcedure,
			opts...,
		),
		images: connect.NewClient[v1.ImagesRequest, v1.ImagesResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceImagesProcedure,
			opts...,
		),
		createAppInstance: connect.NewClient[v1.CreateAppInstanceRequest, v1.CreateAppInstanceResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCreateAppInstanceProcedure,
			opts...,
		),
		deleteAppInstance: connect.NewClient[v1.DeleteAppInstanceRequest, v1.DeleteAppInstanceResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeleteAppInstanceProcedure,
			opts...,
		),
		listAppInstances: connect.NewClient[v1.ListAppInstancesRequest, v1.ListAppInstancesResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceListAppInstancesProcedure,
			opts...,
		),
		createNotification: connect.NewClient[v1.CreateNotificationRequest, v1.CreateNotificationResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCreateNotificationProcedure,
			opts...,
		),
		updateServiceDeploymentStatus: connect.NewClient[v1.UpdateServiceDeploymentStatusRequest, v1.UpdateServiceDeploymentStatusResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateServiceDeploymentStatusProcedure,
			opts...,
		),
		dockerConfigFileForRegistry: connect.NewClient[v1.DockerConfigFileForRegistryRequest, v1.DockerConfigFileForRegistryResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDockerConfigFileForRegistryProcedure,
			opts...,
		),
		eCRTokenForRegistry: connect.NewClient[v1.ECRTokenForRegistryRequest, v1.ECRTokenForRegistryResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceECRTokenForRegistryProcedure,
			opts...,
		),
		assumeRoleCredentials: connect.NewClient[v1.AssumeRoleCredentialsRequest, v1.AssumeRoleCredentialsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceAssumeRoleCredentialsProcedure,
			opts...,
		),
		assumeRoleChainTargets: connect.NewClient[v1.AssumeRoleChainTargetsRequest, v1.AssumeRoleChainTargetsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceAssumeRoleChainTargetsProcedure,
			opts...,
		),
		certificateAuthorityData: connect.NewClient[v1.CertificateAuthorityDataRequest, v1.CertificateAuthorityDataResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCertificateAuthorityDataProcedure,
			opts...,
		),
		eKSBearerToken: connect.NewClient[v1.EKSBearerTokenRequest, v1.EKSBearerTokenResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceEKSBearerTokenProcedure,
			opts...,
		),
		listRepositoriesForRegistry: connect.NewClient[v1.ListRepositoriesForRegistryRequest, v1.ListRepositoriesForRegistryResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceListRepositoriesForRegistryProcedure,
			opts...,
		),
		listImagesForRepository: connect.NewClient[v1.ListImagesForRepositoryRequest, v1.ListImagesForRepositoryResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceListImagesForRepositoryProcedure,
			opts...,
		),
		datastoreStatus: connect.NewClient[v1.DatastoreStatusRequest, v1.DatastoreStatusResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDatastoreStatusProcedure,
			opts...,
		),
		registryStatus: connect.NewClient[v1.RegistryStatusRequest, v1.RegistryStatusResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceRegistryStatusProcedure,
			opts...,
		),
		setupExternalSecrets: connect.NewClient[v1.SetupExternalSecretsRequest, v1.SetupExternalSecretsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceSetupExternalSecretsProcedure,
			opts...,
		),
		createEnvGroup: connect.NewClient[v1.CreateEnvGroupRequest, v1.CreateEnvGroupResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCreateEnvGroupProcedure,
			opts...,
		),
		deleteEnvGroup: connect.NewClient[v1.DeleteEnvGroupRequest, v1.DeleteEnvGroupResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeleteEnvGroupProcedure,
			opts...,
		),
	}
}

// clusterControlPlaneServiceClient implements ClusterControlPlaneServiceClient.
type clusterControlPlaneServiceClient struct {
	quotaIncrease                  *connect.Client[v1.QuotaIncreaseRequest, v1.QuotaIncreaseResponse]
	updateCloudProviderCredentials *connect.Client[v1.UpdateCloudProviderCredentialsRequest, v1.UpdateCloudProviderCredentialsResponse]
	quotaPreflightCheck            *connect.Client[v1.QuotaPreflightCheckRequest, v1.QuotaPreflightCheckResponse]
	preflightCheck                 *connect.Client[v1.PreflightCheckRequest, v1.PreflightCheckResponse]
	createAssumeRoleChain          *connect.Client[v1.CreateAssumeRoleChainRequest, v1.CreateAssumeRoleChainResponse]
	saveAzureCredentials           *connect.Client[v1.SaveAzureCredentialsRequest, v1.SaveAzureCredentialsResponse]
	kubeConfigForCluster           *connect.Client[v1.KubeConfigForClusterRequest, v1.KubeConfigForClusterResponse]
	updateContract                 *connect.Client[v1.UpdateContractRequest, v1.UpdateContractResponse]
	readContract                   *connect.Client[v1.ReadContractRequest, v1.ReadContractResponse]
	clusterStatus                  *connect.Client[v1.ClusterStatusRequest, v1.ClusterStatusResponse]
	deleteCluster                  *connect.Client[v1.DeleteClusterRequest, v1.DeleteClusterResponse]
	tokenForRegistry               *connect.Client[v1.TokenForRegistryRequest, v1.TokenForRegistryResponse]
	validatePorterApp              *connect.Client[v1.ValidatePorterAppRequest, v1.ValidatePorterAppResponse]
	applyPorterApp                 *connect.Client[v1.ApplyPorterAppRequest, v1.ApplyPorterAppResponse]
	updateApp                      *connect.Client[v1.UpdateAppRequest, v1.UpdateAppResponse]
	rollbackRevision               *connect.Client[v1.RollbackRevisionRequest, v1.RollbackRevisionResponse]
	updateRevisionStatus           *connect.Client[v1.UpdateRevisionStatusRequest, v1.UpdateRevisionStatusResponse]
	deletePorterApp                *connect.Client[v1.DeletePorterAppRequest, v1.DeletePorterAppResponse]
	deleteAppDeployment            *connect.Client[v1.DeleteAppDeploymentRequest, v1.DeleteAppDeploymentResponse]
	deleteDeploymentTarget         *connect.Client[v1.DeleteDeploymentTargetRequest, v1.DeleteDeploymentTargetResponse]
	currentAppRevision             *connect.Client[v1.CurrentAppRevisionRequest, v1.CurrentAppRevisionResponse]
	listAppRevisions               *connect.Client[v1.ListAppRevisionsRequest, v1.ListAppRevisionsResponse]
	latestAppRevisions             *connect.Client[v1.LatestAppRevisionsRequest, v1.LatestAppRevisionsResponse]
	getAppRevision                 *connect.Client[v1.GetAppRevisionRequest, v1.GetAppRevisionResponse]
	appTemplate                    *connect.Client[v1.AppTemplateRequest, v1.AppTemplateResponse]
	predeployStatus                *connect.Client[v1.PredeployStatusRequest, v1.PredeployStatusResponse]
	deploymentTargetDetails        *connect.Client[v1.DeploymentTargetDetailsRequest, v1.DeploymentTargetDetailsResponse]
	createDeploymentTarget         *connect.Client[v1.CreateDeploymentTargetRequest, v1.CreateDeploymentTargetResponse]
	deploymentTargets              *connect.Client[v1.DeploymentTargetsRequest, v1.DeploymentTargetsResponse]
	defaultDeploymentTarget        *connect.Client[v1.DefaultDeploymentTargetRequest, v1.DefaultDeploymentTargetResponse]
	seedAppRevisions               *connect.Client[v1.SeedAppRevisionsRequest, v1.SeedAppRevisionsResponse]
	envGroupVariables              *connect.Client[v1.EnvGroupVariablesRequest, v1.EnvGroupVariablesResponse]
	latestEnvGroupWithVariables    *connect.Client[v1.LatestEnvGroupWithVariablesRequest, v1.LatestEnvGroupWithVariablesResponse]
	updateAppImage                 *connect.Client[v1.UpdateAppImageRequest, v1.UpdateAppImageResponse]
	updateAppBuildSettings         *connect.Client[v1.UpdateAppBuildSettingsRequest, v1.UpdateAppBuildSettingsResponse]
	updateAppsLinkedToEnvGroup     *connect.Client[v1.UpdateAppsLinkedToEnvGroupRequest, v1.UpdateAppsLinkedToEnvGroupResponse]
	appHelmValues                  *connect.Client[v1.AppHelmValuesRequest, v1.AppHelmValuesResponse]
	manualServiceRun               *connect.Client[v1.ManualServiceRunRequest, v1.ManualServiceRunResponse]
	clusterNetworkSettings         *connect.Client[v1.ClusterNetworkSettingsRequest, v1.ClusterNetworkSettingsResponse]
	sharedNetworkSettings          *connect.Client[v1.SharedNetworkSettingsRequest, v1.SharedNetworkSettingsResponse]
	images                         *connect.Client[v1.ImagesRequest, v1.ImagesResponse]
	createAppInstance              *connect.Client[v1.CreateAppInstanceRequest, v1.CreateAppInstanceResponse]
	deleteAppInstance              *connect.Client[v1.DeleteAppInstanceRequest, v1.DeleteAppInstanceResponse]
	listAppInstances               *connect.Client[v1.ListAppInstancesRequest, v1.ListAppInstancesResponse]
	createNotification             *connect.Client[v1.CreateNotificationRequest, v1.CreateNotificationResponse]
	updateServiceDeploymentStatus  *connect.Client[v1.UpdateServiceDeploymentStatusRequest, v1.UpdateServiceDeploymentStatusResponse]
	dockerConfigFileForRegistry    *connect.Client[v1.DockerConfigFileForRegistryRequest, v1.DockerConfigFileForRegistryResponse]
	eCRTokenForRegistry            *connect.Client[v1.ECRTokenForRegistryRequest, v1.ECRTokenForRegistryResponse]
	assumeRoleCredentials          *connect.Client[v1.AssumeRoleCredentialsRequest, v1.AssumeRoleCredentialsResponse]
	assumeRoleChainTargets         *connect.Client[v1.AssumeRoleChainTargetsRequest, v1.AssumeRoleChainTargetsResponse]
	certificateAuthorityData       *connect.Client[v1.CertificateAuthorityDataRequest, v1.CertificateAuthorityDataResponse]
	eKSBearerToken                 *connect.Client[v1.EKSBearerTokenRequest, v1.EKSBearerTokenResponse]
	listRepositoriesForRegistry    *connect.Client[v1.ListRepositoriesForRegistryRequest, v1.ListRepositoriesForRegistryResponse]
	listImagesForRepository        *connect.Client[v1.ListImagesForRepositoryRequest, v1.ListImagesForRepositoryResponse]
	datastoreStatus                *connect.Client[v1.DatastoreStatusRequest, v1.DatastoreStatusResponse]
	registryStatus                 *connect.Client[v1.RegistryStatusRequest, v1.RegistryStatusResponse]
	setupExternalSecrets           *connect.Client[v1.SetupExternalSecretsRequest, v1.SetupExternalSecretsResponse]
	createEnvGroup                 *connect.Client[v1.CreateEnvGroupRequest, v1.CreateEnvGroupResponse]
	deleteEnvGroup                 *connect.Client[v1.DeleteEnvGroupRequest, v1.DeleteEnvGroupResponse]
}

// QuotaIncrease calls porter.v1.ClusterControlPlaneService.QuotaIncrease.
func (c *clusterControlPlaneServiceClient) QuotaIncrease(ctx context.Context, req *connect.Request[v1.QuotaIncreaseRequest]) (*connect.Response[v1.QuotaIncreaseResponse], error) {
	return c.quotaIncrease.CallUnary(ctx, req)
}

// UpdateCloudProviderCredentials calls
// porter.v1.ClusterControlPlaneService.UpdateCloudProviderCredentials.
func (c *clusterControlPlaneServiceClient) UpdateCloudProviderCredentials(ctx context.Context, req *connect.Request[v1.UpdateCloudProviderCredentialsRequest]) (*connect.Response[v1.UpdateCloudProviderCredentialsResponse], error) {
	return c.updateCloudProviderCredentials.CallUnary(ctx, req)
}

// QuotaPreflightCheck calls porter.v1.ClusterControlPlaneService.QuotaPreflightCheck.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) QuotaPreflightCheck(ctx context.Context, req *connect.Request[v1.QuotaPreflightCheckRequest]) (*connect.Response[v1.QuotaPreflightCheckResponse], error) {
	return c.quotaPreflightCheck.CallUnary(ctx, req)
}

// PreflightCheck calls porter.v1.ClusterControlPlaneService.PreflightCheck.
func (c *clusterControlPlaneServiceClient) PreflightCheck(ctx context.Context, req *connect.Request[v1.PreflightCheckRequest]) (*connect.Response[v1.PreflightCheckResponse], error) {
	return c.preflightCheck.CallUnary(ctx, req)
}

// CreateAssumeRoleChain calls porter.v1.ClusterControlPlaneService.CreateAssumeRoleChain.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) CreateAssumeRoleChain(ctx context.Context, req *connect.Request[v1.CreateAssumeRoleChainRequest]) (*connect.Response[v1.CreateAssumeRoleChainResponse], error) {
	return c.createAssumeRoleChain.CallUnary(ctx, req)
}

// SaveAzureCredentials calls porter.v1.ClusterControlPlaneService.SaveAzureCredentials.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) SaveAzureCredentials(ctx context.Context, req *connect.Request[v1.SaveAzureCredentialsRequest]) (*connect.Response[v1.SaveAzureCredentialsResponse], error) {
	return c.saveAzureCredentials.CallUnary(ctx, req)
}

// KubeConfigForCluster calls porter.v1.ClusterControlPlaneService.KubeConfigForCluster.
func (c *clusterControlPlaneServiceClient) KubeConfigForCluster(ctx context.Context, req *connect.Request[v1.KubeConfigForClusterRequest]) (*connect.Response[v1.KubeConfigForClusterResponse], error) {
	return c.kubeConfigForCluster.CallUnary(ctx, req)
}

// UpdateContract calls porter.v1.ClusterControlPlaneService.UpdateContract.
func (c *clusterControlPlaneServiceClient) UpdateContract(ctx context.Context, req *connect.Request[v1.UpdateContractRequest]) (*connect.Response[v1.UpdateContractResponse], error) {
	return c.updateContract.CallUnary(ctx, req)
}

// ReadContract calls porter.v1.ClusterControlPlaneService.ReadContract.
func (c *clusterControlPlaneServiceClient) ReadContract(ctx context.Context, req *connect.Request[v1.ReadContractRequest]) (*connect.Response[v1.ReadContractResponse], error) {
	return c.readContract.CallUnary(ctx, req)
}

// ClusterStatus calls porter.v1.ClusterControlPlaneService.ClusterStatus.
func (c *clusterControlPlaneServiceClient) ClusterStatus(ctx context.Context, req *connect.Request[v1.ClusterStatusRequest]) (*connect.Response[v1.ClusterStatusResponse], error) {
	return c.clusterStatus.CallUnary(ctx, req)
}

// DeleteCluster calls porter.v1.ClusterControlPlaneService.DeleteCluster.
func (c *clusterControlPlaneServiceClient) DeleteCluster(ctx context.Context, req *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error) {
	return c.deleteCluster.CallUnary(ctx, req)
}

// TokenForRegistry calls porter.v1.ClusterControlPlaneService.TokenForRegistry.
func (c *clusterControlPlaneServiceClient) TokenForRegistry(ctx context.Context, req *connect.Request[v1.TokenForRegistryRequest]) (*connect.Response[v1.TokenForRegistryResponse], error) {
	return c.tokenForRegistry.CallUnary(ctx, req)
}

// ValidatePorterApp calls porter.v1.ClusterControlPlaneService.ValidatePorterApp.
func (c *clusterControlPlaneServiceClient) ValidatePorterApp(ctx context.Context, req *connect.Request[v1.ValidatePorterAppRequest]) (*connect.Response[v1.ValidatePorterAppResponse], error) {
	return c.validatePorterApp.CallUnary(ctx, req)
}

// ApplyPorterApp calls porter.v1.ClusterControlPlaneService.ApplyPorterApp.
func (c *clusterControlPlaneServiceClient) ApplyPorterApp(ctx context.Context, req *connect.Request[v1.ApplyPorterAppRequest]) (*connect.Response[v1.ApplyPorterAppResponse], error) {
	return c.applyPorterApp.CallUnary(ctx, req)
}

// UpdateApp calls porter.v1.ClusterControlPlaneService.UpdateApp.
func (c *clusterControlPlaneServiceClient) UpdateApp(ctx context.Context, req *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error) {
	return c.updateApp.CallUnary(ctx, req)
}

// RollbackRevision calls porter.v1.ClusterControlPlaneService.RollbackRevision.
func (c *clusterControlPlaneServiceClient) RollbackRevision(ctx context.Context, req *connect.Request[v1.RollbackRevisionRequest]) (*connect.Response[v1.RollbackRevisionResponse], error) {
	return c.rollbackRevision.CallUnary(ctx, req)
}

// UpdateRevisionStatus calls porter.v1.ClusterControlPlaneService.UpdateRevisionStatus.
func (c *clusterControlPlaneServiceClient) UpdateRevisionStatus(ctx context.Context, req *connect.Request[v1.UpdateRevisionStatusRequest]) (*connect.Response[v1.UpdateRevisionStatusResponse], error) {
	return c.updateRevisionStatus.CallUnary(ctx, req)
}

// DeletePorterApp calls porter.v1.ClusterControlPlaneService.DeletePorterApp.
func (c *clusterControlPlaneServiceClient) DeletePorterApp(ctx context.Context, req *connect.Request[v1.DeletePorterAppRequest]) (*connect.Response[v1.DeletePorterAppResponse], error) {
	return c.deletePorterApp.CallUnary(ctx, req)
}

// DeleteAppDeployment calls porter.v1.ClusterControlPlaneService.DeleteAppDeployment.
func (c *clusterControlPlaneServiceClient) DeleteAppDeployment(ctx context.Context, req *connect.Request[v1.DeleteAppDeploymentRequest]) (*connect.Response[v1.DeleteAppDeploymentResponse], error) {
	return c.deleteAppDeployment.CallUnary(ctx, req)
}

// DeleteDeploymentTarget calls porter.v1.ClusterControlPlaneService.DeleteDeploymentTarget.
func (c *clusterControlPlaneServiceClient) DeleteDeploymentTarget(ctx context.Context, req *connect.Request[v1.DeleteDeploymentTargetRequest]) (*connect.Response[v1.DeleteDeploymentTargetResponse], error) {
	return c.deleteDeploymentTarget.CallUnary(ctx, req)
}

// CurrentAppRevision calls porter.v1.ClusterControlPlaneService.CurrentAppRevision.
func (c *clusterControlPlaneServiceClient) CurrentAppRevision(ctx context.Context, req *connect.Request[v1.CurrentAppRevisionRequest]) (*connect.Response[v1.CurrentAppRevisionResponse], error) {
	return c.currentAppRevision.CallUnary(ctx, req)
}

// ListAppRevisions calls porter.v1.ClusterControlPlaneService.ListAppRevisions.
func (c *clusterControlPlaneServiceClient) ListAppRevisions(ctx context.Context, req *connect.Request[v1.ListAppRevisionsRequest]) (*connect.Response[v1.ListAppRevisionsResponse], error) {
	return c.listAppRevisions.CallUnary(ctx, req)
}

// LatestAppRevisions calls porter.v1.ClusterControlPlaneService.LatestAppRevisions.
func (c *clusterControlPlaneServiceClient) LatestAppRevisions(ctx context.Context, req *connect.Request[v1.LatestAppRevisionsRequest]) (*connect.Response[v1.LatestAppRevisionsResponse], error) {
	return c.latestAppRevisions.CallUnary(ctx, req)
}

// GetAppRevision calls porter.v1.ClusterControlPlaneService.GetAppRevision.
func (c *clusterControlPlaneServiceClient) GetAppRevision(ctx context.Context, req *connect.Request[v1.GetAppRevisionRequest]) (*connect.Response[v1.GetAppRevisionResponse], error) {
	return c.getAppRevision.CallUnary(ctx, req)
}

// AppTemplate calls porter.v1.ClusterControlPlaneService.AppTemplate.
func (c *clusterControlPlaneServiceClient) AppTemplate(ctx context.Context, req *connect.Request[v1.AppTemplateRequest]) (*connect.Response[v1.AppTemplateResponse], error) {
	return c.appTemplate.CallUnary(ctx, req)
}

// PredeployStatus calls porter.v1.ClusterControlPlaneService.PredeployStatus.
func (c *clusterControlPlaneServiceClient) PredeployStatus(ctx context.Context, req *connect.Request[v1.PredeployStatusRequest]) (*connect.Response[v1.PredeployStatusResponse], error) {
	return c.predeployStatus.CallUnary(ctx, req)
}

// DeploymentTargetDetails calls porter.v1.ClusterControlPlaneService.DeploymentTargetDetails.
func (c *clusterControlPlaneServiceClient) DeploymentTargetDetails(ctx context.Context, req *connect.Request[v1.DeploymentTargetDetailsRequest]) (*connect.Response[v1.DeploymentTargetDetailsResponse], error) {
	return c.deploymentTargetDetails.CallUnary(ctx, req)
}

// CreateDeploymentTarget calls porter.v1.ClusterControlPlaneService.CreateDeploymentTarget.
func (c *clusterControlPlaneServiceClient) CreateDeploymentTarget(ctx context.Context, req *connect.Request[v1.CreateDeploymentTargetRequest]) (*connect.Response[v1.CreateDeploymentTargetResponse], error) {
	return c.createDeploymentTarget.CallUnary(ctx, req)
}

// DeploymentTargets calls porter.v1.ClusterControlPlaneService.DeploymentTargets.
func (c *clusterControlPlaneServiceClient) DeploymentTargets(ctx context.Context, req *connect.Request[v1.DeploymentTargetsRequest]) (*connect.Response[v1.DeploymentTargetsResponse], error) {
	return c.deploymentTargets.CallUnary(ctx, req)
}

// DefaultDeploymentTarget calls porter.v1.ClusterControlPlaneService.DefaultDeploymentTarget.
func (c *clusterControlPlaneServiceClient) DefaultDeploymentTarget(ctx context.Context, req *connect.Request[v1.DefaultDeploymentTargetRequest]) (*connect.Response[v1.DefaultDeploymentTargetResponse], error) {
	return c.defaultDeploymentTarget.CallUnary(ctx, req)
}

// SeedAppRevisions calls porter.v1.ClusterControlPlaneService.SeedAppRevisions.
func (c *clusterControlPlaneServiceClient) SeedAppRevisions(ctx context.Context, req *connect.Request[v1.SeedAppRevisionsRequest]) (*connect.Response[v1.SeedAppRevisionsResponse], error) {
	return c.seedAppRevisions.CallUnary(ctx, req)
}

// EnvGroupVariables calls porter.v1.ClusterControlPlaneService.EnvGroupVariables.
func (c *clusterControlPlaneServiceClient) EnvGroupVariables(ctx context.Context, req *connect.Request[v1.EnvGroupVariablesRequest]) (*connect.Response[v1.EnvGroupVariablesResponse], error) {
	return c.envGroupVariables.CallUnary(ctx, req)
}

// LatestEnvGroupWithVariables calls
// porter.v1.ClusterControlPlaneService.LatestEnvGroupWithVariables.
func (c *clusterControlPlaneServiceClient) LatestEnvGroupWithVariables(ctx context.Context, req *connect.Request[v1.LatestEnvGroupWithVariablesRequest]) (*connect.Response[v1.LatestEnvGroupWithVariablesResponse], error) {
	return c.latestEnvGroupWithVariables.CallUnary(ctx, req)
}

// UpdateAppImage calls porter.v1.ClusterControlPlaneService.UpdateAppImage.
func (c *clusterControlPlaneServiceClient) UpdateAppImage(ctx context.Context, req *connect.Request[v1.UpdateAppImageRequest]) (*connect.Response[v1.UpdateAppImageResponse], error) {
	return c.updateAppImage.CallUnary(ctx, req)
}

// UpdateAppBuildSettings calls porter.v1.ClusterControlPlaneService.UpdateAppBuildSettings.
func (c *clusterControlPlaneServiceClient) UpdateAppBuildSettings(ctx context.Context, req *connect.Request[v1.UpdateAppBuildSettingsRequest]) (*connect.Response[v1.UpdateAppBuildSettingsResponse], error) {
	return c.updateAppBuildSettings.CallUnary(ctx, req)
}

// UpdateAppsLinkedToEnvGroup calls porter.v1.ClusterControlPlaneService.UpdateAppsLinkedToEnvGroup.
func (c *clusterControlPlaneServiceClient) UpdateAppsLinkedToEnvGroup(ctx context.Context, req *connect.Request[v1.UpdateAppsLinkedToEnvGroupRequest]) (*connect.Response[v1.UpdateAppsLinkedToEnvGroupResponse], error) {
	return c.updateAppsLinkedToEnvGroup.CallUnary(ctx, req)
}

// AppHelmValues calls porter.v1.ClusterControlPlaneService.AppHelmValues.
func (c *clusterControlPlaneServiceClient) AppHelmValues(ctx context.Context, req *connect.Request[v1.AppHelmValuesRequest]) (*connect.Response[v1.AppHelmValuesResponse], error) {
	return c.appHelmValues.CallUnary(ctx, req)
}

// ManualServiceRun calls porter.v1.ClusterControlPlaneService.ManualServiceRun.
func (c *clusterControlPlaneServiceClient) ManualServiceRun(ctx context.Context, req *connect.Request[v1.ManualServiceRunRequest]) (*connect.Response[v1.ManualServiceRunResponse], error) {
	return c.manualServiceRun.CallUnary(ctx, req)
}

// ClusterNetworkSettings calls porter.v1.ClusterControlPlaneService.ClusterNetworkSettings.
func (c *clusterControlPlaneServiceClient) ClusterNetworkSettings(ctx context.Context, req *connect.Request[v1.ClusterNetworkSettingsRequest]) (*connect.Response[v1.ClusterNetworkSettingsResponse], error) {
	return c.clusterNetworkSettings.CallUnary(ctx, req)
}

// SharedNetworkSettings calls porter.v1.ClusterControlPlaneService.SharedNetworkSettings.
func (c *clusterControlPlaneServiceClient) SharedNetworkSettings(ctx context.Context, req *connect.Request[v1.SharedNetworkSettingsRequest]) (*connect.Response[v1.SharedNetworkSettingsResponse], error) {
	return c.sharedNetworkSettings.CallUnary(ctx, req)
}

// Images calls porter.v1.ClusterControlPlaneService.Images.
func (c *clusterControlPlaneServiceClient) Images(ctx context.Context, req *connect.Request[v1.ImagesRequest]) (*connect.Response[v1.ImagesResponse], error) {
	return c.images.CallUnary(ctx, req)
}

// CreateAppInstance calls porter.v1.ClusterControlPlaneService.CreateAppInstance.
func (c *clusterControlPlaneServiceClient) CreateAppInstance(ctx context.Context, req *connect.Request[v1.CreateAppInstanceRequest]) (*connect.Response[v1.CreateAppInstanceResponse], error) {
	return c.createAppInstance.CallUnary(ctx, req)
}

// DeleteAppInstance calls porter.v1.ClusterControlPlaneService.DeleteAppInstance.
func (c *clusterControlPlaneServiceClient) DeleteAppInstance(ctx context.Context, req *connect.Request[v1.DeleteAppInstanceRequest]) (*connect.Response[v1.DeleteAppInstanceResponse], error) {
	return c.deleteAppInstance.CallUnary(ctx, req)
}

// ListAppInstances calls porter.v1.ClusterControlPlaneService.ListAppInstances.
func (c *clusterControlPlaneServiceClient) ListAppInstances(ctx context.Context, req *connect.Request[v1.ListAppInstancesRequest]) (*connect.Response[v1.ListAppInstancesResponse], error) {
	return c.listAppInstances.CallUnary(ctx, req)
}

// CreateNotification calls porter.v1.ClusterControlPlaneService.CreateNotification.
func (c *clusterControlPlaneServiceClient) CreateNotification(ctx context.Context, req *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error) {
	return c.createNotification.CallUnary(ctx, req)
}

// UpdateServiceDeploymentStatus calls
// porter.v1.ClusterControlPlaneService.UpdateServiceDeploymentStatus.
func (c *clusterControlPlaneServiceClient) UpdateServiceDeploymentStatus(ctx context.Context, req *connect.Request[v1.UpdateServiceDeploymentStatusRequest]) (*connect.Response[v1.UpdateServiceDeploymentStatusResponse], error) {
	return c.updateServiceDeploymentStatus.CallUnary(ctx, req)
}

// DockerConfigFileForRegistry calls
// porter.v1.ClusterControlPlaneService.DockerConfigFileForRegistry.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) DockerConfigFileForRegistry(ctx context.Context, req *connect.Request[v1.DockerConfigFileForRegistryRequest]) (*connect.Response[v1.DockerConfigFileForRegistryResponse], error) {
	return c.dockerConfigFileForRegistry.CallUnary(ctx, req)
}

// ECRTokenForRegistry calls porter.v1.ClusterControlPlaneService.ECRTokenForRegistry.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) ECRTokenForRegistry(ctx context.Context, req *connect.Request[v1.ECRTokenForRegistryRequest]) (*connect.Response[v1.ECRTokenForRegistryResponse], error) {
	return c.eCRTokenForRegistry.CallUnary(ctx, req)
}

// AssumeRoleCredentials calls porter.v1.ClusterControlPlaneService.AssumeRoleCredentials.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) AssumeRoleCredentials(ctx context.Context, req *connect.Request[v1.AssumeRoleCredentialsRequest]) (*connect.Response[v1.AssumeRoleCredentialsResponse], error) {
	return c.assumeRoleCredentials.CallUnary(ctx, req)
}

// AssumeRoleChainTargets calls porter.v1.ClusterControlPlaneService.AssumeRoleChainTargets.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) AssumeRoleChainTargets(ctx context.Context, req *connect.Request[v1.AssumeRoleChainTargetsRequest]) (*connect.Response[v1.AssumeRoleChainTargetsResponse], error) {
	return c.assumeRoleChainTargets.CallUnary(ctx, req)
}

// CertificateAuthorityData calls porter.v1.ClusterControlPlaneService.CertificateAuthorityData.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) CertificateAuthorityData(ctx context.Context, req *connect.Request[v1.CertificateAuthorityDataRequest]) (*connect.Response[v1.CertificateAuthorityDataResponse], error) {
	return c.certificateAuthorityData.CallUnary(ctx, req)
}

// EKSBearerToken calls porter.v1.ClusterControlPlaneService.EKSBearerToken.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) EKSBearerToken(ctx context.Context, req *connect.Request[v1.EKSBearerTokenRequest]) (*connect.Response[v1.EKSBearerTokenResponse], error) {
	return c.eKSBearerToken.CallUnary(ctx, req)
}

// ListRepositoriesForRegistry calls
// porter.v1.ClusterControlPlaneService.ListRepositoriesForRegistry.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) ListRepositoriesForRegistry(ctx context.Context, req *connect.Request[v1.ListRepositoriesForRegistryRequest]) (*connect.Response[v1.ListRepositoriesForRegistryResponse], error) {
	return c.listRepositoriesForRegistry.CallUnary(ctx, req)
}

// ListImagesForRepository calls porter.v1.ClusterControlPlaneService.ListImagesForRepository.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) ListImagesForRepository(ctx context.Context, req *connect.Request[v1.ListImagesForRepositoryRequest]) (*connect.Response[v1.ListImagesForRepositoryResponse], error) {
	return c.listImagesForRepository.CallUnary(ctx, req)
}

// DatastoreStatus calls porter.v1.ClusterControlPlaneService.DatastoreStatus.
func (c *clusterControlPlaneServiceClient) DatastoreStatus(ctx context.Context, req *connect.Request[v1.DatastoreStatusRequest]) (*connect.Response[v1.DatastoreStatusResponse], error) {
	return c.datastoreStatus.CallUnary(ctx, req)
}

// RegistryStatus calls porter.v1.ClusterControlPlaneService.RegistryStatus.
func (c *clusterControlPlaneServiceClient) RegistryStatus(ctx context.Context, req *connect.Request[v1.RegistryStatusRequest]) (*connect.Response[v1.RegistryStatusResponse], error) {
	return c.registryStatus.CallUnary(ctx, req)
}

// SetupExternalSecrets calls porter.v1.ClusterControlPlaneService.SetupExternalSecrets.
func (c *clusterControlPlaneServiceClient) SetupExternalSecrets(ctx context.Context, req *connect.Request[v1.SetupExternalSecretsRequest]) (*connect.Response[v1.SetupExternalSecretsResponse], error) {
	return c.setupExternalSecrets.CallUnary(ctx, req)
}

// CreateEnvGroup calls porter.v1.ClusterControlPlaneService.CreateEnvGroup.
func (c *clusterControlPlaneServiceClient) CreateEnvGroup(ctx context.Context, req *connect.Request[v1.CreateEnvGroupRequest]) (*connect.Response[v1.CreateEnvGroupResponse], error) {
	return c.createEnvGroup.CallUnary(ctx, req)
}

// DeleteEnvGroup calls porter.v1.ClusterControlPlaneService.DeleteEnvGroup.
func (c *clusterControlPlaneServiceClient) DeleteEnvGroup(ctx context.Context, req *connect.Request[v1.DeleteEnvGroupRequest]) (*connect.Response[v1.DeleteEnvGroupResponse], error) {
	return c.deleteEnvGroup.CallUnary(ctx, req)
}

// ClusterControlPlaneServiceHandler is an implementation of the
// porter.v1.ClusterControlPlaneService service.
type ClusterControlPlaneServiceHandler interface {
	// QuotaIncrease will auto request increases to the quota in a specific region given a list of quotas
	QuotaIncrease(context.Context, *connect.Request[v1.QuotaIncreaseRequest]) (*connect.Response[v1.QuotaIncreaseResponse], error)
	// UpdateCloudProviderCredentials creates or updates the credentials used for accessing the specific cloud
	UpdateCloudProviderCredentials(context.Context, *connect.Request[v1.UpdateCloudProviderCredentialsRequest]) (*connect.Response[v1.UpdateCloudProviderCredentialsResponse], error)
	// QuotaPreflightCheck checks if the target account and region has sufficient resources (EIP addresses and VPCs) to provision a new cluster
	//
	// Deprecated: do not use.
	QuotaPreflightCheck(context.Context, *connect.Request[v1.QuotaPreflightCheckRequest]) (*connect.Response[v1.QuotaPreflightCheckResponse], error)
	// PreflightCheck checks if the target account is able to provision a cluster
	PreflightCheck(context.Context, *connect.Request[v1.PreflightCheckRequest]) (*connect.Response[v1.PreflightCheckResponse], error)
	// CreateAssumeRoleChain creates a new assume role chain for a given project and checks if the target assumed role has sufficient permissions. Use UpdateCloudProviderCredentials instead.
	//
	// Deprecated: do not use.
	CreateAssumeRoleChain(context.Context, *connect.Request[v1.CreateAssumeRoleChainRequest]) (*connect.Response[v1.CreateAssumeRoleChainResponse], error)
	// SaveAzureCredentials stores the new azure service principal credentials and creates the azure cluster identity. Deprecated. Use UpdateCloudProviderCredentials instead.
	//
	// Deprecated: do not use.
	SaveAzureCredentials(context.Context, *connect.Request[v1.SaveAzureCredentialsRequest]) (*connect.Response[v1.SaveAzureCredentialsResponse], error)
	// KubeConfigForCluster gets a valid kubeconfig from the management cluster, for a given workload cluster
	KubeConfigForCluster(context.Context, *connect.Request[v1.KubeConfigForClusterRequest]) (*connect.Response[v1.KubeConfigForClusterResponse], error)
	// UpdateContract takes in a Porter Contract, actioning upon it where necessary
	UpdateContract(context.Context, *connect.Request[v1.UpdateContractRequest]) (*connect.Response[v1.UpdateContractResponse], error)
	// ReadContract returns the base64 encoded contract for a given cluster and project
	ReadContract(context.Context, *connect.Request[v1.ReadContractRequest]) (*connect.Response[v1.ReadContractResponse], error)
	// ClusterStatus returns the status of a given workload cluster
	ClusterStatus(context.Context, *connect.Request[v1.ClusterStatusRequest]) (*connect.Response[v1.ClusterStatusResponse], error)
	// DeleteCluster uninstalls system components from a given workload cluster before deleting it.
	// This should ultimately be wrapped into UpdateContract
	DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error)
	// TokenForRegistry returns a token for accessing a given registry
	TokenForRegistry(context.Context, *connect.Request[v1.TokenForRegistryRequest]) (*connect.Response[v1.TokenForRegistryResponse], error)
	// ValidatePorterApp validates and hydrates a definition of a porter app, based on the porter.yaml file
	ValidatePorterApp(context.Context, *connect.Request[v1.ValidatePorterAppRequest]) (*connect.Response[v1.ValidatePorterAppResponse], error)
	// ApplyPorterApp applies a porter app as defined by the provided porter.yaml file to a given deployment id
	ApplyPorterApp(context.Context, *connect.Request[v1.ApplyPorterAppRequest]) (*connect.Response[v1.ApplyPorterAppResponse], error)
	// UpdateApp hydrates a definition of a porter app, and takes necessary actions to update the app on the cluster
	UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error)
	// RollbackRevision reverts an app to the previous revision, or optionally to the revision specified
	RollbackRevision(context.Context, *connect.Request[v1.RollbackRevisionRequest]) (*connect.Response[v1.RollbackRevisionResponse], error)
	// UpdateRevisionStatus updates the status of a revision
	UpdateRevisionStatus(context.Context, *connect.Request[v1.UpdateRevisionStatusRequest]) (*connect.Response[v1.UpdateRevisionStatusResponse], error)
	// DeletePorterApp deletes all instances of a porter app across deployment targets in a given project
	DeletePorterApp(context.Context, *connect.Request[v1.DeletePorterAppRequest]) (*connect.Response[v1.DeletePorterAppResponse], error)
	// DeleteAppDeployment deletes a porter app from a given deployment target
	DeleteAppDeployment(context.Context, *connect.Request[v1.DeleteAppDeploymentRequest]) (*connect.Response[v1.DeleteAppDeploymentResponse], error)
	// DeleteDeploymentTarget deletes a deployment target from a given cluster
	DeleteDeploymentTarget(context.Context, *connect.Request[v1.DeleteDeploymentTargetRequest]) (*connect.Response[v1.DeleteDeploymentTargetResponse], error)
	// CurrentAppRevision returns the currently deployed app revision for a given porter_app and deployment_target
	CurrentAppRevision(context.Context, *connect.Request[v1.CurrentAppRevisionRequest]) (*connect.Response[v1.CurrentAppRevisionResponse], error)
	ListAppRevisions(context.Context, *connect.Request[v1.ListAppRevisionsRequest]) (*connect.Response[v1.ListAppRevisionsResponse], error)
	// LatestAppRevisions returns the currently deployed app revisions for a given deployment_target
	LatestAppRevisions(context.Context, *connect.Request[v1.LatestAppRevisionsRequest]) (*connect.Response[v1.LatestAppRevisionsResponse], error)
	// GetAppRevision returns the app revision for a given app revision id
	GetAppRevision(context.Context, *connect.Request[v1.GetAppRevisionRequest]) (*connect.Response[v1.GetAppRevisionResponse], error)
	// AppTemplate returns the app template for a given app id
	AppTemplate(context.Context, *connect.Request[v1.AppTemplateRequest]) (*connect.Response[v1.AppTemplateResponse], error)
	// PredeployStatus returns the status of the predeploy job for a given app revision
	PredeployStatus(context.Context, *connect.Request[v1.PredeployStatusRequest]) (*connect.Response[v1.PredeployStatusResponse], error)
	// DeploymentTargetDetails returns the details of a deployment target job given the id.  This is a work-around to moving all namespace-related
	// logic to CCP and should only be used to support metrics and logging (and confirming cluster RBAC). This will fail once
	// we start using deployment targets that do not have a selector kind of "namespace"
	DeploymentTargetDetails(context.Context, *connect.Request[v1.DeploymentTargetDetailsRequest]) (*connect.Response[v1.DeploymentTargetDetailsResponse], error)
	// CreateDeploymentTarget creates a new deployment target for a given cluster, returning the deployment target id. If a deployment target with the same name already exists with
	// the same namespace, cluster and preview status, the existing deployment target ID will be returned. Otherwise, an error will be returned.
	CreateDeploymentTarget(context.Context, *connect.Request[v1.CreateDeploymentTargetRequest]) (*connect.Response[v1.CreateDeploymentTargetResponse], error)
	// DeploymentTargets returns all of the deployment targets for a given project
	DeploymentTargets(context.Context, *connect.Request[v1.DeploymentTargetsRequest]) (*connect.Response[v1.DeploymentTargetsResponse], error)
	// DefaultDeploymentTarget returns the default deployment target for a given cluster
	DefaultDeploymentTarget(context.Context, *connect.Request[v1.DefaultDeploymentTargetRequest]) (*connect.Response[v1.DefaultDeploymentTargetResponse], error)
	// SeedAppRevision seeds app revisions for a given project id, cluster id, release name, namespace.  It should only be called
	// from the Cluster Control Plane CLI and should be removed once all legacy users are migrated to the new apply validate.
	SeedAppRevisions(context.Context, *connect.Request[v1.SeedAppRevisionsRequest]) (*connect.Response[v1.SeedAppRevisionsResponse], error)
	// EnvGroupVariables returns the variables for a given env group name and version
	EnvGroupVariables(context.Context, *connect.Request[v1.EnvGroupVariablesRequest]) (*connect.Response[v1.EnvGroupVariablesResponse], error)
	// LatestEnvGroupWithVariables returns the latest env group and variables for a given env group name in the given deployment target
	LatestEnvGroupWithVariables(context.Context, *connect.Request[v1.LatestEnvGroupWithVariablesRequest]) (*connect.Response[v1.LatestEnvGroupWithVariablesResponse], error)
	// UpdateAppImage updates the image of a porter app and applies the new app revision to the deployment target.
	UpdateAppImage(context.Context, *connect.Request[v1.UpdateAppImageRequest]) (*connect.Response[v1.UpdateAppImageResponse], error)
	// UpdateAppBuildSettings updates the build settings for an app
	UpdateAppBuildSettings(context.Context, *connect.Request[v1.UpdateAppBuildSettingsRequest]) (*connect.Response[v1.UpdateAppBuildSettingsResponse], error)
	// UpdateAppsLinkedToEnvGroup updates all apps that are linked to a given env group
	UpdateAppsLinkedToEnvGroup(context.Context, *connect.Request[v1.UpdateAppsLinkedToEnvGroupRequest]) (*connect.Response[v1.UpdateAppsLinkedToEnvGroupResponse], error)
	// AppHelmValues retrieves the raw helm values used to install an app on the cluster.
	AppHelmValues(context.Context, *connect.Request[v1.AppHelmValuesRequest]) (*connect.Response[v1.AppHelmValuesResponse], error)
	// ManualServiceRun creates a pod/job with the same spec as the provided service (as defined in the latest app revision)
	// and runs the provided command, or if no command is provided, runs the command defined for the service.
	ManualServiceRun(context.Context, *connect.Request[v1.ManualServiceRunRequest]) (*connect.Response[v1.ManualServiceRunResponse], error)
	// ClusterNetworkSettings gets the network settings (region, subnets, vpc) for a given project/cluster combination
	ClusterNetworkSettings(context.Context, *connect.Request[v1.ClusterNetworkSettingsRequest]) (*connect.Response[v1.ClusterNetworkSettingsResponse], error)
	// SharedNetworkSettings gets the network settings (region, subnets, vpc) for a given project/cluster/service combination
	SharedNetworkSettings(context.Context, *connect.Request[v1.SharedNetworkSettingsRequest]) (*connect.Response[v1.SharedNetworkSettingsResponse], error)
	// Images returns images matching provided filter parameters
	Images(context.Context, *connect.Request[v1.ImagesRequest]) (*connect.Response[v1.ImagesResponse], error)
	// CreateAppInstance creates a new app instance for a given name and deployment target. If an app instance with the same name and deployment target already exists, the existing app instance ID will be returned.
	CreateAppInstance(context.Context, *connect.Request[v1.CreateAppInstanceRequest]) (*connect.Response[v1.CreateAppInstanceResponse], error)
	// DeleteAppInstance deletes an app instance and all associated revisions.
	DeleteAppInstance(context.Context, *connect.Request[v1.DeleteAppInstanceRequest]) (*connect.Response[v1.DeleteAppInstanceResponse], error)
	// ListAppInstances lists app instance in a project (and deployment target if provided).
	ListAppInstances(context.Context, *connect.Request[v1.ListAppInstancesRequest]) (*connect.Response[v1.ListAppInstancesResponse], error)
	// CreateNotification creates a notification for a porter app and service at a given app revision
	CreateNotification(context.Context, *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error)
	// UpdateServiceDeploymentStatus updates the current deployment status of a service with a new status
	UpdateServiceDeploymentStatus(context.Context, *connect.Request[v1.UpdateServiceDeploymentStatusRequest]) (*connect.Response[v1.UpdateServiceDeploymentStatusResponse], error)
	// DockerConfigFileForRegistry returns a stringified config.json for accessing a given registry.
	// Deprecated. Use TokenForRegistry instead.
	//
	// Deprecated: do not use.
	DockerConfigFileForRegistry(context.Context, *connect.Request[v1.DockerConfigFileForRegistryRequest]) (*connect.Response[v1.DockerConfigFileForRegistryResponse], error)
	// ECRTokenForRegistry returns a docker-compatible token for accessing a given ECR registry.
	// This cannot be deleted before TokenForRegistry supports AWS and we edit RegistryGetECRTokenHandler to call that endpoint.
	// Deprecated. Use TokenForRegistry instead.
	//
	// Deprecated: do not use.
	ECRTokenForRegistry(context.Context, *connect.Request[v1.ECRTokenForRegistryRequest]) (*connect.Response[v1.ECRTokenForRegistryResponse], error)
	// AssumeRoleCredentials should be used vary sparingly, and ONLY for replacing AWS Integrations which have no workaround on the Porter API.
	// This endpoint returns temporary AWS credentials for a given AWS Account ID, and should not be expanded further to allow specifc role selection without being tied to a project and cluster.
	// Deprecated. This is no longer needed once ListRepositoriesForRegistry, ListImages, and CreateRepository supports AWS
	//
	// Deprecated: do not use.
	AssumeRoleCredentials(context.Context, *connect.Request[v1.AssumeRoleCredentialsRequest]) (*connect.Response[v1.AssumeRoleCredentialsResponse], error)
	// AssumeRoleChainTargets gets the final destination target_arns for a given project.
	// Deprecated. Do not use.
	//
	// Deprecated: do not use.
	AssumeRoleChainTargets(context.Context, *connect.Request[v1.AssumeRoleChainTargetsRequest]) (*connect.Response[v1.AssumeRoleChainTargetsResponse], error)
	// CertificateAuthorityData gets the certificate authority data for a customer cluster
	//
	// Deprecated: do not use.
	CertificateAuthorityData(context.Context, *connect.Request[v1.CertificateAuthorityDataRequest]) (*connect.Response[v1.CertificateAuthorityDataResponse], error)
	// EKSBearerToken gets a bearer token for programatic access to an EKS cluster's kubernetes API.
	// Deprecated. Use KubeConfigForCluster instead.
	//
	// Deprecated: do not use.
	EKSBearerToken(context.Context, *connect.Request[v1.EKSBearerTokenRequest]) (*connect.Response[v1.EKSBearerTokenResponse], error)
	// ListRepositoriesForRegistry lists the repositories for a given registry, provided it is in the scope of the project id
	// Deprecated. Use Images instead.
	//
	// Deprecated: do not use.
	ListRepositoriesForRegistry(context.Context, *connect.Request[v1.ListRepositoriesForRegistryRequest]) (*connect.Response[v1.ListRepositoriesForRegistryResponse], error)
	// ListImagesForRepository lists the repositories for a given registry, provided it is in the scope of the project id
	// Deprecated. Use Images instead.
	//
	// Deprecated: do not use.
	ListImagesForRepository(context.Context, *connect.Request[v1.ListImagesForRepositoryRequest]) (*connect.Response[v1.ListImagesForRepositoryResponse], error)
	// DatastoreStatus returns the status of a given datastore within a project/cluster scope
	DatastoreStatus(context.Context, *connect.Request[v1.DatastoreStatusRequest]) (*connect.Response[v1.DatastoreStatusResponse], error)
	// RegistryStatus returns the status of a given docker registry within a project scope
	RegistryStatus(context.Context, *connect.Request[v1.RegistryStatusRequest]) (*connect.Response[v1.RegistryStatusResponse], error)
	// SetupExternalSecrets will set up the cluster to handle external secrets
	SetupExternalSecrets(context.Context, *connect.Request[v1.SetupExternalSecretsRequest]) (*connect.Response[v1.SetupExternalSecretsResponse], error)
	// CreateEnvGroup will create an env group
	CreateEnvGroup(context.Context, *connect.Request[v1.CreateEnvGroupRequest]) (*connect.Response[v1.CreateEnvGroupResponse], error)
	// DeleteEnvGroup will delete an env group
	DeleteEnvGroup(context.Context, *connect.Request[v1.DeleteEnvGroupRequest]) (*connect.Response[v1.DeleteEnvGroupResponse], error)
}

// NewClusterControlPlaneServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterControlPlaneServiceHandler(svc ClusterControlPlaneServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clusterControlPlaneServiceQuotaIncreaseHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceQuotaIncreaseProcedure,
		svc.QuotaIncrease,
		opts...,
	)
	clusterControlPlaneServiceUpdateCloudProviderCredentialsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateCloudProviderCredentialsProcedure,
		svc.UpdateCloudProviderCredentials,
		opts...,
	)
	clusterControlPlaneServiceQuotaPreflightCheckHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceQuotaPreflightCheckProcedure,
		svc.QuotaPreflightCheck,
		opts...,
	)
	clusterControlPlaneServicePreflightCheckHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServicePreflightCheckProcedure,
		svc.PreflightCheck,
		opts...,
	)
	clusterControlPlaneServiceCreateAssumeRoleChainHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCreateAssumeRoleChainProcedure,
		svc.CreateAssumeRoleChain,
		opts...,
	)
	clusterControlPlaneServiceSaveAzureCredentialsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceSaveAzureCredentialsProcedure,
		svc.SaveAzureCredentials,
		opts...,
	)
	clusterControlPlaneServiceKubeConfigForClusterHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceKubeConfigForClusterProcedure,
		svc.KubeConfigForCluster,
		opts...,
	)
	clusterControlPlaneServiceUpdateContractHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateContractProcedure,
		svc.UpdateContract,
		opts...,
	)
	clusterControlPlaneServiceReadContractHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceReadContractProcedure,
		svc.ReadContract,
		opts...,
	)
	clusterControlPlaneServiceClusterStatusHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceClusterStatusProcedure,
		svc.ClusterStatus,
		opts...,
	)
	clusterControlPlaneServiceDeleteClusterHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeleteClusterProcedure,
		svc.DeleteCluster,
		opts...,
	)
	clusterControlPlaneServiceTokenForRegistryHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceTokenForRegistryProcedure,
		svc.TokenForRegistry,
		opts...,
	)
	clusterControlPlaneServiceValidatePorterAppHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceValidatePorterAppProcedure,
		svc.ValidatePorterApp,
		opts...,
	)
	clusterControlPlaneServiceApplyPorterAppHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceApplyPorterAppProcedure,
		svc.ApplyPorterApp,
		opts...,
	)
	clusterControlPlaneServiceUpdateAppHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateAppProcedure,
		svc.UpdateApp,
		opts...,
	)
	clusterControlPlaneServiceRollbackRevisionHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceRollbackRevisionProcedure,
		svc.RollbackRevision,
		opts...,
	)
	clusterControlPlaneServiceUpdateRevisionStatusHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateRevisionStatusProcedure,
		svc.UpdateRevisionStatus,
		opts...,
	)
	clusterControlPlaneServiceDeletePorterAppHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeletePorterAppProcedure,
		svc.DeletePorterApp,
		opts...,
	)
	clusterControlPlaneServiceDeleteAppDeploymentHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeleteAppDeploymentProcedure,
		svc.DeleteAppDeployment,
		opts...,
	)
	clusterControlPlaneServiceDeleteDeploymentTargetHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeleteDeploymentTargetProcedure,
		svc.DeleteDeploymentTarget,
		opts...,
	)
	clusterControlPlaneServiceCurrentAppRevisionHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCurrentAppRevisionProcedure,
		svc.CurrentAppRevision,
		opts...,
	)
	clusterControlPlaneServiceListAppRevisionsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceListAppRevisionsProcedure,
		svc.ListAppRevisions,
		opts...,
	)
	clusterControlPlaneServiceLatestAppRevisionsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceLatestAppRevisionsProcedure,
		svc.LatestAppRevisions,
		opts...,
	)
	clusterControlPlaneServiceGetAppRevisionHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceGetAppRevisionProcedure,
		svc.GetAppRevision,
		opts...,
	)
	clusterControlPlaneServiceAppTemplateHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceAppTemplateProcedure,
		svc.AppTemplate,
		opts...,
	)
	clusterControlPlaneServicePredeployStatusHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServicePredeployStatusProcedure,
		svc.PredeployStatus,
		opts...,
	)
	clusterControlPlaneServiceDeploymentTargetDetailsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeploymentTargetDetailsProcedure,
		svc.DeploymentTargetDetails,
		opts...,
	)
	clusterControlPlaneServiceCreateDeploymentTargetHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCreateDeploymentTargetProcedure,
		svc.CreateDeploymentTarget,
		opts...,
	)
	clusterControlPlaneServiceDeploymentTargetsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeploymentTargetsProcedure,
		svc.DeploymentTargets,
		opts...,
	)
	clusterControlPlaneServiceDefaultDeploymentTargetHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDefaultDeploymentTargetProcedure,
		svc.DefaultDeploymentTarget,
		opts...,
	)
	clusterControlPlaneServiceSeedAppRevisionsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceSeedAppRevisionsProcedure,
		svc.SeedAppRevisions,
		opts...,
	)
	clusterControlPlaneServiceEnvGroupVariablesHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceEnvGroupVariablesProcedure,
		svc.EnvGroupVariables,
		opts...,
	)
	clusterControlPlaneServiceLatestEnvGroupWithVariablesHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceLatestEnvGroupWithVariablesProcedure,
		svc.LatestEnvGroupWithVariables,
		opts...,
	)
	clusterControlPlaneServiceUpdateAppImageHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateAppImageProcedure,
		svc.UpdateAppImage,
		opts...,
	)
	clusterControlPlaneServiceUpdateAppBuildSettingsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateAppBuildSettingsProcedure,
		svc.UpdateAppBuildSettings,
		opts...,
	)
	clusterControlPlaneServiceUpdateAppsLinkedToEnvGroupHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateAppsLinkedToEnvGroupProcedure,
		svc.UpdateAppsLinkedToEnvGroup,
		opts...,
	)
	clusterControlPlaneServiceAppHelmValuesHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceAppHelmValuesProcedure,
		svc.AppHelmValues,
		opts...,
	)
	clusterControlPlaneServiceManualServiceRunHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceManualServiceRunProcedure,
		svc.ManualServiceRun,
		opts...,
	)
	clusterControlPlaneServiceClusterNetworkSettingsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceClusterNetworkSettingsProcedure,
		svc.ClusterNetworkSettings,
		opts...,
	)
	clusterControlPlaneServiceSharedNetworkSettingsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceSharedNetworkSettingsProcedure,
		svc.SharedNetworkSettings,
		opts...,
	)
	clusterControlPlaneServiceImagesHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceImagesProcedure,
		svc.Images,
		opts...,
	)
	clusterControlPlaneServiceCreateAppInstanceHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCreateAppInstanceProcedure,
		svc.CreateAppInstance,
		opts...,
	)
	clusterControlPlaneServiceDeleteAppInstanceHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeleteAppInstanceProcedure,
		svc.DeleteAppInstance,
		opts...,
	)
	clusterControlPlaneServiceListAppInstancesHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceListAppInstancesProcedure,
		svc.ListAppInstances,
		opts...,
	)
	clusterControlPlaneServiceCreateNotificationHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCreateNotificationProcedure,
		svc.CreateNotification,
		opts...,
	)
	clusterControlPlaneServiceUpdateServiceDeploymentStatusHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateServiceDeploymentStatusProcedure,
		svc.UpdateServiceDeploymentStatus,
		opts...,
	)
	clusterControlPlaneServiceDockerConfigFileForRegistryHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDockerConfigFileForRegistryProcedure,
		svc.DockerConfigFileForRegistry,
		opts...,
	)
	clusterControlPlaneServiceECRTokenForRegistryHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceECRTokenForRegistryProcedure,
		svc.ECRTokenForRegistry,
		opts...,
	)
	clusterControlPlaneServiceAssumeRoleCredentialsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceAssumeRoleCredentialsProcedure,
		svc.AssumeRoleCredentials,
		opts...,
	)
	clusterControlPlaneServiceAssumeRoleChainTargetsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceAssumeRoleChainTargetsProcedure,
		svc.AssumeRoleChainTargets,
		opts...,
	)
	clusterControlPlaneServiceCertificateAuthorityDataHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCertificateAuthorityDataProcedure,
		svc.CertificateAuthorityData,
		opts...,
	)
	clusterControlPlaneServiceEKSBearerTokenHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceEKSBearerTokenProcedure,
		svc.EKSBearerToken,
		opts...,
	)
	clusterControlPlaneServiceListRepositoriesForRegistryHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceListRepositoriesForRegistryProcedure,
		svc.ListRepositoriesForRegistry,
		opts...,
	)
	clusterControlPlaneServiceListImagesForRepositoryHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceListImagesForRepositoryProcedure,
		svc.ListImagesForRepository,
		opts...,
	)
	clusterControlPlaneServiceDatastoreStatusHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDatastoreStatusProcedure,
		svc.DatastoreStatus,
		opts...,
	)
	clusterControlPlaneServiceRegistryStatusHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceRegistryStatusProcedure,
		svc.RegistryStatus,
		opts...,
	)
	clusterControlPlaneServiceSetupExternalSecretsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceSetupExternalSecretsProcedure,
		svc.SetupExternalSecrets,
		opts...,
	)
	clusterControlPlaneServiceCreateEnvGroupHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCreateEnvGroupProcedure,
		svc.CreateEnvGroup,
		opts...,
	)
	clusterControlPlaneServiceDeleteEnvGroupHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeleteEnvGroupProcedure,
		svc.DeleteEnvGroup,
		opts...,
	)
	return "/porter.v1.ClusterControlPlaneService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClusterControlPlaneServiceQuotaIncreaseProcedure:
			clusterControlPlaneServiceQuotaIncreaseHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateCloudProviderCredentialsProcedure:
			clusterControlPlaneServiceUpdateCloudProviderCredentialsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceQuotaPreflightCheckProcedure:
			clusterControlPlaneServiceQuotaPreflightCheckHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServicePreflightCheckProcedure:
			clusterControlPlaneServicePreflightCheckHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCreateAssumeRoleChainProcedure:
			clusterControlPlaneServiceCreateAssumeRoleChainHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceSaveAzureCredentialsProcedure:
			clusterControlPlaneServiceSaveAzureCredentialsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceKubeConfigForClusterProcedure:
			clusterControlPlaneServiceKubeConfigForClusterHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateContractProcedure:
			clusterControlPlaneServiceUpdateContractHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceReadContractProcedure:
			clusterControlPlaneServiceReadContractHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceClusterStatusProcedure:
			clusterControlPlaneServiceClusterStatusHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeleteClusterProcedure:
			clusterControlPlaneServiceDeleteClusterHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceTokenForRegistryProcedure:
			clusterControlPlaneServiceTokenForRegistryHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceValidatePorterAppProcedure:
			clusterControlPlaneServiceValidatePorterAppHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceApplyPorterAppProcedure:
			clusterControlPlaneServiceApplyPorterAppHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateAppProcedure:
			clusterControlPlaneServiceUpdateAppHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceRollbackRevisionProcedure:
			clusterControlPlaneServiceRollbackRevisionHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateRevisionStatusProcedure:
			clusterControlPlaneServiceUpdateRevisionStatusHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeletePorterAppProcedure:
			clusterControlPlaneServiceDeletePorterAppHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeleteAppDeploymentProcedure:
			clusterControlPlaneServiceDeleteAppDeploymentHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeleteDeploymentTargetProcedure:
			clusterControlPlaneServiceDeleteDeploymentTargetHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCurrentAppRevisionProcedure:
			clusterControlPlaneServiceCurrentAppRevisionHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceListAppRevisionsProcedure:
			clusterControlPlaneServiceListAppRevisionsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceLatestAppRevisionsProcedure:
			clusterControlPlaneServiceLatestAppRevisionsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceGetAppRevisionProcedure:
			clusterControlPlaneServiceGetAppRevisionHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceAppTemplateProcedure:
			clusterControlPlaneServiceAppTemplateHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServicePredeployStatusProcedure:
			clusterControlPlaneServicePredeployStatusHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeploymentTargetDetailsProcedure:
			clusterControlPlaneServiceDeploymentTargetDetailsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCreateDeploymentTargetProcedure:
			clusterControlPlaneServiceCreateDeploymentTargetHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeploymentTargetsProcedure:
			clusterControlPlaneServiceDeploymentTargetsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDefaultDeploymentTargetProcedure:
			clusterControlPlaneServiceDefaultDeploymentTargetHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceSeedAppRevisionsProcedure:
			clusterControlPlaneServiceSeedAppRevisionsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceEnvGroupVariablesProcedure:
			clusterControlPlaneServiceEnvGroupVariablesHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceLatestEnvGroupWithVariablesProcedure:
			clusterControlPlaneServiceLatestEnvGroupWithVariablesHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateAppImageProcedure:
			clusterControlPlaneServiceUpdateAppImageHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateAppBuildSettingsProcedure:
			clusterControlPlaneServiceUpdateAppBuildSettingsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateAppsLinkedToEnvGroupProcedure:
			clusterControlPlaneServiceUpdateAppsLinkedToEnvGroupHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceAppHelmValuesProcedure:
			clusterControlPlaneServiceAppHelmValuesHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceManualServiceRunProcedure:
			clusterControlPlaneServiceManualServiceRunHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceClusterNetworkSettingsProcedure:
			clusterControlPlaneServiceClusterNetworkSettingsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceSharedNetworkSettingsProcedure:
			clusterControlPlaneServiceSharedNetworkSettingsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceImagesProcedure:
			clusterControlPlaneServiceImagesHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCreateAppInstanceProcedure:
			clusterControlPlaneServiceCreateAppInstanceHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeleteAppInstanceProcedure:
			clusterControlPlaneServiceDeleteAppInstanceHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceListAppInstancesProcedure:
			clusterControlPlaneServiceListAppInstancesHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCreateNotificationProcedure:
			clusterControlPlaneServiceCreateNotificationHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateServiceDeploymentStatusProcedure:
			clusterControlPlaneServiceUpdateServiceDeploymentStatusHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDockerConfigFileForRegistryProcedure:
			clusterControlPlaneServiceDockerConfigFileForRegistryHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceECRTokenForRegistryProcedure:
			clusterControlPlaneServiceECRTokenForRegistryHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceAssumeRoleCredentialsProcedure:
			clusterControlPlaneServiceAssumeRoleCredentialsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceAssumeRoleChainTargetsProcedure:
			clusterControlPlaneServiceAssumeRoleChainTargetsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCertificateAuthorityDataProcedure:
			clusterControlPlaneServiceCertificateAuthorityDataHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceEKSBearerTokenProcedure:
			clusterControlPlaneServiceEKSBearerTokenHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceListRepositoriesForRegistryProcedure:
			clusterControlPlaneServiceListRepositoriesForRegistryHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceListImagesForRepositoryProcedure:
			clusterControlPlaneServiceListImagesForRepositoryHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDatastoreStatusProcedure:
			clusterControlPlaneServiceDatastoreStatusHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceRegistryStatusProcedure:
			clusterControlPlaneServiceRegistryStatusHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceSetupExternalSecretsProcedure:
			clusterControlPlaneServiceSetupExternalSecretsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCreateEnvGroupProcedure:
			clusterControlPlaneServiceCreateEnvGroupHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeleteEnvGroupProcedure:
			clusterControlPlaneServiceDeleteEnvGroupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClusterControlPlaneServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterControlPlaneServiceHandler struct{}

func (UnimplementedClusterControlPlaneServiceHandler) QuotaIncrease(context.Context, *connect.Request[v1.QuotaIncreaseRequest]) (*connect.Response[v1.QuotaIncreaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.QuotaIncrease is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateCloudProviderCredentials(context.Context, *connect.Request[v1.UpdateCloudProviderCredentialsRequest]) (*connect.Response[v1.UpdateCloudProviderCredentialsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateCloudProviderCredentials is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) QuotaPreflightCheck(context.Context, *connect.Request[v1.QuotaPreflightCheckRequest]) (*connect.Response[v1.QuotaPreflightCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.QuotaPreflightCheck is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) PreflightCheck(context.Context, *connect.Request[v1.PreflightCheckRequest]) (*connect.Response[v1.PreflightCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.PreflightCheck is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CreateAssumeRoleChain(context.Context, *connect.Request[v1.CreateAssumeRoleChainRequest]) (*connect.Response[v1.CreateAssumeRoleChainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CreateAssumeRoleChain is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) SaveAzureCredentials(context.Context, *connect.Request[v1.SaveAzureCredentialsRequest]) (*connect.Response[v1.SaveAzureCredentialsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.SaveAzureCredentials is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) KubeConfigForCluster(context.Context, *connect.Request[v1.KubeConfigForClusterRequest]) (*connect.Response[v1.KubeConfigForClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.KubeConfigForCluster is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateContract(context.Context, *connect.Request[v1.UpdateContractRequest]) (*connect.Response[v1.UpdateContractResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateContract is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ReadContract(context.Context, *connect.Request[v1.ReadContractRequest]) (*connect.Response[v1.ReadContractResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ReadContract is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ClusterStatus(context.Context, *connect.Request[v1.ClusterStatusRequest]) (*connect.Response[v1.ClusterStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ClusterStatus is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeleteCluster is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) TokenForRegistry(context.Context, *connect.Request[v1.TokenForRegistryRequest]) (*connect.Response[v1.TokenForRegistryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.TokenForRegistry is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ValidatePorterApp(context.Context, *connect.Request[v1.ValidatePorterAppRequest]) (*connect.Response[v1.ValidatePorterAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ValidatePorterApp is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ApplyPorterApp(context.Context, *connect.Request[v1.ApplyPorterAppRequest]) (*connect.Response[v1.ApplyPorterAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ApplyPorterApp is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateApp is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) RollbackRevision(context.Context, *connect.Request[v1.RollbackRevisionRequest]) (*connect.Response[v1.RollbackRevisionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.RollbackRevision is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateRevisionStatus(context.Context, *connect.Request[v1.UpdateRevisionStatusRequest]) (*connect.Response[v1.UpdateRevisionStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateRevisionStatus is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeletePorterApp(context.Context, *connect.Request[v1.DeletePorterAppRequest]) (*connect.Response[v1.DeletePorterAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeletePorterApp is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeleteAppDeployment(context.Context, *connect.Request[v1.DeleteAppDeploymentRequest]) (*connect.Response[v1.DeleteAppDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeleteAppDeployment is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeleteDeploymentTarget(context.Context, *connect.Request[v1.DeleteDeploymentTargetRequest]) (*connect.Response[v1.DeleteDeploymentTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeleteDeploymentTarget is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CurrentAppRevision(context.Context, *connect.Request[v1.CurrentAppRevisionRequest]) (*connect.Response[v1.CurrentAppRevisionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CurrentAppRevision is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ListAppRevisions(context.Context, *connect.Request[v1.ListAppRevisionsRequest]) (*connect.Response[v1.ListAppRevisionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ListAppRevisions is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) LatestAppRevisions(context.Context, *connect.Request[v1.LatestAppRevisionsRequest]) (*connect.Response[v1.LatestAppRevisionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.LatestAppRevisions is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) GetAppRevision(context.Context, *connect.Request[v1.GetAppRevisionRequest]) (*connect.Response[v1.GetAppRevisionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.GetAppRevision is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) AppTemplate(context.Context, *connect.Request[v1.AppTemplateRequest]) (*connect.Response[v1.AppTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.AppTemplate is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) PredeployStatus(context.Context, *connect.Request[v1.PredeployStatusRequest]) (*connect.Response[v1.PredeployStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.PredeployStatus is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeploymentTargetDetails(context.Context, *connect.Request[v1.DeploymentTargetDetailsRequest]) (*connect.Response[v1.DeploymentTargetDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeploymentTargetDetails is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CreateDeploymentTarget(context.Context, *connect.Request[v1.CreateDeploymentTargetRequest]) (*connect.Response[v1.CreateDeploymentTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CreateDeploymentTarget is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeploymentTargets(context.Context, *connect.Request[v1.DeploymentTargetsRequest]) (*connect.Response[v1.DeploymentTargetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeploymentTargets is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DefaultDeploymentTarget(context.Context, *connect.Request[v1.DefaultDeploymentTargetRequest]) (*connect.Response[v1.DefaultDeploymentTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DefaultDeploymentTarget is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) SeedAppRevisions(context.Context, *connect.Request[v1.SeedAppRevisionsRequest]) (*connect.Response[v1.SeedAppRevisionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.SeedAppRevisions is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) EnvGroupVariables(context.Context, *connect.Request[v1.EnvGroupVariablesRequest]) (*connect.Response[v1.EnvGroupVariablesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.EnvGroupVariables is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) LatestEnvGroupWithVariables(context.Context, *connect.Request[v1.LatestEnvGroupWithVariablesRequest]) (*connect.Response[v1.LatestEnvGroupWithVariablesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.LatestEnvGroupWithVariables is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateAppImage(context.Context, *connect.Request[v1.UpdateAppImageRequest]) (*connect.Response[v1.UpdateAppImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateAppImage is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateAppBuildSettings(context.Context, *connect.Request[v1.UpdateAppBuildSettingsRequest]) (*connect.Response[v1.UpdateAppBuildSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateAppBuildSettings is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateAppsLinkedToEnvGroup(context.Context, *connect.Request[v1.UpdateAppsLinkedToEnvGroupRequest]) (*connect.Response[v1.UpdateAppsLinkedToEnvGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateAppsLinkedToEnvGroup is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) AppHelmValues(context.Context, *connect.Request[v1.AppHelmValuesRequest]) (*connect.Response[v1.AppHelmValuesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.AppHelmValues is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ManualServiceRun(context.Context, *connect.Request[v1.ManualServiceRunRequest]) (*connect.Response[v1.ManualServiceRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ManualServiceRun is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ClusterNetworkSettings(context.Context, *connect.Request[v1.ClusterNetworkSettingsRequest]) (*connect.Response[v1.ClusterNetworkSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ClusterNetworkSettings is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) SharedNetworkSettings(context.Context, *connect.Request[v1.SharedNetworkSettingsRequest]) (*connect.Response[v1.SharedNetworkSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.SharedNetworkSettings is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) Images(context.Context, *connect.Request[v1.ImagesRequest]) (*connect.Response[v1.ImagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.Images is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CreateAppInstance(context.Context, *connect.Request[v1.CreateAppInstanceRequest]) (*connect.Response[v1.CreateAppInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CreateAppInstance is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeleteAppInstance(context.Context, *connect.Request[v1.DeleteAppInstanceRequest]) (*connect.Response[v1.DeleteAppInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeleteAppInstance is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ListAppInstances(context.Context, *connect.Request[v1.ListAppInstancesRequest]) (*connect.Response[v1.ListAppInstancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ListAppInstances is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CreateNotification(context.Context, *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CreateNotification is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateServiceDeploymentStatus(context.Context, *connect.Request[v1.UpdateServiceDeploymentStatusRequest]) (*connect.Response[v1.UpdateServiceDeploymentStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateServiceDeploymentStatus is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DockerConfigFileForRegistry(context.Context, *connect.Request[v1.DockerConfigFileForRegistryRequest]) (*connect.Response[v1.DockerConfigFileForRegistryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DockerConfigFileForRegistry is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ECRTokenForRegistry(context.Context, *connect.Request[v1.ECRTokenForRegistryRequest]) (*connect.Response[v1.ECRTokenForRegistryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ECRTokenForRegistry is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) AssumeRoleCredentials(context.Context, *connect.Request[v1.AssumeRoleCredentialsRequest]) (*connect.Response[v1.AssumeRoleCredentialsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.AssumeRoleCredentials is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) AssumeRoleChainTargets(context.Context, *connect.Request[v1.AssumeRoleChainTargetsRequest]) (*connect.Response[v1.AssumeRoleChainTargetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.AssumeRoleChainTargets is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CertificateAuthorityData(context.Context, *connect.Request[v1.CertificateAuthorityDataRequest]) (*connect.Response[v1.CertificateAuthorityDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CertificateAuthorityData is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) EKSBearerToken(context.Context, *connect.Request[v1.EKSBearerTokenRequest]) (*connect.Response[v1.EKSBearerTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.EKSBearerToken is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ListRepositoriesForRegistry(context.Context, *connect.Request[v1.ListRepositoriesForRegistryRequest]) (*connect.Response[v1.ListRepositoriesForRegistryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ListRepositoriesForRegistry is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ListImagesForRepository(context.Context, *connect.Request[v1.ListImagesForRepositoryRequest]) (*connect.Response[v1.ListImagesForRepositoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ListImagesForRepository is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DatastoreStatus(context.Context, *connect.Request[v1.DatastoreStatusRequest]) (*connect.Response[v1.DatastoreStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DatastoreStatus is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) RegistryStatus(context.Context, *connect.Request[v1.RegistryStatusRequest]) (*connect.Response[v1.RegistryStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.RegistryStatus is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) SetupExternalSecrets(context.Context, *connect.Request[v1.SetupExternalSecretsRequest]) (*connect.Response[v1.SetupExternalSecretsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.SetupExternalSecrets is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CreateEnvGroup(context.Context, *connect.Request[v1.CreateEnvGroupRequest]) (*connect.Response[v1.CreateEnvGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CreateEnvGroup is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeleteEnvGroup(context.Context, *connect.Request[v1.DeleteEnvGroupRequest]) (*connect.Response[v1.DeleteEnvGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeleteEnvGroup is not implemented"))
}
