// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: porter/v1/cluster_control_plane.proto

package porterv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/porter-dev/api-contracts/generated/go/porter/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ClusterControlPlaneServiceName is the fully-qualified name of the ClusterControlPlaneService
	// service.
	ClusterControlPlaneServiceName = "porter.v1.ClusterControlPlaneService"
)

// ClusterControlPlaneServiceClient is a client for the porter.v1.ClusterControlPlaneService
// service.
type ClusterControlPlaneServiceClient interface {
	// QuotaPreflightCheck checks if the target account and region has sufficient resources (EIP addresses and VPCs) to provision a new cluster
	QuotaPreflightCheck(context.Context, *connect_go.Request[v1.QuotaPreflightCheckRequest]) (*connect_go.Response[v1.QuotaPreflightCheckResponse], error)
	// CreateAssumeRoleChain creates a new assume role chain for a given project and checks if the target assumed role has sufficient permissions. Use UpdateCloudProviderCredentials instead.
	//
	// Deprecated: do not use.
	CreateAssumeRoleChain(context.Context, *connect_go.Request[v1.CreateAssumeRoleChainRequest]) (*connect_go.Response[v1.CreateAssumeRoleChainResponse], error)
	// SaveAzureCredentials stores the new azure service principal credentials and creates the azure cluster identity. Deprecated. Use UpdateCloudProviderCredentials instead.
	//
	// Deprecated: do not use.
	SaveAzureCredentials(context.Context, *connect_go.Request[v1.SaveAzureCredentialsRequest]) (*connect_go.Response[v1.SaveAzureCredentialsResponse], error)
	// KubeConfigForCluster gets a valid kubeconfig from the management cluster, for a given workload cluster
	KubeConfigForCluster(context.Context, *connect_go.Request[v1.KubeConfigForClusterRequest]) (*connect_go.Response[v1.KubeConfigForClusterResponse], error)
	// UpdateContract takes in a Porter Contract, actioning upon it where necessary
	UpdateContract(context.Context, *connect_go.Request[v1.UpdateContractRequest]) (*connect_go.Response[v1.UpdateContractResponse], error)
	// ReadContract returns the base64 encoded contract for a given cluster and project
	ReadContract(context.Context, *connect_go.Request[v1.ReadContractRequest]) (*connect_go.Response[v1.ReadContractResponse], error)
	// ClusterStatus returns the status of a given workload cluster
	ClusterStatus(context.Context, *connect_go.Request[v1.ClusterStatusRequest]) (*connect_go.Response[v1.ClusterStatusResponse], error)
	// DeleteCluster uninstalls system components from a given workload cluster before deleting it.
	// This should ultimately be wrapped into UpdateContract
	DeleteCluster(context.Context, *connect_go.Request[v1.DeleteClusterRequest]) (*connect_go.Response[v1.DeleteClusterResponse], error)
	// TokenForRegistry returns a token for accessing a given registry
	TokenForRegistry(context.Context, *connect_go.Request[v1.TokenForRegistryRequest]) (*connect_go.Response[v1.TokenForRegistryResponse], error)
	// ListRepositoriesForRegistry lists the repositories for a given registry, provided it is in the scope of the project id
	ListRepositoriesForRegistry(context.Context, *connect_go.Request[v1.ListRepositoriesForRegistryRequest]) (*connect_go.Response[v1.ListRepositoriesForRegistryResponse], error)
	// ListImagesForRepository lists the repositories for a given registry, provided it is in the scope of the project id
	ListImagesForRepository(context.Context, *connect_go.Request[v1.ListImagesForRepositoryRequest]) (*connect_go.Response[v1.ListImagesForRepositoryResponse], error)
	// DockerConfigFileForRegistry returns a stringified config.json for accessing a given registry.
	// Deprecated. Use TokenForRegistry instead.
	//
	// Deprecated: do not use.
	DockerConfigFileForRegistry(context.Context, *connect_go.Request[v1.DockerConfigFileForRegistryRequest]) (*connect_go.Response[v1.DockerConfigFileForRegistryResponse], error)
	// ECRTokenForRegistry returns a docker-compatible token for accessing a given ECR registry. Deprecated. Use TokenForRegistry instead.
	//
	// Deprecated: do not use.
	ECRTokenForRegistry(context.Context, *connect_go.Request[v1.ECRTokenForRegistryRequest]) (*connect_go.Response[v1.ECRTokenForRegistryResponse], error)
	// AssumeRoleCredentials should be used vary sparingly, and ONLY for replacing AWS Integrations which have no workaround on the Porter API.
	// This endpoint returns temporary AWS credentials for a given AWS Account ID, and should not be expanded further to allow specifc role selection without being tied to a project and cluster.
	// Deprecated. This is no longer needed once ListRepositoriesForRegistry supports AWS.
	//
	// Deprecated: do not use.
	AssumeRoleCredentials(context.Context, *connect_go.Request[v1.AssumeRoleCredentialsRequest]) (*connect_go.Response[v1.AssumeRoleCredentialsResponse], error)
	// AssumeRoleChainTargets gets the final destination target_arns for a given project. This has been deprecated. Do not use.
	//
	// Deprecated: do not use.
	AssumeRoleChainTargets(context.Context, *connect_go.Request[v1.AssumeRoleChainTargetsRequest]) (*connect_go.Response[v1.AssumeRoleChainTargetsResponse], error)
	// CertificateAuthorityData gets the certificate authority data for a customer cluster
	//
	// Deprecated: do not use.
	CertificateAuthorityData(context.Context, *connect_go.Request[v1.CertificateAuthorityDataRequest]) (*connect_go.Response[v1.CertificateAuthorityDataResponse], error)
	// EKSBearerToken gets a bearer token for programatic access to an EKS cluster's kubernetes API. This has been deprecated. Use KubeConfigForCluster instead.
	//
	// Deprecated: do not use.
	EKSBearerToken(context.Context, *connect_go.Request[v1.EKSBearerTokenRequest]) (*connect_go.Response[v1.EKSBearerTokenResponse], error)
}

// NewClusterControlPlaneServiceClient constructs a client for the
// porter.v1.ClusterControlPlaneService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterControlPlaneServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ClusterControlPlaneServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &clusterControlPlaneServiceClient{
		quotaPreflightCheck: connect_go.NewClient[v1.QuotaPreflightCheckRequest, v1.QuotaPreflightCheckResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/QuotaPreflightCheck",
			opts...,
		),
		createAssumeRoleChain: connect_go.NewClient[v1.CreateAssumeRoleChainRequest, v1.CreateAssumeRoleChainResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/CreateAssumeRoleChain",
			opts...,
		),
		saveAzureCredentials: connect_go.NewClient[v1.SaveAzureCredentialsRequest, v1.SaveAzureCredentialsResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/SaveAzureCredentials",
			opts...,
		),
		kubeConfigForCluster: connect_go.NewClient[v1.KubeConfigForClusterRequest, v1.KubeConfigForClusterResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/KubeConfigForCluster",
			opts...,
		),
		updateContract: connect_go.NewClient[v1.UpdateContractRequest, v1.UpdateContractResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/UpdateContract",
			opts...,
		),
		readContract: connect_go.NewClient[v1.ReadContractRequest, v1.ReadContractResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/ReadContract",
			opts...,
		),
		clusterStatus: connect_go.NewClient[v1.ClusterStatusRequest, v1.ClusterStatusResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/ClusterStatus",
			opts...,
		),
		deleteCluster: connect_go.NewClient[v1.DeleteClusterRequest, v1.DeleteClusterResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/DeleteCluster",
			opts...,
		),
		tokenForRegistry: connect_go.NewClient[v1.TokenForRegistryRequest, v1.TokenForRegistryResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/TokenForRegistry",
			opts...,
		),
		listRepositoriesForRegistry: connect_go.NewClient[v1.ListRepositoriesForRegistryRequest, v1.ListRepositoriesForRegistryResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/ListRepositoriesForRegistry",
			opts...,
		),
		listImagesForRepository: connect_go.NewClient[v1.ListImagesForRepositoryRequest, v1.ListImagesForRepositoryResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/ListImagesForRepository",
			opts...,
		),
		dockerConfigFileForRegistry: connect_go.NewClient[v1.DockerConfigFileForRegistryRequest, v1.DockerConfigFileForRegistryResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/DockerConfigFileForRegistry",
			opts...,
		),
		eCRTokenForRegistry: connect_go.NewClient[v1.ECRTokenForRegistryRequest, v1.ECRTokenForRegistryResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/ECRTokenForRegistry",
			opts...,
		),
		assumeRoleCredentials: connect_go.NewClient[v1.AssumeRoleCredentialsRequest, v1.AssumeRoleCredentialsResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/AssumeRoleCredentials",
			opts...,
		),
		assumeRoleChainTargets: connect_go.NewClient[v1.AssumeRoleChainTargetsRequest, v1.AssumeRoleChainTargetsResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/AssumeRoleChainTargets",
			opts...,
		),
		certificateAuthorityData: connect_go.NewClient[v1.CertificateAuthorityDataRequest, v1.CertificateAuthorityDataResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/CertificateAuthorityData",
			opts...,
		),
		eKSBearerToken: connect_go.NewClient[v1.EKSBearerTokenRequest, v1.EKSBearerTokenResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/EKSBearerToken",
			opts...,
		),
	}
}

// clusterControlPlaneServiceClient implements ClusterControlPlaneServiceClient.
type clusterControlPlaneServiceClient struct {
	quotaPreflightCheck         *connect_go.Client[v1.QuotaPreflightCheckRequest, v1.QuotaPreflightCheckResponse]
	createAssumeRoleChain       *connect_go.Client[v1.CreateAssumeRoleChainRequest, v1.CreateAssumeRoleChainResponse]
	saveAzureCredentials        *connect_go.Client[v1.SaveAzureCredentialsRequest, v1.SaveAzureCredentialsResponse]
	kubeConfigForCluster        *connect_go.Client[v1.KubeConfigForClusterRequest, v1.KubeConfigForClusterResponse]
	updateContract              *connect_go.Client[v1.UpdateContractRequest, v1.UpdateContractResponse]
	readContract                *connect_go.Client[v1.ReadContractRequest, v1.ReadContractResponse]
	clusterStatus               *connect_go.Client[v1.ClusterStatusRequest, v1.ClusterStatusResponse]
	deleteCluster               *connect_go.Client[v1.DeleteClusterRequest, v1.DeleteClusterResponse]
	tokenForRegistry            *connect_go.Client[v1.TokenForRegistryRequest, v1.TokenForRegistryResponse]
	listRepositoriesForRegistry *connect_go.Client[v1.ListRepositoriesForRegistryRequest, v1.ListRepositoriesForRegistryResponse]
	listImagesForRepository     *connect_go.Client[v1.ListImagesForRepositoryRequest, v1.ListImagesForRepositoryResponse]
	dockerConfigFileForRegistry *connect_go.Client[v1.DockerConfigFileForRegistryRequest, v1.DockerConfigFileForRegistryResponse]
	eCRTokenForRegistry         *connect_go.Client[v1.ECRTokenForRegistryRequest, v1.ECRTokenForRegistryResponse]
	assumeRoleCredentials       *connect_go.Client[v1.AssumeRoleCredentialsRequest, v1.AssumeRoleCredentialsResponse]
	assumeRoleChainTargets      *connect_go.Client[v1.AssumeRoleChainTargetsRequest, v1.AssumeRoleChainTargetsResponse]
	certificateAuthorityData    *connect_go.Client[v1.CertificateAuthorityDataRequest, v1.CertificateAuthorityDataResponse]
	eKSBearerToken              *connect_go.Client[v1.EKSBearerTokenRequest, v1.EKSBearerTokenResponse]
}

// QuotaPreflightCheck calls porter.v1.ClusterControlPlaneService.QuotaPreflightCheck.
func (c *clusterControlPlaneServiceClient) QuotaPreflightCheck(ctx context.Context, req *connect_go.Request[v1.QuotaPreflightCheckRequest]) (*connect_go.Response[v1.QuotaPreflightCheckResponse], error) {
	return c.quotaPreflightCheck.CallUnary(ctx, req)
}

// CreateAssumeRoleChain calls porter.v1.ClusterControlPlaneService.CreateAssumeRoleChain.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) CreateAssumeRoleChain(ctx context.Context, req *connect_go.Request[v1.CreateAssumeRoleChainRequest]) (*connect_go.Response[v1.CreateAssumeRoleChainResponse], error) {
	return c.createAssumeRoleChain.CallUnary(ctx, req)
}

// SaveAzureCredentials calls porter.v1.ClusterControlPlaneService.SaveAzureCredentials.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) SaveAzureCredentials(ctx context.Context, req *connect_go.Request[v1.SaveAzureCredentialsRequest]) (*connect_go.Response[v1.SaveAzureCredentialsResponse], error) {
	return c.saveAzureCredentials.CallUnary(ctx, req)
}

// KubeConfigForCluster calls porter.v1.ClusterControlPlaneService.KubeConfigForCluster.
func (c *clusterControlPlaneServiceClient) KubeConfigForCluster(ctx context.Context, req *connect_go.Request[v1.KubeConfigForClusterRequest]) (*connect_go.Response[v1.KubeConfigForClusterResponse], error) {
	return c.kubeConfigForCluster.CallUnary(ctx, req)
}

// UpdateContract calls porter.v1.ClusterControlPlaneService.UpdateContract.
func (c *clusterControlPlaneServiceClient) UpdateContract(ctx context.Context, req *connect_go.Request[v1.UpdateContractRequest]) (*connect_go.Response[v1.UpdateContractResponse], error) {
	return c.updateContract.CallUnary(ctx, req)
}

// ReadContract calls porter.v1.ClusterControlPlaneService.ReadContract.
func (c *clusterControlPlaneServiceClient) ReadContract(ctx context.Context, req *connect_go.Request[v1.ReadContractRequest]) (*connect_go.Response[v1.ReadContractResponse], error) {
	return c.readContract.CallUnary(ctx, req)
}

// ClusterStatus calls porter.v1.ClusterControlPlaneService.ClusterStatus.
func (c *clusterControlPlaneServiceClient) ClusterStatus(ctx context.Context, req *connect_go.Request[v1.ClusterStatusRequest]) (*connect_go.Response[v1.ClusterStatusResponse], error) {
	return c.clusterStatus.CallUnary(ctx, req)
}

// DeleteCluster calls porter.v1.ClusterControlPlaneService.DeleteCluster.
func (c *clusterControlPlaneServiceClient) DeleteCluster(ctx context.Context, req *connect_go.Request[v1.DeleteClusterRequest]) (*connect_go.Response[v1.DeleteClusterResponse], error) {
	return c.deleteCluster.CallUnary(ctx, req)
}

// TokenForRegistry calls porter.v1.ClusterControlPlaneService.TokenForRegistry.
func (c *clusterControlPlaneServiceClient) TokenForRegistry(ctx context.Context, req *connect_go.Request[v1.TokenForRegistryRequest]) (*connect_go.Response[v1.TokenForRegistryResponse], error) {
	return c.tokenForRegistry.CallUnary(ctx, req)
}

// ListRepositoriesForRegistry calls
// porter.v1.ClusterControlPlaneService.ListRepositoriesForRegistry.
func (c *clusterControlPlaneServiceClient) ListRepositoriesForRegistry(ctx context.Context, req *connect_go.Request[v1.ListRepositoriesForRegistryRequest]) (*connect_go.Response[v1.ListRepositoriesForRegistryResponse], error) {
	return c.listRepositoriesForRegistry.CallUnary(ctx, req)
}

// ListImagesForRepository calls porter.v1.ClusterControlPlaneService.ListImagesForRepository.
func (c *clusterControlPlaneServiceClient) ListImagesForRepository(ctx context.Context, req *connect_go.Request[v1.ListImagesForRepositoryRequest]) (*connect_go.Response[v1.ListImagesForRepositoryResponse], error) {
	return c.listImagesForRepository.CallUnary(ctx, req)
}

// DockerConfigFileForRegistry calls
// porter.v1.ClusterControlPlaneService.DockerConfigFileForRegistry.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) DockerConfigFileForRegistry(ctx context.Context, req *connect_go.Request[v1.DockerConfigFileForRegistryRequest]) (*connect_go.Response[v1.DockerConfigFileForRegistryResponse], error) {
	return c.dockerConfigFileForRegistry.CallUnary(ctx, req)
}

// ECRTokenForRegistry calls porter.v1.ClusterControlPlaneService.ECRTokenForRegistry.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) ECRTokenForRegistry(ctx context.Context, req *connect_go.Request[v1.ECRTokenForRegistryRequest]) (*connect_go.Response[v1.ECRTokenForRegistryResponse], error) {
	return c.eCRTokenForRegistry.CallUnary(ctx, req)
}

// AssumeRoleCredentials calls porter.v1.ClusterControlPlaneService.AssumeRoleCredentials.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) AssumeRoleCredentials(ctx context.Context, req *connect_go.Request[v1.AssumeRoleCredentialsRequest]) (*connect_go.Response[v1.AssumeRoleCredentialsResponse], error) {
	return c.assumeRoleCredentials.CallUnary(ctx, req)
}

// AssumeRoleChainTargets calls porter.v1.ClusterControlPlaneService.AssumeRoleChainTargets.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) AssumeRoleChainTargets(ctx context.Context, req *connect_go.Request[v1.AssumeRoleChainTargetsRequest]) (*connect_go.Response[v1.AssumeRoleChainTargetsResponse], error) {
	return c.assumeRoleChainTargets.CallUnary(ctx, req)
}

// CertificateAuthorityData calls porter.v1.ClusterControlPlaneService.CertificateAuthorityData.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) CertificateAuthorityData(ctx context.Context, req *connect_go.Request[v1.CertificateAuthorityDataRequest]) (*connect_go.Response[v1.CertificateAuthorityDataResponse], error) {
	return c.certificateAuthorityData.CallUnary(ctx, req)
}

// EKSBearerToken calls porter.v1.ClusterControlPlaneService.EKSBearerToken.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) EKSBearerToken(ctx context.Context, req *connect_go.Request[v1.EKSBearerTokenRequest]) (*connect_go.Response[v1.EKSBearerTokenResponse], error) {
	return c.eKSBearerToken.CallUnary(ctx, req)
}

// ClusterControlPlaneServiceHandler is an implementation of the
// porter.v1.ClusterControlPlaneService service.
type ClusterControlPlaneServiceHandler interface {
	// QuotaPreflightCheck checks if the target account and region has sufficient resources (EIP addresses and VPCs) to provision a new cluster
	QuotaPreflightCheck(context.Context, *connect_go.Request[v1.QuotaPreflightCheckRequest]) (*connect_go.Response[v1.QuotaPreflightCheckResponse], error)
	// CreateAssumeRoleChain creates a new assume role chain for a given project and checks if the target assumed role has sufficient permissions. Use UpdateCloudProviderCredentials instead.
	//
	// Deprecated: do not use.
	CreateAssumeRoleChain(context.Context, *connect_go.Request[v1.CreateAssumeRoleChainRequest]) (*connect_go.Response[v1.CreateAssumeRoleChainResponse], error)
	// SaveAzureCredentials stores the new azure service principal credentials and creates the azure cluster identity. Deprecated. Use UpdateCloudProviderCredentials instead.
	//
	// Deprecated: do not use.
	SaveAzureCredentials(context.Context, *connect_go.Request[v1.SaveAzureCredentialsRequest]) (*connect_go.Response[v1.SaveAzureCredentialsResponse], error)
	// KubeConfigForCluster gets a valid kubeconfig from the management cluster, for a given workload cluster
	KubeConfigForCluster(context.Context, *connect_go.Request[v1.KubeConfigForClusterRequest]) (*connect_go.Response[v1.KubeConfigForClusterResponse], error)
	// UpdateContract takes in a Porter Contract, actioning upon it where necessary
	UpdateContract(context.Context, *connect_go.Request[v1.UpdateContractRequest]) (*connect_go.Response[v1.UpdateContractResponse], error)
	// ReadContract returns the base64 encoded contract for a given cluster and project
	ReadContract(context.Context, *connect_go.Request[v1.ReadContractRequest]) (*connect_go.Response[v1.ReadContractResponse], error)
	// ClusterStatus returns the status of a given workload cluster
	ClusterStatus(context.Context, *connect_go.Request[v1.ClusterStatusRequest]) (*connect_go.Response[v1.ClusterStatusResponse], error)
	// DeleteCluster uninstalls system components from a given workload cluster before deleting it.
	// This should ultimately be wrapped into UpdateContract
	DeleteCluster(context.Context, *connect_go.Request[v1.DeleteClusterRequest]) (*connect_go.Response[v1.DeleteClusterResponse], error)
	// TokenForRegistry returns a token for accessing a given registry
	TokenForRegistry(context.Context, *connect_go.Request[v1.TokenForRegistryRequest]) (*connect_go.Response[v1.TokenForRegistryResponse], error)
	// ListRepositoriesForRegistry lists the repositories for a given registry, provided it is in the scope of the project id
	ListRepositoriesForRegistry(context.Context, *connect_go.Request[v1.ListRepositoriesForRegistryRequest]) (*connect_go.Response[v1.ListRepositoriesForRegistryResponse], error)
	// ListImagesForRepository lists the repositories for a given registry, provided it is in the scope of the project id
	ListImagesForRepository(context.Context, *connect_go.Request[v1.ListImagesForRepositoryRequest]) (*connect_go.Response[v1.ListImagesForRepositoryResponse], error)
	// DockerConfigFileForRegistry returns a stringified config.json for accessing a given registry.
	// Deprecated. Use TokenForRegistry instead.
	//
	// Deprecated: do not use.
	DockerConfigFileForRegistry(context.Context, *connect_go.Request[v1.DockerConfigFileForRegistryRequest]) (*connect_go.Response[v1.DockerConfigFileForRegistryResponse], error)
	// ECRTokenForRegistry returns a docker-compatible token for accessing a given ECR registry. Deprecated. Use TokenForRegistry instead.
	//
	// Deprecated: do not use.
	ECRTokenForRegistry(context.Context, *connect_go.Request[v1.ECRTokenForRegistryRequest]) (*connect_go.Response[v1.ECRTokenForRegistryResponse], error)
	// AssumeRoleCredentials should be used vary sparingly, and ONLY for replacing AWS Integrations which have no workaround on the Porter API.
	// This endpoint returns temporary AWS credentials for a given AWS Account ID, and should not be expanded further to allow specifc role selection without being tied to a project and cluster.
	// Deprecated. This is no longer needed once ListRepositoriesForRegistry supports AWS.
	//
	// Deprecated: do not use.
	AssumeRoleCredentials(context.Context, *connect_go.Request[v1.AssumeRoleCredentialsRequest]) (*connect_go.Response[v1.AssumeRoleCredentialsResponse], error)
	// AssumeRoleChainTargets gets the final destination target_arns for a given project. This has been deprecated. Do not use.
	//
	// Deprecated: do not use.
	AssumeRoleChainTargets(context.Context, *connect_go.Request[v1.AssumeRoleChainTargetsRequest]) (*connect_go.Response[v1.AssumeRoleChainTargetsResponse], error)
	// CertificateAuthorityData gets the certificate authority data for a customer cluster
	//
	// Deprecated: do not use.
	CertificateAuthorityData(context.Context, *connect_go.Request[v1.CertificateAuthorityDataRequest]) (*connect_go.Response[v1.CertificateAuthorityDataResponse], error)
	// EKSBearerToken gets a bearer token for programatic access to an EKS cluster's kubernetes API. This has been deprecated. Use KubeConfigForCluster instead.
	//
	// Deprecated: do not use.
	EKSBearerToken(context.Context, *connect_go.Request[v1.EKSBearerTokenRequest]) (*connect_go.Response[v1.EKSBearerTokenResponse], error)
}

// NewClusterControlPlaneServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterControlPlaneServiceHandler(svc ClusterControlPlaneServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/porter.v1.ClusterControlPlaneService/QuotaPreflightCheck", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/QuotaPreflightCheck",
		svc.QuotaPreflightCheck,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/CreateAssumeRoleChain", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/CreateAssumeRoleChain",
		svc.CreateAssumeRoleChain,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/SaveAzureCredentials", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/SaveAzureCredentials",
		svc.SaveAzureCredentials,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/KubeConfigForCluster", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/KubeConfigForCluster",
		svc.KubeConfigForCluster,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/UpdateContract", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/UpdateContract",
		svc.UpdateContract,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/ReadContract", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/ReadContract",
		svc.ReadContract,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/ClusterStatus", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/ClusterStatus",
		svc.ClusterStatus,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/DeleteCluster", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/DeleteCluster",
		svc.DeleteCluster,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/TokenForRegistry", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/TokenForRegistry",
		svc.TokenForRegistry,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/ListRepositoriesForRegistry", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/ListRepositoriesForRegistry",
		svc.ListRepositoriesForRegistry,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/ListImagesForRepository", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/ListImagesForRepository",
		svc.ListImagesForRepository,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/DockerConfigFileForRegistry", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/DockerConfigFileForRegistry",
		svc.DockerConfigFileForRegistry,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/ECRTokenForRegistry", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/ECRTokenForRegistry",
		svc.ECRTokenForRegistry,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/AssumeRoleCredentials", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/AssumeRoleCredentials",
		svc.AssumeRoleCredentials,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/AssumeRoleChainTargets", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/AssumeRoleChainTargets",
		svc.AssumeRoleChainTargets,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/CertificateAuthorityData", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/CertificateAuthorityData",
		svc.CertificateAuthorityData,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/EKSBearerToken", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/EKSBearerToken",
		svc.EKSBearerToken,
		opts...,
	))
	return "/porter.v1.ClusterControlPlaneService/", mux
}

// UnimplementedClusterControlPlaneServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterControlPlaneServiceHandler struct{}

func (UnimplementedClusterControlPlaneServiceHandler) QuotaPreflightCheck(context.Context, *connect_go.Request[v1.QuotaPreflightCheckRequest]) (*connect_go.Response[v1.QuotaPreflightCheckResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.QuotaPreflightCheck is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CreateAssumeRoleChain(context.Context, *connect_go.Request[v1.CreateAssumeRoleChainRequest]) (*connect_go.Response[v1.CreateAssumeRoleChainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CreateAssumeRoleChain is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) SaveAzureCredentials(context.Context, *connect_go.Request[v1.SaveAzureCredentialsRequest]) (*connect_go.Response[v1.SaveAzureCredentialsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.SaveAzureCredentials is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) KubeConfigForCluster(context.Context, *connect_go.Request[v1.KubeConfigForClusterRequest]) (*connect_go.Response[v1.KubeConfigForClusterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.KubeConfigForCluster is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateContract(context.Context, *connect_go.Request[v1.UpdateContractRequest]) (*connect_go.Response[v1.UpdateContractResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateContract is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ReadContract(context.Context, *connect_go.Request[v1.ReadContractRequest]) (*connect_go.Response[v1.ReadContractResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ReadContract is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ClusterStatus(context.Context, *connect_go.Request[v1.ClusterStatusRequest]) (*connect_go.Response[v1.ClusterStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ClusterStatus is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeleteCluster(context.Context, *connect_go.Request[v1.DeleteClusterRequest]) (*connect_go.Response[v1.DeleteClusterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeleteCluster is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) TokenForRegistry(context.Context, *connect_go.Request[v1.TokenForRegistryRequest]) (*connect_go.Response[v1.TokenForRegistryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.TokenForRegistry is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ListRepositoriesForRegistry(context.Context, *connect_go.Request[v1.ListRepositoriesForRegistryRequest]) (*connect_go.Response[v1.ListRepositoriesForRegistryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ListRepositoriesForRegistry is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ListImagesForRepository(context.Context, *connect_go.Request[v1.ListImagesForRepositoryRequest]) (*connect_go.Response[v1.ListImagesForRepositoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ListImagesForRepository is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DockerConfigFileForRegistry(context.Context, *connect_go.Request[v1.DockerConfigFileForRegistryRequest]) (*connect_go.Response[v1.DockerConfigFileForRegistryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DockerConfigFileForRegistry is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ECRTokenForRegistry(context.Context, *connect_go.Request[v1.ECRTokenForRegistryRequest]) (*connect_go.Response[v1.ECRTokenForRegistryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ECRTokenForRegistry is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) AssumeRoleCredentials(context.Context, *connect_go.Request[v1.AssumeRoleCredentialsRequest]) (*connect_go.Response[v1.AssumeRoleCredentialsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.AssumeRoleCredentials is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) AssumeRoleChainTargets(context.Context, *connect_go.Request[v1.AssumeRoleChainTargetsRequest]) (*connect_go.Response[v1.AssumeRoleChainTargetsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.AssumeRoleChainTargets is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CertificateAuthorityData(context.Context, *connect_go.Request[v1.CertificateAuthorityDataRequest]) (*connect_go.Response[v1.CertificateAuthorityDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CertificateAuthorityData is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) EKSBearerToken(context.Context, *connect_go.Request[v1.EKSBearerTokenRequest]) (*connect_go.Response[v1.EKSBearerTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.EKSBearerToken is not implemented"))
}
