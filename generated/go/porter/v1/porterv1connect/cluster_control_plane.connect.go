// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: porter/v1/cluster_control_plane.proto

package porterv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/porter-dev/porter/gen/porter/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ClusterControlPlaneName is the fully-qualified name of the ClusterControlPlane service.
	ClusterControlPlaneName = "porter.v1.ClusterControlPlane"
)

// ClusterControlPlaneClient is a client for the porter.v1.ClusterControlPlane service.
type ClusterControlPlaneClient interface {
	CreateAssumeRoleChain(context.Context, *connect_go.Request[v1.CreateAssumeRoleChainInput]) (*connect_go.Response[v1.AssumeRoleChainLink], error)
}

// NewClusterControlPlaneClient constructs a client for the porter.v1.ClusterControlPlane service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterControlPlaneClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ClusterControlPlaneClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &clusterControlPlaneClient{
		createAssumeRoleChain: connect_go.NewClient[v1.CreateAssumeRoleChainInput, v1.AssumeRoleChainLink](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlane/CreateAssumeRoleChain",
			opts...,
		),
	}
}

// clusterControlPlaneClient implements ClusterControlPlaneClient.
type clusterControlPlaneClient struct {
	createAssumeRoleChain *connect_go.Client[v1.CreateAssumeRoleChainInput, v1.AssumeRoleChainLink]
}

// CreateAssumeRoleChain calls porter.v1.ClusterControlPlane.CreateAssumeRoleChain.
func (c *clusterControlPlaneClient) CreateAssumeRoleChain(ctx context.Context, req *connect_go.Request[v1.CreateAssumeRoleChainInput]) (*connect_go.Response[v1.AssumeRoleChainLink], error) {
	return c.createAssumeRoleChain.CallUnary(ctx, req)
}

// ClusterControlPlaneHandler is an implementation of the porter.v1.ClusterControlPlane service.
type ClusterControlPlaneHandler interface {
	CreateAssumeRoleChain(context.Context, *connect_go.Request[v1.CreateAssumeRoleChainInput]) (*connect_go.Response[v1.AssumeRoleChainLink], error)
}

// NewClusterControlPlaneHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterControlPlaneHandler(svc ClusterControlPlaneHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/porter.v1.ClusterControlPlane/CreateAssumeRoleChain", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlane/CreateAssumeRoleChain",
		svc.CreateAssumeRoleChain,
		opts...,
	))
	return "/porter.v1.ClusterControlPlane/", mux
}

// UnimplementedClusterControlPlaneHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterControlPlaneHandler struct{}

func (UnimplementedClusterControlPlaneHandler) CreateAssumeRoleChain(context.Context, *connect_go.Request[v1.CreateAssumeRoleChainInput]) (*connect_go.Response[v1.AssumeRoleChainLink], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlane.CreateAssumeRoleChain is not implemented"))
}
