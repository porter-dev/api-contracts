// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: porter/v1/cluster_control_plane.proto

package porterv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/porter-dev/api-contracts/generated/go/porter/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClusterControlPlaneServiceName is the fully-qualified name of the ClusterControlPlaneService
	// service.
	ClusterControlPlaneServiceName = "porter.v1.ClusterControlPlaneService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClusterControlPlaneServiceMachineTypesProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's MachineTypes RPC.
	ClusterControlPlaneServiceMachineTypesProcedure = "/porter.v1.ClusterControlPlaneService/MachineTypes"
	// ClusterControlPlaneServiceQuotaIncreaseProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's QuotaIncrease RPC.
	ClusterControlPlaneServiceQuotaIncreaseProcedure = "/porter.v1.ClusterControlPlaneService/QuotaIncrease"
	// ClusterControlPlaneServiceUpdateCloudProviderCredentialsProcedure is the fully-qualified name of
	// the ClusterControlPlaneService's UpdateCloudProviderCredentials RPC.
	ClusterControlPlaneServiceUpdateCloudProviderCredentialsProcedure = "/porter.v1.ClusterControlPlaneService/UpdateCloudProviderCredentials"
	// ClusterControlPlaneServiceQuotaPreflightCheckProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's QuotaPreflightCheck RPC.
	ClusterControlPlaneServiceQuotaPreflightCheckProcedure = "/porter.v1.ClusterControlPlaneService/QuotaPreflightCheck"
	// ClusterControlPlaneServicePreflightCheckProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's PreflightCheck RPC.
	ClusterControlPlaneServicePreflightCheckProcedure = "/porter.v1.ClusterControlPlaneService/PreflightCheck"
	// ClusterControlPlaneServiceCloudContractPreflightCheckProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CloudContractPreflightCheck RPC.
	ClusterControlPlaneServiceCloudContractPreflightCheckProcedure = "/porter.v1.ClusterControlPlaneService/CloudContractPreflightCheck"
	// ClusterControlPlaneServiceCreateAssumeRoleChainProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CreateAssumeRoleChain RPC.
	ClusterControlPlaneServiceCreateAssumeRoleChainProcedure = "/porter.v1.ClusterControlPlaneService/CreateAssumeRoleChain"
	// ClusterControlPlaneServiceSaveAzureCredentialsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's SaveAzureCredentials RPC.
	ClusterControlPlaneServiceSaveAzureCredentialsProcedure = "/porter.v1.ClusterControlPlaneService/SaveAzureCredentials"
	// ClusterControlPlaneServiceKubeConfigForClusterProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's KubeConfigForCluster RPC.
	ClusterControlPlaneServiceKubeConfigForClusterProcedure = "/porter.v1.ClusterControlPlaneService/KubeConfigForCluster"
	// ClusterControlPlaneServiceUpdateContractProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's UpdateContract RPC.
	ClusterControlPlaneServiceUpdateContractProcedure = "/porter.v1.ClusterControlPlaneService/UpdateContract"
	// ClusterControlPlaneServiceReadContractProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ReadContract RPC.
	ClusterControlPlaneServiceReadContractProcedure = "/porter.v1.ClusterControlPlaneService/ReadContract"
	// ClusterControlPlaneServiceClusterStatusProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ClusterStatus RPC.
	ClusterControlPlaneServiceClusterStatusProcedure = "/porter.v1.ClusterControlPlaneService/ClusterStatus"
	// ClusterControlPlaneServiceDeleteClusterProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeleteCluster RPC.
	ClusterControlPlaneServiceDeleteClusterProcedure = "/porter.v1.ClusterControlPlaneService/DeleteCluster"
	// ClusterControlPlaneServiceTokenForRegistryProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's TokenForRegistry RPC.
	ClusterControlPlaneServiceTokenForRegistryProcedure = "/porter.v1.ClusterControlPlaneService/TokenForRegistry"
	// ClusterControlPlaneServiceContractComplianceChecksProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ContractComplianceChecks RPC.
	ClusterControlPlaneServiceContractComplianceChecksProcedure = "/porter.v1.ClusterControlPlaneService/ContractComplianceChecks"
	// ClusterControlPlaneServiceValidatePorterAppProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ValidatePorterApp RPC.
	ClusterControlPlaneServiceValidatePorterAppProcedure = "/porter.v1.ClusterControlPlaneService/ValidatePorterApp"
	// ClusterControlPlaneServiceApplyPorterAppProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ApplyPorterApp RPC.
	ClusterControlPlaneServiceApplyPorterAppProcedure = "/porter.v1.ClusterControlPlaneService/ApplyPorterApp"
	// ClusterControlPlaneServiceUpdateAppProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's UpdateApp RPC.
	ClusterControlPlaneServiceUpdateAppProcedure = "/porter.v1.ClusterControlPlaneService/UpdateApp"
	// ClusterControlPlaneServiceUpdateAddonProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's UpdateAddon RPC.
	ClusterControlPlaneServiceUpdateAddonProcedure = "/porter.v1.ClusterControlPlaneService/UpdateAddon"
	// ClusterControlPlaneServiceDeleteAddonProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeleteAddon RPC.
	ClusterControlPlaneServiceDeleteAddonProcedure = "/porter.v1.ClusterControlPlaneService/DeleteAddon"
	// ClusterControlPlaneServiceRollbackRevisionProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's RollbackRevision RPC.
	ClusterControlPlaneServiceRollbackRevisionProcedure = "/porter.v1.ClusterControlPlaneService/RollbackRevision"
	// ClusterControlPlaneServiceUpdateRevisionStatusProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's UpdateRevisionStatus RPC.
	ClusterControlPlaneServiceUpdateRevisionStatusProcedure = "/porter.v1.ClusterControlPlaneService/UpdateRevisionStatus"
	// ClusterControlPlaneServiceAppRevisionStatusProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's AppRevisionStatus RPC.
	ClusterControlPlaneServiceAppRevisionStatusProcedure = "/porter.v1.ClusterControlPlaneService/AppRevisionStatus"
	// ClusterControlPlaneServiceDeletePorterAppProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeletePorterApp RPC.
	ClusterControlPlaneServiceDeletePorterAppProcedure = "/porter.v1.ClusterControlPlaneService/DeletePorterApp"
	// ClusterControlPlaneServiceDeleteAppDeploymentProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeleteAppDeployment RPC.
	ClusterControlPlaneServiceDeleteAppDeploymentProcedure = "/porter.v1.ClusterControlPlaneService/DeleteAppDeployment"
	// ClusterControlPlaneServiceDeleteDeploymentTargetProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeleteDeploymentTarget RPC.
	ClusterControlPlaneServiceDeleteDeploymentTargetProcedure = "/porter.v1.ClusterControlPlaneService/DeleteDeploymentTarget"
	// ClusterControlPlaneServiceCurrentAppRevisionProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CurrentAppRevision RPC.
	ClusterControlPlaneServiceCurrentAppRevisionProcedure = "/porter.v1.ClusterControlPlaneService/CurrentAppRevision"
	// ClusterControlPlaneServiceListAppRevisionsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ListAppRevisions RPC.
	ClusterControlPlaneServiceListAppRevisionsProcedure = "/porter.v1.ClusterControlPlaneService/ListAppRevisions"
	// ClusterControlPlaneServiceLatestAppRevisionsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's LatestAppRevisions RPC.
	ClusterControlPlaneServiceLatestAppRevisionsProcedure = "/porter.v1.ClusterControlPlaneService/LatestAppRevisions"
	// ClusterControlPlaneServiceGetAppRevisionProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's GetAppRevision RPC.
	ClusterControlPlaneServiceGetAppRevisionProcedure = "/porter.v1.ClusterControlPlaneService/GetAppRevision"
	// ClusterControlPlaneServiceAppTemplateProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's AppTemplate RPC.
	ClusterControlPlaneServiceAppTemplateProcedure = "/porter.v1.ClusterControlPlaneService/AppTemplate"
	// ClusterControlPlaneServiceUpdateAppTemplateProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's UpdateAppTemplate RPC.
	ClusterControlPlaneServiceUpdateAppTemplateProcedure = "/porter.v1.ClusterControlPlaneService/UpdateAppTemplate"
	// ClusterControlPlaneServiceLatestAddonsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's LatestAddons RPC.
	ClusterControlPlaneServiceLatestAddonsProcedure = "/porter.v1.ClusterControlPlaneService/LatestAddons"
	// ClusterControlPlaneServicePredeployStatusProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's PredeployStatus RPC.
	ClusterControlPlaneServicePredeployStatusProcedure = "/porter.v1.ClusterControlPlaneService/PredeployStatus"
	// ClusterControlPlaneServiceDeploymentTargetDetailsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeploymentTargetDetails RPC.
	ClusterControlPlaneServiceDeploymentTargetDetailsProcedure = "/porter.v1.ClusterControlPlaneService/DeploymentTargetDetails"
	// ClusterControlPlaneServiceCreateDeploymentTargetProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CreateDeploymentTarget RPC.
	ClusterControlPlaneServiceCreateDeploymentTargetProcedure = "/porter.v1.ClusterControlPlaneService/CreateDeploymentTarget"
	// ClusterControlPlaneServiceDeploymentTargetsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeploymentTargets RPC.
	ClusterControlPlaneServiceDeploymentTargetsProcedure = "/porter.v1.ClusterControlPlaneService/DeploymentTargets"
	// ClusterControlPlaneServiceDefaultDeploymentTargetProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DefaultDeploymentTarget RPC.
	ClusterControlPlaneServiceDefaultDeploymentTargetProcedure = "/porter.v1.ClusterControlPlaneService/DefaultDeploymentTarget"
	// ClusterControlPlaneServiceSeedAppRevisionsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's SeedAppRevisions RPC.
	ClusterControlPlaneServiceSeedAppRevisionsProcedure = "/porter.v1.ClusterControlPlaneService/SeedAppRevisions"
	// ClusterControlPlaneServiceEnvGroupVariablesProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's EnvGroupVariables RPC.
	ClusterControlPlaneServiceEnvGroupVariablesProcedure = "/porter.v1.ClusterControlPlaneService/EnvGroupVariables"
	// ClusterControlPlaneServiceLatestEnvGroupWithVariablesProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's LatestEnvGroupWithVariables RPC.
	ClusterControlPlaneServiceLatestEnvGroupWithVariablesProcedure = "/porter.v1.ClusterControlPlaneService/LatestEnvGroupWithVariables"
	// ClusterControlPlaneServiceAppEnvVariablesProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's AppEnvVariables RPC.
	ClusterControlPlaneServiceAppEnvVariablesProcedure = "/porter.v1.ClusterControlPlaneService/AppEnvVariables"
	// ClusterControlPlaneServiceUpdateAppImageProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's UpdateAppImage RPC.
	ClusterControlPlaneServiceUpdateAppImageProcedure = "/porter.v1.ClusterControlPlaneService/UpdateAppImage"
	// ClusterControlPlaneServiceUpdateAppBuildSettingsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's UpdateAppBuildSettings RPC.
	ClusterControlPlaneServiceUpdateAppBuildSettingsProcedure = "/porter.v1.ClusterControlPlaneService/UpdateAppBuildSettings"
	// ClusterControlPlaneServiceUpdateAppsLinkedToEnvGroupProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's UpdateAppsLinkedToEnvGroup RPC.
	ClusterControlPlaneServiceUpdateAppsLinkedToEnvGroupProcedure = "/porter.v1.ClusterControlPlaneService/UpdateAppsLinkedToEnvGroup"
	// ClusterControlPlaneServiceAppHelmValuesProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's AppHelmValues RPC.
	ClusterControlPlaneServiceAppHelmValuesProcedure = "/porter.v1.ClusterControlPlaneService/AppHelmValues"
	// ClusterControlPlaneServiceManualServiceRunProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ManualServiceRun RPC.
	ClusterControlPlaneServiceManualServiceRunProcedure = "/porter.v1.ClusterControlPlaneService/ManualServiceRun"
	// ClusterControlPlaneServiceCancelJobRunProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CancelJobRun RPC.
	ClusterControlPlaneServiceCancelJobRunProcedure = "/porter.v1.ClusterControlPlaneService/CancelJobRun"
	// ClusterControlPlaneServiceJobRunStatusProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's JobRunStatus RPC.
	ClusterControlPlaneServiceJobRunStatusProcedure = "/porter.v1.ClusterControlPlaneService/JobRunStatus"
	// ClusterControlPlaneServiceJobRunsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's JobRuns RPC.
	ClusterControlPlaneServiceJobRunsProcedure = "/porter.v1.ClusterControlPlaneService/JobRuns"
	// ClusterControlPlaneServiceClusterNetworkSettingsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ClusterNetworkSettings RPC.
	ClusterControlPlaneServiceClusterNetworkSettingsProcedure = "/porter.v1.ClusterControlPlaneService/ClusterNetworkSettings"
	// ClusterControlPlaneServiceSharedNetworkSettingsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's SharedNetworkSettings RPC.
	ClusterControlPlaneServiceSharedNetworkSettingsProcedure = "/porter.v1.ClusterControlPlaneService/SharedNetworkSettings"
	// ClusterControlPlaneServiceImagesProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's Images RPC.
	ClusterControlPlaneServiceImagesProcedure = "/porter.v1.ClusterControlPlaneService/Images"
	// ClusterControlPlaneServiceCreateAppInstanceProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CreateAppInstance RPC.
	ClusterControlPlaneServiceCreateAppInstanceProcedure = "/porter.v1.ClusterControlPlaneService/CreateAppInstance"
	// ClusterControlPlaneServiceDeleteAppInstanceProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeleteAppInstance RPC.
	ClusterControlPlaneServiceDeleteAppInstanceProcedure = "/porter.v1.ClusterControlPlaneService/DeleteAppInstance"
	// ClusterControlPlaneServiceListAppInstancesProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ListAppInstances RPC.
	ClusterControlPlaneServiceListAppInstancesProcedure = "/porter.v1.ClusterControlPlaneService/ListAppInstances"
	// ClusterControlPlaneServiceTemplateAppManifestsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's TemplateAppManifests RPC.
	ClusterControlPlaneServiceTemplateAppManifestsProcedure = "/porter.v1.ClusterControlPlaneService/TemplateAppManifests"
	// ClusterControlPlaneServiceCreateNotificationProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CreateNotification RPC.
	ClusterControlPlaneServiceCreateNotificationProcedure = "/porter.v1.ClusterControlPlaneService/CreateNotification"
	// ClusterControlPlaneServiceRecordPrometheusAlertProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's RecordPrometheusAlert RPC.
	ClusterControlPlaneServiceRecordPrometheusAlertProcedure = "/porter.v1.ClusterControlPlaneService/RecordPrometheusAlert"
	// ClusterControlPlaneServiceUpdateServiceDeploymentStatusProcedure is the fully-qualified name of
	// the ClusterControlPlaneService's UpdateServiceDeploymentStatus RPC.
	ClusterControlPlaneServiceUpdateServiceDeploymentStatusProcedure = "/porter.v1.ClusterControlPlaneService/UpdateServiceDeploymentStatus"
	// ClusterControlPlaneServiceConnectHostedProjectProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ConnectHostedProject RPC.
	ClusterControlPlaneServiceConnectHostedProjectProcedure = "/porter.v1.ClusterControlPlaneService/ConnectHostedProject"
	// ClusterControlPlaneServiceUpdateDatastoreProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's UpdateDatastore RPC.
	ClusterControlPlaneServiceUpdateDatastoreProcedure = "/porter.v1.ClusterControlPlaneService/UpdateDatastore"
	// ClusterControlPlaneServiceDeleteDatastoreProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeleteDatastore RPC.
	ClusterControlPlaneServiceDeleteDatastoreProcedure = "/porter.v1.ClusterControlPlaneService/DeleteDatastore"
	// ClusterControlPlaneServiceCreateDatastoreProxyProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CreateDatastoreProxy RPC.
	ClusterControlPlaneServiceCreateDatastoreProxyProcedure = "/porter.v1.ClusterControlPlaneService/CreateDatastoreProxy"
	// ClusterControlPlaneServiceDatastoreCredentialProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DatastoreCredential RPC.
	ClusterControlPlaneServiceDatastoreCredentialProcedure = "/porter.v1.ClusterControlPlaneService/DatastoreCredential"
	// ClusterControlPlaneServiceCloudProviderPermissionsStatusProcedure is the fully-qualified name of
	// the ClusterControlPlaneService's CloudProviderPermissionsStatus RPC.
	ClusterControlPlaneServiceCloudProviderPermissionsStatusProcedure = "/porter.v1.ClusterControlPlaneService/CloudProviderPermissionsStatus"
	// ClusterControlPlaneServicePatchCloudContractProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's PatchCloudContract RPC.
	ClusterControlPlaneServicePatchCloudContractProcedure = "/porter.v1.ClusterControlPlaneService/PatchCloudContract"
	// ClusterControlPlaneServiceReadCloudContractProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ReadCloudContract RPC.
	ClusterControlPlaneServiceReadCloudContractProcedure = "/porter.v1.ClusterControlPlaneService/ReadCloudContract"
	// ClusterControlPlaneServiceDockerConfigFileForRegistryProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DockerConfigFileForRegistry RPC.
	ClusterControlPlaneServiceDockerConfigFileForRegistryProcedure = "/porter.v1.ClusterControlPlaneService/DockerConfigFileForRegistry"
	// ClusterControlPlaneServiceECRTokenForRegistryProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ECRTokenForRegistry RPC.
	ClusterControlPlaneServiceECRTokenForRegistryProcedure = "/porter.v1.ClusterControlPlaneService/ECRTokenForRegistry"
	// ClusterControlPlaneServiceAssumeRoleCredentialsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's AssumeRoleCredentials RPC.
	ClusterControlPlaneServiceAssumeRoleCredentialsProcedure = "/porter.v1.ClusterControlPlaneService/AssumeRoleCredentials"
	// ClusterControlPlaneServiceAssumeRoleChainTargetsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's AssumeRoleChainTargets RPC.
	ClusterControlPlaneServiceAssumeRoleChainTargetsProcedure = "/porter.v1.ClusterControlPlaneService/AssumeRoleChainTargets"
	// ClusterControlPlaneServiceCertificateAuthorityDataProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CertificateAuthorityData RPC.
	ClusterControlPlaneServiceCertificateAuthorityDataProcedure = "/porter.v1.ClusterControlPlaneService/CertificateAuthorityData"
	// ClusterControlPlaneServiceEKSBearerTokenProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's EKSBearerToken RPC.
	ClusterControlPlaneServiceEKSBearerTokenProcedure = "/porter.v1.ClusterControlPlaneService/EKSBearerToken"
	// ClusterControlPlaneServiceListRepositoriesForRegistryProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ListRepositoriesForRegistry RPC.
	ClusterControlPlaneServiceListRepositoriesForRegistryProcedure = "/porter.v1.ClusterControlPlaneService/ListRepositoriesForRegistry"
	// ClusterControlPlaneServiceListImagesForRepositoryProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ListImagesForRepository RPC.
	ClusterControlPlaneServiceListImagesForRepositoryProcedure = "/porter.v1.ClusterControlPlaneService/ListImagesForRepository"
	// ClusterControlPlaneServiceListDatastoresProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ListDatastores RPC.
	ClusterControlPlaneServiceListDatastoresProcedure = "/porter.v1.ClusterControlPlaneService/ListDatastores"
	// ClusterControlPlaneServiceDatastoreStatusProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DatastoreStatus RPC.
	ClusterControlPlaneServiceDatastoreStatusProcedure = "/porter.v1.ClusterControlPlaneService/DatastoreStatus"
	// ClusterControlPlaneServiceRegistryStatusProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's RegistryStatus RPC.
	ClusterControlPlaneServiceRegistryStatusProcedure = "/porter.v1.ClusterControlPlaneService/RegistryStatus"
	// ClusterControlPlaneServiceEnableExternalEnvGroupProvidersProcedure is the fully-qualified name of
	// the ClusterControlPlaneService's EnableExternalEnvGroupProviders RPC.
	ClusterControlPlaneServiceEnableExternalEnvGroupProvidersProcedure = "/porter.v1.ClusterControlPlaneService/EnableExternalEnvGroupProviders"
	// ClusterControlPlaneServiceAreExternalEnvGroupProvidersEnabledProcedure is the fully-qualified
	// name of the ClusterControlPlaneService's AreExternalEnvGroupProvidersEnabled RPC.
	ClusterControlPlaneServiceAreExternalEnvGroupProvidersEnabledProcedure = "/porter.v1.ClusterControlPlaneService/AreExternalEnvGroupProvidersEnabled"
	// ClusterControlPlaneServiceCreateOrUpdateEnvGroupProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's CreateOrUpdateEnvGroup RPC.
	ClusterControlPlaneServiceCreateOrUpdateEnvGroupProcedure = "/porter.v1.ClusterControlPlaneService/CreateOrUpdateEnvGroup"
	// ClusterControlPlaneServiceDeleteEnvGroupProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's DeleteEnvGroup RPC.
	ClusterControlPlaneServiceDeleteEnvGroupProcedure = "/porter.v1.ClusterControlPlaneService/DeleteEnvGroup"
	// ClusterControlPlaneServiceAppsLinkedToEnvGroupProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's AppsLinkedToEnvGroup RPC.
	ClusterControlPlaneServiceAppsLinkedToEnvGroupProcedure = "/porter.v1.ClusterControlPlaneService/AppsLinkedToEnvGroup"
	// ClusterControlPlaneServiceListEnvGroupsProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's ListEnvGroups RPC.
	ClusterControlPlaneServiceListEnvGroupsProcedure = "/porter.v1.ClusterControlPlaneService/ListEnvGroups"
	// ClusterControlPlaneServiceUpdateNotificationConfigProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's UpdateNotificationConfig RPC.
	ClusterControlPlaneServiceUpdateNotificationConfigProcedure = "/porter.v1.ClusterControlPlaneService/UpdateNotificationConfig"
	// ClusterControlPlaneServiceNotificationConfigProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's NotificationConfig RPC.
	ClusterControlPlaneServiceNotificationConfigProcedure = "/porter.v1.ClusterControlPlaneService/NotificationConfig"
	// ClusterControlPlaneServiceSystemStatusHistoryProcedure is the fully-qualified name of the
	// ClusterControlPlaneService's SystemStatusHistory RPC.
	ClusterControlPlaneServiceSystemStatusHistoryProcedure = "/porter.v1.ClusterControlPlaneService/SystemStatusHistory"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	clusterControlPlaneServiceServiceDescriptor                                   = v1.File_porter_v1_cluster_control_plane_proto.Services().ByName("ClusterControlPlaneService")
	clusterControlPlaneServiceMachineTypesMethodDescriptor                        = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("MachineTypes")
	clusterControlPlaneServiceQuotaIncreaseMethodDescriptor                       = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("QuotaIncrease")
	clusterControlPlaneServiceUpdateCloudProviderCredentialsMethodDescriptor      = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("UpdateCloudProviderCredentials")
	clusterControlPlaneServiceQuotaPreflightCheckMethodDescriptor                 = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("QuotaPreflightCheck")
	clusterControlPlaneServicePreflightCheckMethodDescriptor                      = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("PreflightCheck")
	clusterControlPlaneServiceCloudContractPreflightCheckMethodDescriptor         = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("CloudContractPreflightCheck")
	clusterControlPlaneServiceCreateAssumeRoleChainMethodDescriptor               = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("CreateAssumeRoleChain")
	clusterControlPlaneServiceSaveAzureCredentialsMethodDescriptor                = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("SaveAzureCredentials")
	clusterControlPlaneServiceKubeConfigForClusterMethodDescriptor                = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("KubeConfigForCluster")
	clusterControlPlaneServiceUpdateContractMethodDescriptor                      = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("UpdateContract")
	clusterControlPlaneServiceReadContractMethodDescriptor                        = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("ReadContract")
	clusterControlPlaneServiceClusterStatusMethodDescriptor                       = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("ClusterStatus")
	clusterControlPlaneServiceDeleteClusterMethodDescriptor                       = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("DeleteCluster")
	clusterControlPlaneServiceTokenForRegistryMethodDescriptor                    = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("TokenForRegistry")
	clusterControlPlaneServiceContractComplianceChecksMethodDescriptor            = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("ContractComplianceChecks")
	clusterControlPlaneServiceValidatePorterAppMethodDescriptor                   = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("ValidatePorterApp")
	clusterControlPlaneServiceApplyPorterAppMethodDescriptor                      = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("ApplyPorterApp")
	clusterControlPlaneServiceUpdateAppMethodDescriptor                           = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("UpdateApp")
	clusterControlPlaneServiceUpdateAddonMethodDescriptor                         = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("UpdateAddon")
	clusterControlPlaneServiceDeleteAddonMethodDescriptor                         = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("DeleteAddon")
	clusterControlPlaneServiceRollbackRevisionMethodDescriptor                    = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("RollbackRevision")
	clusterControlPlaneServiceUpdateRevisionStatusMethodDescriptor                = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("UpdateRevisionStatus")
	clusterControlPlaneServiceAppRevisionStatusMethodDescriptor                   = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("AppRevisionStatus")
	clusterControlPlaneServiceDeletePorterAppMethodDescriptor                     = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("DeletePorterApp")
	clusterControlPlaneServiceDeleteAppDeploymentMethodDescriptor                 = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("DeleteAppDeployment")
	clusterControlPlaneServiceDeleteDeploymentTargetMethodDescriptor              = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("DeleteDeploymentTarget")
	clusterControlPlaneServiceCurrentAppRevisionMethodDescriptor                  = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("CurrentAppRevision")
	clusterControlPlaneServiceListAppRevisionsMethodDescriptor                    = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("ListAppRevisions")
	clusterControlPlaneServiceLatestAppRevisionsMethodDescriptor                  = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("LatestAppRevisions")
	clusterControlPlaneServiceGetAppRevisionMethodDescriptor                      = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("GetAppRevision")
	clusterControlPlaneServiceAppTemplateMethodDescriptor                         = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("AppTemplate")
	clusterControlPlaneServiceUpdateAppTemplateMethodDescriptor                   = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("UpdateAppTemplate")
	clusterControlPlaneServiceLatestAddonsMethodDescriptor                        = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("LatestAddons")
	clusterControlPlaneServicePredeployStatusMethodDescriptor                     = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("PredeployStatus")
	clusterControlPlaneServiceDeploymentTargetDetailsMethodDescriptor             = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("DeploymentTargetDetails")
	clusterControlPlaneServiceCreateDeploymentTargetMethodDescriptor              = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("CreateDeploymentTarget")
	clusterControlPlaneServiceDeploymentTargetsMethodDescriptor                   = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("DeploymentTargets")
	clusterControlPlaneServiceDefaultDeploymentTargetMethodDescriptor             = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("DefaultDeploymentTarget")
	clusterControlPlaneServiceSeedAppRevisionsMethodDescriptor                    = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("SeedAppRevisions")
	clusterControlPlaneServiceEnvGroupVariablesMethodDescriptor                   = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("EnvGroupVariables")
	clusterControlPlaneServiceLatestEnvGroupWithVariablesMethodDescriptor         = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("LatestEnvGroupWithVariables")
	clusterControlPlaneServiceAppEnvVariablesMethodDescriptor                     = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("AppEnvVariables")
	clusterControlPlaneServiceUpdateAppImageMethodDescriptor                      = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("UpdateAppImage")
	clusterControlPlaneServiceUpdateAppBuildSettingsMethodDescriptor              = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("UpdateAppBuildSettings")
	clusterControlPlaneServiceUpdateAppsLinkedToEnvGroupMethodDescriptor          = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("UpdateAppsLinkedToEnvGroup")
	clusterControlPlaneServiceAppHelmValuesMethodDescriptor                       = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("AppHelmValues")
	clusterControlPlaneServiceManualServiceRunMethodDescriptor                    = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("ManualServiceRun")
	clusterControlPlaneServiceCancelJobRunMethodDescriptor                        = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("CancelJobRun")
	clusterControlPlaneServiceJobRunStatusMethodDescriptor                        = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("JobRunStatus")
	clusterControlPlaneServiceJobRunsMethodDescriptor                             = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("JobRuns")
	clusterControlPlaneServiceClusterNetworkSettingsMethodDescriptor              = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("ClusterNetworkSettings")
	clusterControlPlaneServiceSharedNetworkSettingsMethodDescriptor               = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("SharedNetworkSettings")
	clusterControlPlaneServiceImagesMethodDescriptor                              = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("Images")
	clusterControlPlaneServiceCreateAppInstanceMethodDescriptor                   = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("CreateAppInstance")
	clusterControlPlaneServiceDeleteAppInstanceMethodDescriptor                   = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("DeleteAppInstance")
	clusterControlPlaneServiceListAppInstancesMethodDescriptor                    = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("ListAppInstances")
	clusterControlPlaneServiceTemplateAppManifestsMethodDescriptor                = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("TemplateAppManifests")
	clusterControlPlaneServiceCreateNotificationMethodDescriptor                  = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("CreateNotification")
	clusterControlPlaneServiceRecordPrometheusAlertMethodDescriptor               = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("RecordPrometheusAlert")
	clusterControlPlaneServiceUpdateServiceDeploymentStatusMethodDescriptor       = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("UpdateServiceDeploymentStatus")
	clusterControlPlaneServiceConnectHostedProjectMethodDescriptor                = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("ConnectHostedProject")
	clusterControlPlaneServiceUpdateDatastoreMethodDescriptor                     = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("UpdateDatastore")
	clusterControlPlaneServiceDeleteDatastoreMethodDescriptor                     = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("DeleteDatastore")
	clusterControlPlaneServiceCreateDatastoreProxyMethodDescriptor                = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("CreateDatastoreProxy")
	clusterControlPlaneServiceDatastoreCredentialMethodDescriptor                 = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("DatastoreCredential")
	clusterControlPlaneServiceCloudProviderPermissionsStatusMethodDescriptor      = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("CloudProviderPermissionsStatus")
	clusterControlPlaneServicePatchCloudContractMethodDescriptor                  = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("PatchCloudContract")
	clusterControlPlaneServiceReadCloudContractMethodDescriptor                   = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("ReadCloudContract")
	clusterControlPlaneServiceDockerConfigFileForRegistryMethodDescriptor         = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("DockerConfigFileForRegistry")
	clusterControlPlaneServiceECRTokenForRegistryMethodDescriptor                 = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("ECRTokenForRegistry")
	clusterControlPlaneServiceAssumeRoleCredentialsMethodDescriptor               = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("AssumeRoleCredentials")
	clusterControlPlaneServiceAssumeRoleChainTargetsMethodDescriptor              = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("AssumeRoleChainTargets")
	clusterControlPlaneServiceCertificateAuthorityDataMethodDescriptor            = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("CertificateAuthorityData")
	clusterControlPlaneServiceEKSBearerTokenMethodDescriptor                      = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("EKSBearerToken")
	clusterControlPlaneServiceListRepositoriesForRegistryMethodDescriptor         = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("ListRepositoriesForRegistry")
	clusterControlPlaneServiceListImagesForRepositoryMethodDescriptor             = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("ListImagesForRepository")
	clusterControlPlaneServiceListDatastoresMethodDescriptor                      = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("ListDatastores")
	clusterControlPlaneServiceDatastoreStatusMethodDescriptor                     = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("DatastoreStatus")
	clusterControlPlaneServiceRegistryStatusMethodDescriptor                      = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("RegistryStatus")
	clusterControlPlaneServiceEnableExternalEnvGroupProvidersMethodDescriptor     = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("EnableExternalEnvGroupProviders")
	clusterControlPlaneServiceAreExternalEnvGroupProvidersEnabledMethodDescriptor = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("AreExternalEnvGroupProvidersEnabled")
	clusterControlPlaneServiceCreateOrUpdateEnvGroupMethodDescriptor              = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("CreateOrUpdateEnvGroup")
	clusterControlPlaneServiceDeleteEnvGroupMethodDescriptor                      = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("DeleteEnvGroup")
	clusterControlPlaneServiceAppsLinkedToEnvGroupMethodDescriptor                = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("AppsLinkedToEnvGroup")
	clusterControlPlaneServiceListEnvGroupsMethodDescriptor                       = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("ListEnvGroups")
	clusterControlPlaneServiceUpdateNotificationConfigMethodDescriptor            = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("UpdateNotificationConfig")
	clusterControlPlaneServiceNotificationConfigMethodDescriptor                  = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("NotificationConfig")
	clusterControlPlaneServiceSystemStatusHistoryMethodDescriptor                 = clusterControlPlaneServiceServiceDescriptor.Methods().ByName("SystemStatusHistory")
)

// ClusterControlPlaneServiceClient is a client for the porter.v1.ClusterControlPlaneService
// service.
type ClusterControlPlaneServiceClient interface {
	MachineTypes(context.Context, *connect.Request[v1.MachineTypesRequest]) (*connect.Response[v1.MachineTypesResponse], error)
	// QuotaIncrease will auto request increases to the quota in a specific region given a list of quotas
	QuotaIncrease(context.Context, *connect.Request[v1.QuotaIncreaseRequest]) (*connect.Response[v1.QuotaIncreaseResponse], error)
	// UpdateCloudProviderCredentials creates or updates the credentials used for accessing the specific cloud
	UpdateCloudProviderCredentials(context.Context, *connect.Request[v1.UpdateCloudProviderCredentialsRequest]) (*connect.Response[v1.UpdateCloudProviderCredentialsResponse], error)
	// QuotaPreflightCheck checks if the target account and region has sufficient resources (EIP addresses and VPCs) to provision a new cluster
	//
	// Deprecated: do not use.
	QuotaPreflightCheck(context.Context, *connect.Request[v1.QuotaPreflightCheckRequest]) (*connect.Response[v1.QuotaPreflightCheckResponse], error)
	// PreflightCheck checks if the target account is able to provision a cluster
	// Deprecated: Use CloudContractPreflightCheck instead
	//
	// Deprecated: do not use.
	PreflightCheck(context.Context, *connect.Request[v1.PreflightCheckRequest]) (*connect.Response[v1.PreflightCheckResponse], error)
	// CloudContractPreflightCheck runs preflight checks on the target account to ensure it is able to provision the resources defined in the contract.
	// It returns a list of failing checks that must be resolved before  can be provisioned.
	CloudContractPreflightCheck(context.Context, *connect.Request[v1.CloudContractPreflightCheckRequest]) (*connect.Response[v1.CloudContractPreflightCheckResponse], error)
	// CreateAssumeRoleChain creates a new assume role chain for a given project and checks if the target assumed role has sufficient permissions. Use UpdateCloudProviderCredentials instead.
	//
	// Deprecated: do not use.
	CreateAssumeRoleChain(context.Context, *connect.Request[v1.CreateAssumeRoleChainRequest]) (*connect.Response[v1.CreateAssumeRoleChainResponse], error)
	// SaveAzureCredentials stores the new azure service principal credentials and creates the azure cluster identity. Deprecated. Use UpdateCloudProviderCredentials instead.
	//
	// Deprecated: do not use.
	SaveAzureCredentials(context.Context, *connect.Request[v1.SaveAzureCredentialsRequest]) (*connect.Response[v1.SaveAzureCredentialsResponse], error)
	// KubeConfigForCluster gets a valid kubeconfig from the management cluster, for a given workload cluster
	KubeConfigForCluster(context.Context, *connect.Request[v1.KubeConfigForClusterRequest]) (*connect.Response[v1.KubeConfigForClusterResponse], error)
	// UpdateContract takes in a Porter Contract, actioning upon it where necessary
	UpdateContract(context.Context, *connect.Request[v1.UpdateContractRequest]) (*connect.Response[v1.UpdateContractResponse], error)
	// ReadContract returns the base64 encoded contract for a given cluster and project
	ReadContract(context.Context, *connect.Request[v1.ReadContractRequest]) (*connect.Response[v1.ReadContractResponse], error)
	// ClusterStatus returns the status of a given workload cluster
	ClusterStatus(context.Context, *connect.Request[v1.ClusterStatusRequest]) (*connect.Response[v1.ClusterStatusResponse], error)
	// DeleteCluster uninstalls system components from a given workload cluster before deleting it.
	// This should ultimately be wrapped into UpdateContract
	DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error)
	// TokenForRegistry returns a token for accessing a given registry
	TokenForRegistry(context.Context, *connect.Request[v1.TokenForRegistryRequest]) (*connect.Response[v1.TokenForRegistryResponse], error)
	// ContractComplianceChecks returns the current status of the compliance checks for a given cluster and project
	ContractComplianceChecks(context.Context, *connect.Request[v1.ContractComplianceChecksRequest]) (*connect.Response[v1.ContractComplianceChecksResponse], error)
	// ValidatePorterApp validates and hydrates a definition of a porter app, based on the porter.yaml file
	// Deprecated: Use UpdateApp instead
	//
	// Deprecated: do not use.
	ValidatePorterApp(context.Context, *connect.Request[v1.ValidatePorterAppRequest]) (*connect.Response[v1.ValidatePorterAppResponse], error)
	// ApplyPorterApp applies a porter app as defined by the provided porter.yaml file to a given deployment id
	// Deprecated: Use UpdateApp instead
	//
	// Deprecated: do not use.
	ApplyPorterApp(context.Context, *connect.Request[v1.ApplyPorterAppRequest]) (*connect.Response[v1.ApplyPorterAppResponse], error)
	// UpdateApp hydrates a definition of a porter app, and takes necessary actions to update the app on the cluster
	UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error)
	// UpdateAddon hydrates a definition of a porter add-on, and takes necessary actions to update the add-on on the cluster
	UpdateAddon(context.Context, *connect.Request[v1.UpdateAddonRequest]) (*connect.Response[v1.UpdateAddonResponse], error)
	// DeleteAddon deletes a porter-addon
	DeleteAddon(context.Context, *connect.Request[v1.DeleteAddonRequest]) (*connect.Response[v1.DeleteAddonResponse], error)
	// RollbackRevision reverts an app to the previous revision, or optionally to the revision specified
	RollbackRevision(context.Context, *connect.Request[v1.RollbackRevisionRequest]) (*connect.Response[v1.RollbackRevisionResponse], error)
	// UpdateRevisionStatus updates the status of a revision
	UpdateRevisionStatus(context.Context, *connect.Request[v1.UpdateRevisionStatusRequest]) (*connect.Response[v1.UpdateRevisionStatusResponse], error)
	// AppRevisionStatus returns the status of a revision
	AppRevisionStatus(context.Context, *connect.Request[v1.AppRevisionStatusRequest]) (*connect.Response[v1.AppRevisionStatusResponse], error)
	// DeletePorterApp deletes all instances of a porter app across deployment targets in a given project
	DeletePorterApp(context.Context, *connect.Request[v1.DeletePorterAppRequest]) (*connect.Response[v1.DeletePorterAppResponse], error)
	// DeleteAppDeployment deletes a porter app from a given deployment target
	DeleteAppDeployment(context.Context, *connect.Request[v1.DeleteAppDeploymentRequest]) (*connect.Response[v1.DeleteAppDeploymentResponse], error)
	// DeleteDeploymentTarget deletes a deployment target from a given cluster
	DeleteDeploymentTarget(context.Context, *connect.Request[v1.DeleteDeploymentTargetRequest]) (*connect.Response[v1.DeleteDeploymentTargetResponse], error)
	// CurrentAppRevision returns the currently deployed app revision for a given porter_app and deployment_target
	CurrentAppRevision(context.Context, *connect.Request[v1.CurrentAppRevisionRequest]) (*connect.Response[v1.CurrentAppRevisionResponse], error)
	ListAppRevisions(context.Context, *connect.Request[v1.ListAppRevisionsRequest]) (*connect.Response[v1.ListAppRevisionsResponse], error)
	// LatestAppRevisions returns the currently deployed app revisions for a given deployment_target
	LatestAppRevisions(context.Context, *connect.Request[v1.LatestAppRevisionsRequest]) (*connect.Response[v1.LatestAppRevisionsResponse], error)
	// GetAppRevision returns the app revision for a given app revision id
	GetAppRevision(context.Context, *connect.Request[v1.GetAppRevisionRequest]) (*connect.Response[v1.GetAppRevisionResponse], error)
	// AppTemplate returns the app template for a given app id
	AppTemplate(context.Context, *connect.Request[v1.AppTemplateRequest]) (*connect.Response[v1.AppTemplateResponse], error)
	// UpdateAppTemplate updates the app template for a given app
	UpdateAppTemplate(context.Context, *connect.Request[v1.UpdateAppTemplateRequest]) (*connect.Response[v1.UpdateAppTemplateResponse], error)
	// LatestAddons returns the currently deployed addons for a given deployment_target
	LatestAddons(context.Context, *connect.Request[v1.LatestAddonsRequest]) (*connect.Response[v1.LatestAddonsResponse], error)
	// PredeployStatus returns the status of the predeploy job for a given app revision
	PredeployStatus(context.Context, *connect.Request[v1.PredeployStatusRequest]) (*connect.Response[v1.PredeployStatusResponse], error)
	// DeploymentTargetDetails returns the details of a deployment target job given the id.  This is a work-around to moving all namespace-related
	// logic to CCP and should only be used to support metrics and logging (and confirming cluster RBAC). This will fail once
	// we start using deployment targets that do not have a selector kind of "namespace"
	DeploymentTargetDetails(context.Context, *connect.Request[v1.DeploymentTargetDetailsRequest]) (*connect.Response[v1.DeploymentTargetDetailsResponse], error)
	// CreateDeploymentTarget creates a new deployment target for a given cluster, returning the deployment target id. If a deployment target with the same name already exists with
	// the same namespace, cluster and preview status, the existing deployment target ID will be returned. Otherwise, an error will be returned.
	CreateDeploymentTarget(context.Context, *connect.Request[v1.CreateDeploymentTargetRequest]) (*connect.Response[v1.CreateDeploymentTargetResponse], error)
	// DeploymentTargets returns all of the deployment targets for a given project
	DeploymentTargets(context.Context, *connect.Request[v1.DeploymentTargetsRequest]) (*connect.Response[v1.DeploymentTargetsResponse], error)
	// DefaultDeploymentTarget returns the default deployment target for a given cluster
	DefaultDeploymentTarget(context.Context, *connect.Request[v1.DefaultDeploymentTargetRequest]) (*connect.Response[v1.DefaultDeploymentTargetResponse], error)
	// SeedAppRevision seeds app revisions for a given project id, cluster id, release name, namespace.  It should only be called
	// from the Cluster Control Plane CLI and should be removed once all legacy users are migrated to the new apply validate.
	SeedAppRevisions(context.Context, *connect.Request[v1.SeedAppRevisionsRequest]) (*connect.Response[v1.SeedAppRevisionsResponse], error)
	// EnvGroupVariables returns the variables for a given env group name and version
	EnvGroupVariables(context.Context, *connect.Request[v1.EnvGroupVariablesRequest]) (*connect.Response[v1.EnvGroupVariablesResponse], error)
	// LatestEnvGroupWithVariables returns the latest env group and variables for a given env group name in the given deployment target
	LatestEnvGroupWithVariables(context.Context, *connect.Request[v1.LatestEnvGroupWithVariablesRequest]) (*connect.Response[v1.LatestEnvGroupWithVariablesResponse], error)
	// AppEnvVariables returns the latest env variables for a given app in the given deployment target
	AppEnvVariables(context.Context, *connect.Request[v1.AppEnvVariablesRequest]) (*connect.Response[v1.AppEnvVariablesResponse], error)
	// UpdateAppImage updates the image of a porter app and applies the new app revision to the deployment target.
	UpdateAppImage(context.Context, *connect.Request[v1.UpdateAppImageRequest]) (*connect.Response[v1.UpdateAppImageResponse], error)
	// UpdateAppBuildSettings updates the build settings for an app
	UpdateAppBuildSettings(context.Context, *connect.Request[v1.UpdateAppBuildSettingsRequest]) (*connect.Response[v1.UpdateAppBuildSettingsResponse], error)
	// UpdateAppsLinkedToEnvGroup updates all apps that are linked to a given env group
	UpdateAppsLinkedToEnvGroup(context.Context, *connect.Request[v1.UpdateAppsLinkedToEnvGroupRequest]) (*connect.Response[v1.UpdateAppsLinkedToEnvGroupResponse], error)
	// AppHelmValues retrieves the raw helm values used to install an app on the cluster.
	AppHelmValues(context.Context, *connect.Request[v1.AppHelmValuesRequest]) (*connect.Response[v1.AppHelmValuesResponse], error)
	// ManualServiceRun creates a pod/job with the same spec as the provided service (as defined in the latest app revision)
	// and runs the provided command, or if no command is provided, runs the command defined for the service.
	ManualServiceRun(context.Context, *connect.Request[v1.ManualServiceRunRequest]) (*connect.Response[v1.ManualServiceRunResponse], error)
	// CancelJobRun cancels a job run for a given app and job service in the provided deployment target
	CancelJobRun(context.Context, *connect.Request[v1.CancelJobRunRequest]) (*connect.Response[v1.CancelJobRunResponse], error)
	// JobRunStatus returns the status of a given job run
	JobRunStatus(context.Context, *connect.Request[v1.JobRunStatusRequest]) (*connect.Response[v1.JobRunStatusResponse], error)
	// JobRuns returns the job runs for a given app and job service in the provided deployment target
	JobRuns(context.Context, *connect.Request[v1.JobRunsRequest]) (*connect.Response[v1.JobRunsResponse], error)
	// ClusterNetworkSettings gets the network settings (region, subnets, vpc) for a given project/cluster combination
	ClusterNetworkSettings(context.Context, *connect.Request[v1.ClusterNetworkSettingsRequest]) (*connect.Response[v1.ClusterNetworkSettingsResponse], error)
	// SharedNetworkSettings gets the network settings (region, subnets, vpc) for a given project/cluster/service combination
	SharedNetworkSettings(context.Context, *connect.Request[v1.SharedNetworkSettingsRequest]) (*connect.Response[v1.SharedNetworkSettingsResponse], error)
	// Images returns images matching provided filter parameters
	Images(context.Context, *connect.Request[v1.ImagesRequest]) (*connect.Response[v1.ImagesResponse], error)
	// CreateAppInstance creates a new app instance for a given name and deployment target. If an app instance with the same name and deployment target already exists, the existing app instance ID will be returned.
	CreateAppInstance(context.Context, *connect.Request[v1.CreateAppInstanceRequest]) (*connect.Response[v1.CreateAppInstanceResponse], error)
	// DeleteAppInstance deletes an app instance and all associated revisions.
	DeleteAppInstance(context.Context, *connect.Request[v1.DeleteAppInstanceRequest]) (*connect.Response[v1.DeleteAppInstanceResponse], error)
	// ListAppInstances lists app instance in a project (and deployment target if provided).
	ListAppInstances(context.Context, *connect.Request[v1.ListAppInstancesRequest]) (*connect.Response[v1.ListAppInstancesResponse], error)
	// TemplateAppManifests returns the manifests for a given app template
	TemplateAppManifests(context.Context, *connect.Request[v1.TemplateAppManifestsRequest]) (*connect.Response[v1.TemplateAppManifestsResponse], error)
	// CreateNotification creates a notification for a porter app and service at a given app revision
	CreateNotification(context.Context, *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error)
	// RecordPrometheusAlert records a prometheus alert and generates slack notifications when appropriate
	RecordPrometheusAlert(context.Context, *connect.Request[v1.RecordPrometheusAlertRequest]) (*connect.Response[v1.RecordPrometheusAlertResponse], error)
	// UpdateServiceDeploymentStatus updates the current deployment status of a service with a new status
	UpdateServiceDeploymentStatus(context.Context, *connect.Request[v1.UpdateServiceDeploymentStatusRequest]) (*connect.Response[v1.UpdateServiceDeploymentStatusResponse], error)
	// ConnectHostedProject connects a hosted project to a host cluster, returning the cluster id of the symbolic cluster associated with this project that is linked to the host cluster
	ConnectHostedProject(context.Context, *connect.Request[v1.ConnectHostedProjectRequest]) (*connect.Response[v1.ConnectHostedProjectResponse], error)
	// UpdateDatastore updates a porter-managed datastore
	UpdateDatastore(context.Context, *connect.Request[v1.UpdateDatastoreRequest]) (*connect.Response[v1.UpdateDatastoreResponse], error)
	// DeleteDatastore deletes a porter-managed datastore
	DeleteDatastore(context.Context, *connect.Request[v1.DeleteDatastoreRequest]) (*connect.Response[v1.DeleteDatastoreResponse], error)
	// CreateDatastoreProxy creates a proxy for connecting to a datastore
	CreateDatastoreProxy(context.Context, *connect.Request[v1.CreateDatastoreProxyRequest]) (*connect.Response[v1.CreateDatastoreProxyResponse], error)
	// DatastoreCredential returns the set of credentials for connecting to a datastore
	DatastoreCredential(context.Context, *connect.Request[v1.DatastoreCredentialRequest]) (*connect.Response[v1.DatastoreCredentialResponse], error)
	// CloudProviderPermissionsStatus returns the status to poll after a user grants cloud provider permissions to Porter
	CloudProviderPermissionsStatus(context.Context, *connect.Request[v1.CloudProviderPermissionsStatusRequest]) (*connect.Response[v1.CloudProviderPermissionsStatusResponse], error)
	// PatchCloudContract patches a cloud contract by modifying its resources
	PatchCloudContract(context.Context, *connect.Request[v1.PatchCloudContractRequest]) (*connect.Response[v1.PatchCloudContractResponse], error)
	// ReadCloudContract returns a cloud contract
	ReadCloudContract(context.Context, *connect.Request[v1.ReadCloudContractRequest]) (*connect.Response[v1.ReadCloudContractResponse], error)
	// DockerConfigFileForRegistry returns a stringified config.json for accessing a given registry.
	// Deprecated. Use TokenForRegistry instead.
	//
	// Deprecated: do not use.
	DockerConfigFileForRegistry(context.Context, *connect.Request[v1.DockerConfigFileForRegistryRequest]) (*connect.Response[v1.DockerConfigFileForRegistryResponse], error)
	// ECRTokenForRegistry returns a docker-compatible token for accessing a given ECR registry.
	// This cannot be deleted before TokenForRegistry supports AWS and we edit RegistryGetECRTokenHandler to call that endpoint.
	// Deprecated. Use TokenForRegistry instead.
	//
	// Deprecated: do not use.
	ECRTokenForRegistry(context.Context, *connect.Request[v1.ECRTokenForRegistryRequest]) (*connect.Response[v1.ECRTokenForRegistryResponse], error)
	// AssumeRoleCredentials should be used vary sparingly, and ONLY for replacing AWS Integrations which have no workaround on the Porter API.
	// This endpoint returns temporary AWS credentials for a given AWS Account ID, and should not be expanded further to allow specifc role selection without being tied to a project and cluster.
	// Deprecated. This is no longer needed once ListRepositoriesForRegistry, ListImages, and CreateRepository supports AWS
	//
	// Deprecated: do not use.
	AssumeRoleCredentials(context.Context, *connect.Request[v1.AssumeRoleCredentialsRequest]) (*connect.Response[v1.AssumeRoleCredentialsResponse], error)
	// AssumeRoleChainTargets gets the final destination target_arns for a given project.
	// Deprecated. Do not use.
	//
	// Deprecated: do not use.
	AssumeRoleChainTargets(context.Context, *connect.Request[v1.AssumeRoleChainTargetsRequest]) (*connect.Response[v1.AssumeRoleChainTargetsResponse], error)
	// CertificateAuthorityData gets the certificate authority data for a customer cluster
	//
	// Deprecated: do not use.
	CertificateAuthorityData(context.Context, *connect.Request[v1.CertificateAuthorityDataRequest]) (*connect.Response[v1.CertificateAuthorityDataResponse], error)
	// EKSBearerToken gets a bearer token for programatic access to an EKS cluster's kubernetes API.
	// Deprecated. Use KubeConfigForCluster instead.
	//
	// Deprecated: do not use.
	EKSBearerToken(context.Context, *connect.Request[v1.EKSBearerTokenRequest]) (*connect.Response[v1.EKSBearerTokenResponse], error)
	// ListRepositoriesForRegistry lists the repositories for a given registry, provided it is in the scope of the project id
	// Deprecated. Use Images instead.
	//
	// Deprecated: do not use.
	ListRepositoriesForRegistry(context.Context, *connect.Request[v1.ListRepositoriesForRegistryRequest]) (*connect.Response[v1.ListRepositoriesForRegistryResponse], error)
	// ListImagesForRepository lists the repositories for a given registry, provided it is in the scope of the project id
	// Deprecated. Use Images instead.
	//
	// Deprecated: do not use.
	ListImagesForRepository(context.Context, *connect.Request[v1.ListImagesForRepositoryRequest]) (*connect.Response[v1.ListImagesForRepositoryResponse], error)
	// ListDatastores returns a list of datastores for a project and account scope
	ListDatastores(context.Context, *connect.Request[v1.ListDatastoresRequest]) (*connect.Response[v1.ListDatastoresResponse], error)
	// DatastoreStatus returns the status of a given datastore within a project and cluster scope
	// Deprecated. Use ListDatastores with the proper filtering instead.
	//
	// Deprecated: do not use.
	DatastoreStatus(context.Context, *connect.Request[v1.DatastoreStatusRequest]) (*connect.Response[v1.DatastoreStatusResponse], error)
	// RegistryStatus returns the status of a given docker registry within a project scope
	RegistryStatus(context.Context, *connect.Request[v1.RegistryStatusRequest]) (*connect.Response[v1.RegistryStatusResponse], error)
	// EnableExternalEnvGroupProvider will enable support for external env group providers on the cluster
	EnableExternalEnvGroupProviders(context.Context, *connect.Request[v1.EnableExternalEnvGroupProvidersRequest]) (*connect.Response[v1.EnableExternalEnvGroupProvidersResponse], error)
	// AreExternalEnvGroupProviderEnabled will return whether external env group providers are enabled on the cluster
	AreExternalEnvGroupProvidersEnabled(context.Context, *connect.Request[v1.AreExternalEnvGroupProvidersEnabledRequest]) (*connect.Response[v1.AreExternalEnvGroupProvidersEnabledResponse], error)
	// CreateOrUpdateEnvGroup will create or update an env group
	CreateOrUpdateEnvGroup(context.Context, *connect.Request[v1.CreateOrUpdateEnvGroupRequest]) (*connect.Response[v1.CreateOrUpdateEnvGroupResponse], error)
	// DeleteEnvGroup will delete an env group
	DeleteEnvGroup(context.Context, *connect.Request[v1.DeleteEnvGroupRequest]) (*connect.Response[v1.DeleteEnvGroupResponse], error)
	// AppsLinkedToEnvGroup returns the list of app names linked to a given env group.  Note: this should be deprecated in the future in favor of a higher-level ListEnvGroups API (POR-2182)
	AppsLinkedToEnvGroup(context.Context, *connect.Request[v1.AppsLinkedToEnvGroupRequest]) (*connect.Response[v1.AppsLinkedToEnvGroupResponse], error)
	// ListEnvGroups returns the list of env groups configured on a cluster
	ListEnvGroups(context.Context, *connect.Request[v1.ListEnvGroupsRequest]) (*connect.Response[v1.ListEnvGroupsResponse], error)
	// UpdateNotificationConfig updates the notification config for a given id, or creates a new one if no id is provided
	UpdateNotificationConfig(context.Context, *connect.Request[v1.UpdateNotificationConfigRequest]) (*connect.Response[v1.UpdateNotificationConfigResponse], error)
	// NotificationConfig gets the notification config for a given id
	NotificationConfig(context.Context, *connect.Request[v1.NotificationConfigRequest]) (*connect.Response[v1.NotificationConfigResponse], error)
	// SystemStatusHistory fetches the system status history in a cluster
	SystemStatusHistory(context.Context, *connect.Request[v1.SystemStatusHistoryRequest]) (*connect.Response[v1.SystemStatusHistoryResponse], error)
}

// NewClusterControlPlaneServiceClient constructs a client for the
// porter.v1.ClusterControlPlaneService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterControlPlaneServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClusterControlPlaneServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &clusterControlPlaneServiceClient{
		machineTypes: connect.NewClient[v1.MachineTypesRequest, v1.MachineTypesResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceMachineTypesProcedure,
			connect.WithSchema(clusterControlPlaneServiceMachineTypesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		quotaIncrease: connect.NewClient[v1.QuotaIncreaseRequest, v1.QuotaIncreaseResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceQuotaIncreaseProcedure,
			connect.WithSchema(clusterControlPlaneServiceQuotaIncreaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateCloudProviderCredentials: connect.NewClient[v1.UpdateCloudProviderCredentialsRequest, v1.UpdateCloudProviderCredentialsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateCloudProviderCredentialsProcedure,
			connect.WithSchema(clusterControlPlaneServiceUpdateCloudProviderCredentialsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		quotaPreflightCheck: connect.NewClient[v1.QuotaPreflightCheckRequest, v1.QuotaPreflightCheckResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceQuotaPreflightCheckProcedure,
			connect.WithSchema(clusterControlPlaneServiceQuotaPreflightCheckMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		preflightCheck: connect.NewClient[v1.PreflightCheckRequest, v1.PreflightCheckResponse](
			httpClient,
			baseURL+ClusterControlPlaneServicePreflightCheckProcedure,
			connect.WithSchema(clusterControlPlaneServicePreflightCheckMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cloudContractPreflightCheck: connect.NewClient[v1.CloudContractPreflightCheckRequest, v1.CloudContractPreflightCheckResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCloudContractPreflightCheckProcedure,
			connect.WithSchema(clusterControlPlaneServiceCloudContractPreflightCheckMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createAssumeRoleChain: connect.NewClient[v1.CreateAssumeRoleChainRequest, v1.CreateAssumeRoleChainResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCreateAssumeRoleChainProcedure,
			connect.WithSchema(clusterControlPlaneServiceCreateAssumeRoleChainMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		saveAzureCredentials: connect.NewClient[v1.SaveAzureCredentialsRequest, v1.SaveAzureCredentialsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceSaveAzureCredentialsProcedure,
			connect.WithSchema(clusterControlPlaneServiceSaveAzureCredentialsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		kubeConfigForCluster: connect.NewClient[v1.KubeConfigForClusterRequest, v1.KubeConfigForClusterResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceKubeConfigForClusterProcedure,
			connect.WithSchema(clusterControlPlaneServiceKubeConfigForClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateContract: connect.NewClient[v1.UpdateContractRequest, v1.UpdateContractResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateContractProcedure,
			connect.WithSchema(clusterControlPlaneServiceUpdateContractMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		readContract: connect.NewClient[v1.ReadContractRequest, v1.ReadContractResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceReadContractProcedure,
			connect.WithSchema(clusterControlPlaneServiceReadContractMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		clusterStatus: connect.NewClient[v1.ClusterStatusRequest, v1.ClusterStatusResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceClusterStatusProcedure,
			connect.WithSchema(clusterControlPlaneServiceClusterStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteCluster: connect.NewClient[v1.DeleteClusterRequest, v1.DeleteClusterResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeleteClusterProcedure,
			connect.WithSchema(clusterControlPlaneServiceDeleteClusterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		tokenForRegistry: connect.NewClient[v1.TokenForRegistryRequest, v1.TokenForRegistryResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceTokenForRegistryProcedure,
			connect.WithSchema(clusterControlPlaneServiceTokenForRegistryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contractComplianceChecks: connect.NewClient[v1.ContractComplianceChecksRequest, v1.ContractComplianceChecksResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceContractComplianceChecksProcedure,
			connect.WithSchema(clusterControlPlaneServiceContractComplianceChecksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		validatePorterApp: connect.NewClient[v1.ValidatePorterAppRequest, v1.ValidatePorterAppResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceValidatePorterAppProcedure,
			connect.WithSchema(clusterControlPlaneServiceValidatePorterAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		applyPorterApp: connect.NewClient[v1.ApplyPorterAppRequest, v1.ApplyPorterAppResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceApplyPorterAppProcedure,
			connect.WithSchema(clusterControlPlaneServiceApplyPorterAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateApp: connect.NewClient[v1.UpdateAppRequest, v1.UpdateAppResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateAppProcedure,
			connect.WithSchema(clusterControlPlaneServiceUpdateAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAddon: connect.NewClient[v1.UpdateAddonRequest, v1.UpdateAddonResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateAddonProcedure,
			connect.WithSchema(clusterControlPlaneServiceUpdateAddonMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAddon: connect.NewClient[v1.DeleteAddonRequest, v1.DeleteAddonResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeleteAddonProcedure,
			connect.WithSchema(clusterControlPlaneServiceDeleteAddonMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		rollbackRevision: connect.NewClient[v1.RollbackRevisionRequest, v1.RollbackRevisionResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceRollbackRevisionProcedure,
			connect.WithSchema(clusterControlPlaneServiceRollbackRevisionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateRevisionStatus: connect.NewClient[v1.UpdateRevisionStatusRequest, v1.UpdateRevisionStatusResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateRevisionStatusProcedure,
			connect.WithSchema(clusterControlPlaneServiceUpdateRevisionStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		appRevisionStatus: connect.NewClient[v1.AppRevisionStatusRequest, v1.AppRevisionStatusResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceAppRevisionStatusProcedure,
			connect.WithSchema(clusterControlPlaneServiceAppRevisionStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deletePorterApp: connect.NewClient[v1.DeletePorterAppRequest, v1.DeletePorterAppResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeletePorterAppProcedure,
			connect.WithSchema(clusterControlPlaneServiceDeletePorterAppMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAppDeployment: connect.NewClient[v1.DeleteAppDeploymentRequest, v1.DeleteAppDeploymentResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeleteAppDeploymentProcedure,
			connect.WithSchema(clusterControlPlaneServiceDeleteAppDeploymentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteDeploymentTarget: connect.NewClient[v1.DeleteDeploymentTargetRequest, v1.DeleteDeploymentTargetResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeleteDeploymentTargetProcedure,
			connect.WithSchema(clusterControlPlaneServiceDeleteDeploymentTargetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		currentAppRevision: connect.NewClient[v1.CurrentAppRevisionRequest, v1.CurrentAppRevisionResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCurrentAppRevisionProcedure,
			connect.WithSchema(clusterControlPlaneServiceCurrentAppRevisionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAppRevisions: connect.NewClient[v1.ListAppRevisionsRequest, v1.ListAppRevisionsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceListAppRevisionsProcedure,
			connect.WithSchema(clusterControlPlaneServiceListAppRevisionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		latestAppRevisions: connect.NewClient[v1.LatestAppRevisionsRequest, v1.LatestAppRevisionsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceLatestAppRevisionsProcedure,
			connect.WithSchema(clusterControlPlaneServiceLatestAppRevisionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAppRevision: connect.NewClient[v1.GetAppRevisionRequest, v1.GetAppRevisionResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceGetAppRevisionProcedure,
			connect.WithSchema(clusterControlPlaneServiceGetAppRevisionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		appTemplate: connect.NewClient[v1.AppTemplateRequest, v1.AppTemplateResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceAppTemplateProcedure,
			connect.WithSchema(clusterControlPlaneServiceAppTemplateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAppTemplate: connect.NewClient[v1.UpdateAppTemplateRequest, v1.UpdateAppTemplateResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateAppTemplateProcedure,
			connect.WithSchema(clusterControlPlaneServiceUpdateAppTemplateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		latestAddons: connect.NewClient[v1.LatestAddonsRequest, v1.LatestAddonsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceLatestAddonsProcedure,
			connect.WithSchema(clusterControlPlaneServiceLatestAddonsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		predeployStatus: connect.NewClient[v1.PredeployStatusRequest, v1.PredeployStatusResponse](
			httpClient,
			baseURL+ClusterControlPlaneServicePredeployStatusProcedure,
			connect.WithSchema(clusterControlPlaneServicePredeployStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deploymentTargetDetails: connect.NewClient[v1.DeploymentTargetDetailsRequest, v1.DeploymentTargetDetailsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeploymentTargetDetailsProcedure,
			connect.WithSchema(clusterControlPlaneServiceDeploymentTargetDetailsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createDeploymentTarget: connect.NewClient[v1.CreateDeploymentTargetRequest, v1.CreateDeploymentTargetResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCreateDeploymentTargetProcedure,
			connect.WithSchema(clusterControlPlaneServiceCreateDeploymentTargetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deploymentTargets: connect.NewClient[v1.DeploymentTargetsRequest, v1.DeploymentTargetsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeploymentTargetsProcedure,
			connect.WithSchema(clusterControlPlaneServiceDeploymentTargetsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		defaultDeploymentTarget: connect.NewClient[v1.DefaultDeploymentTargetRequest, v1.DefaultDeploymentTargetResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDefaultDeploymentTargetProcedure,
			connect.WithSchema(clusterControlPlaneServiceDefaultDeploymentTargetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		seedAppRevisions: connect.NewClient[v1.SeedAppRevisionsRequest, v1.SeedAppRevisionsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceSeedAppRevisionsProcedure,
			connect.WithSchema(clusterControlPlaneServiceSeedAppRevisionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		envGroupVariables: connect.NewClient[v1.EnvGroupVariablesRequest, v1.EnvGroupVariablesResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceEnvGroupVariablesProcedure,
			connect.WithSchema(clusterControlPlaneServiceEnvGroupVariablesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		latestEnvGroupWithVariables: connect.NewClient[v1.LatestEnvGroupWithVariablesRequest, v1.LatestEnvGroupWithVariablesResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceLatestEnvGroupWithVariablesProcedure,
			connect.WithSchema(clusterControlPlaneServiceLatestEnvGroupWithVariablesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		appEnvVariables: connect.NewClient[v1.AppEnvVariablesRequest, v1.AppEnvVariablesResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceAppEnvVariablesProcedure,
			connect.WithSchema(clusterControlPlaneServiceAppEnvVariablesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAppImage: connect.NewClient[v1.UpdateAppImageRequest, v1.UpdateAppImageResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateAppImageProcedure,
			connect.WithSchema(clusterControlPlaneServiceUpdateAppImageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAppBuildSettings: connect.NewClient[v1.UpdateAppBuildSettingsRequest, v1.UpdateAppBuildSettingsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateAppBuildSettingsProcedure,
			connect.WithSchema(clusterControlPlaneServiceUpdateAppBuildSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAppsLinkedToEnvGroup: connect.NewClient[v1.UpdateAppsLinkedToEnvGroupRequest, v1.UpdateAppsLinkedToEnvGroupResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateAppsLinkedToEnvGroupProcedure,
			connect.WithSchema(clusterControlPlaneServiceUpdateAppsLinkedToEnvGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		appHelmValues: connect.NewClient[v1.AppHelmValuesRequest, v1.AppHelmValuesResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceAppHelmValuesProcedure,
			connect.WithSchema(clusterControlPlaneServiceAppHelmValuesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		manualServiceRun: connect.NewClient[v1.ManualServiceRunRequest, v1.ManualServiceRunResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceManualServiceRunProcedure,
			connect.WithSchema(clusterControlPlaneServiceManualServiceRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cancelJobRun: connect.NewClient[v1.CancelJobRunRequest, v1.CancelJobRunResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCancelJobRunProcedure,
			connect.WithSchema(clusterControlPlaneServiceCancelJobRunMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		jobRunStatus: connect.NewClient[v1.JobRunStatusRequest, v1.JobRunStatusResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceJobRunStatusProcedure,
			connect.WithSchema(clusterControlPlaneServiceJobRunStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		jobRuns: connect.NewClient[v1.JobRunsRequest, v1.JobRunsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceJobRunsProcedure,
			connect.WithSchema(clusterControlPlaneServiceJobRunsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		clusterNetworkSettings: connect.NewClient[v1.ClusterNetworkSettingsRequest, v1.ClusterNetworkSettingsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceClusterNetworkSettingsProcedure,
			connect.WithSchema(clusterControlPlaneServiceClusterNetworkSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sharedNetworkSettings: connect.NewClient[v1.SharedNetworkSettingsRequest, v1.SharedNetworkSettingsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceSharedNetworkSettingsProcedure,
			connect.WithSchema(clusterControlPlaneServiceSharedNetworkSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		images: connect.NewClient[v1.ImagesRequest, v1.ImagesResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceImagesProcedure,
			connect.WithSchema(clusterControlPlaneServiceImagesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createAppInstance: connect.NewClient[v1.CreateAppInstanceRequest, v1.CreateAppInstanceResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCreateAppInstanceProcedure,
			connect.WithSchema(clusterControlPlaneServiceCreateAppInstanceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAppInstance: connect.NewClient[v1.DeleteAppInstanceRequest, v1.DeleteAppInstanceResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeleteAppInstanceProcedure,
			connect.WithSchema(clusterControlPlaneServiceDeleteAppInstanceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAppInstances: connect.NewClient[v1.ListAppInstancesRequest, v1.ListAppInstancesResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceListAppInstancesProcedure,
			connect.WithSchema(clusterControlPlaneServiceListAppInstancesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		templateAppManifests: connect.NewClient[v1.TemplateAppManifestsRequest, v1.TemplateAppManifestsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceTemplateAppManifestsProcedure,
			connect.WithSchema(clusterControlPlaneServiceTemplateAppManifestsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createNotification: connect.NewClient[v1.CreateNotificationRequest, v1.CreateNotificationResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCreateNotificationProcedure,
			connect.WithSchema(clusterControlPlaneServiceCreateNotificationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		recordPrometheusAlert: connect.NewClient[v1.RecordPrometheusAlertRequest, v1.RecordPrometheusAlertResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceRecordPrometheusAlertProcedure,
			connect.WithSchema(clusterControlPlaneServiceRecordPrometheusAlertMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateServiceDeploymentStatus: connect.NewClient[v1.UpdateServiceDeploymentStatusRequest, v1.UpdateServiceDeploymentStatusResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateServiceDeploymentStatusProcedure,
			connect.WithSchema(clusterControlPlaneServiceUpdateServiceDeploymentStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		connectHostedProject: connect.NewClient[v1.ConnectHostedProjectRequest, v1.ConnectHostedProjectResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceConnectHostedProjectProcedure,
			connect.WithSchema(clusterControlPlaneServiceConnectHostedProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateDatastore: connect.NewClient[v1.UpdateDatastoreRequest, v1.UpdateDatastoreResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateDatastoreProcedure,
			connect.WithSchema(clusterControlPlaneServiceUpdateDatastoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteDatastore: connect.NewClient[v1.DeleteDatastoreRequest, v1.DeleteDatastoreResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeleteDatastoreProcedure,
			connect.WithSchema(clusterControlPlaneServiceDeleteDatastoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createDatastoreProxy: connect.NewClient[v1.CreateDatastoreProxyRequest, v1.CreateDatastoreProxyResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCreateDatastoreProxyProcedure,
			connect.WithSchema(clusterControlPlaneServiceCreateDatastoreProxyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		datastoreCredential: connect.NewClient[v1.DatastoreCredentialRequest, v1.DatastoreCredentialResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDatastoreCredentialProcedure,
			connect.WithSchema(clusterControlPlaneServiceDatastoreCredentialMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cloudProviderPermissionsStatus: connect.NewClient[v1.CloudProviderPermissionsStatusRequest, v1.CloudProviderPermissionsStatusResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCloudProviderPermissionsStatusProcedure,
			connect.WithSchema(clusterControlPlaneServiceCloudProviderPermissionsStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		patchCloudContract: connect.NewClient[v1.PatchCloudContractRequest, v1.PatchCloudContractResponse](
			httpClient,
			baseURL+ClusterControlPlaneServicePatchCloudContractProcedure,
			connect.WithSchema(clusterControlPlaneServicePatchCloudContractMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		readCloudContract: connect.NewClient[v1.ReadCloudContractRequest, v1.ReadCloudContractResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceReadCloudContractProcedure,
			connect.WithSchema(clusterControlPlaneServiceReadCloudContractMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		dockerConfigFileForRegistry: connect.NewClient[v1.DockerConfigFileForRegistryRequest, v1.DockerConfigFileForRegistryResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDockerConfigFileForRegistryProcedure,
			connect.WithSchema(clusterControlPlaneServiceDockerConfigFileForRegistryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		eCRTokenForRegistry: connect.NewClient[v1.ECRTokenForRegistryRequest, v1.ECRTokenForRegistryResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceECRTokenForRegistryProcedure,
			connect.WithSchema(clusterControlPlaneServiceECRTokenForRegistryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		assumeRoleCredentials: connect.NewClient[v1.AssumeRoleCredentialsRequest, v1.AssumeRoleCredentialsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceAssumeRoleCredentialsProcedure,
			connect.WithSchema(clusterControlPlaneServiceAssumeRoleCredentialsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		assumeRoleChainTargets: connect.NewClient[v1.AssumeRoleChainTargetsRequest, v1.AssumeRoleChainTargetsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceAssumeRoleChainTargetsProcedure,
			connect.WithSchema(clusterControlPlaneServiceAssumeRoleChainTargetsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		certificateAuthorityData: connect.NewClient[v1.CertificateAuthorityDataRequest, v1.CertificateAuthorityDataResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCertificateAuthorityDataProcedure,
			connect.WithSchema(clusterControlPlaneServiceCertificateAuthorityDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		eKSBearerToken: connect.NewClient[v1.EKSBearerTokenRequest, v1.EKSBearerTokenResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceEKSBearerTokenProcedure,
			connect.WithSchema(clusterControlPlaneServiceEKSBearerTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRepositoriesForRegistry: connect.NewClient[v1.ListRepositoriesForRegistryRequest, v1.ListRepositoriesForRegistryResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceListRepositoriesForRegistryProcedure,
			connect.WithSchema(clusterControlPlaneServiceListRepositoriesForRegistryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listImagesForRepository: connect.NewClient[v1.ListImagesForRepositoryRequest, v1.ListImagesForRepositoryResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceListImagesForRepositoryProcedure,
			connect.WithSchema(clusterControlPlaneServiceListImagesForRepositoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listDatastores: connect.NewClient[v1.ListDatastoresRequest, v1.ListDatastoresResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceListDatastoresProcedure,
			connect.WithSchema(clusterControlPlaneServiceListDatastoresMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		datastoreStatus: connect.NewClient[v1.DatastoreStatusRequest, v1.DatastoreStatusResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDatastoreStatusProcedure,
			connect.WithSchema(clusterControlPlaneServiceDatastoreStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registryStatus: connect.NewClient[v1.RegistryStatusRequest, v1.RegistryStatusResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceRegistryStatusProcedure,
			connect.WithSchema(clusterControlPlaneServiceRegistryStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		enableExternalEnvGroupProviders: connect.NewClient[v1.EnableExternalEnvGroupProvidersRequest, v1.EnableExternalEnvGroupProvidersResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceEnableExternalEnvGroupProvidersProcedure,
			connect.WithSchema(clusterControlPlaneServiceEnableExternalEnvGroupProvidersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		areExternalEnvGroupProvidersEnabled: connect.NewClient[v1.AreExternalEnvGroupProvidersEnabledRequest, v1.AreExternalEnvGroupProvidersEnabledResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceAreExternalEnvGroupProvidersEnabledProcedure,
			connect.WithSchema(clusterControlPlaneServiceAreExternalEnvGroupProvidersEnabledMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createOrUpdateEnvGroup: connect.NewClient[v1.CreateOrUpdateEnvGroupRequest, v1.CreateOrUpdateEnvGroupResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceCreateOrUpdateEnvGroupProcedure,
			connect.WithSchema(clusterControlPlaneServiceCreateOrUpdateEnvGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteEnvGroup: connect.NewClient[v1.DeleteEnvGroupRequest, v1.DeleteEnvGroupResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceDeleteEnvGroupProcedure,
			connect.WithSchema(clusterControlPlaneServiceDeleteEnvGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		appsLinkedToEnvGroup: connect.NewClient[v1.AppsLinkedToEnvGroupRequest, v1.AppsLinkedToEnvGroupResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceAppsLinkedToEnvGroupProcedure,
			connect.WithSchema(clusterControlPlaneServiceAppsLinkedToEnvGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listEnvGroups: connect.NewClient[v1.ListEnvGroupsRequest, v1.ListEnvGroupsResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceListEnvGroupsProcedure,
			connect.WithSchema(clusterControlPlaneServiceListEnvGroupsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateNotificationConfig: connect.NewClient[v1.UpdateNotificationConfigRequest, v1.UpdateNotificationConfigResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceUpdateNotificationConfigProcedure,
			connect.WithSchema(clusterControlPlaneServiceUpdateNotificationConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		notificationConfig: connect.NewClient[v1.NotificationConfigRequest, v1.NotificationConfigResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceNotificationConfigProcedure,
			connect.WithSchema(clusterControlPlaneServiceNotificationConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		systemStatusHistory: connect.NewClient[v1.SystemStatusHistoryRequest, v1.SystemStatusHistoryResponse](
			httpClient,
			baseURL+ClusterControlPlaneServiceSystemStatusHistoryProcedure,
			connect.WithSchema(clusterControlPlaneServiceSystemStatusHistoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// clusterControlPlaneServiceClient implements ClusterControlPlaneServiceClient.
type clusterControlPlaneServiceClient struct {
	machineTypes                        *connect.Client[v1.MachineTypesRequest, v1.MachineTypesResponse]
	quotaIncrease                       *connect.Client[v1.QuotaIncreaseRequest, v1.QuotaIncreaseResponse]
	updateCloudProviderCredentials      *connect.Client[v1.UpdateCloudProviderCredentialsRequest, v1.UpdateCloudProviderCredentialsResponse]
	quotaPreflightCheck                 *connect.Client[v1.QuotaPreflightCheckRequest, v1.QuotaPreflightCheckResponse]
	preflightCheck                      *connect.Client[v1.PreflightCheckRequest, v1.PreflightCheckResponse]
	cloudContractPreflightCheck         *connect.Client[v1.CloudContractPreflightCheckRequest, v1.CloudContractPreflightCheckResponse]
	createAssumeRoleChain               *connect.Client[v1.CreateAssumeRoleChainRequest, v1.CreateAssumeRoleChainResponse]
	saveAzureCredentials                *connect.Client[v1.SaveAzureCredentialsRequest, v1.SaveAzureCredentialsResponse]
	kubeConfigForCluster                *connect.Client[v1.KubeConfigForClusterRequest, v1.KubeConfigForClusterResponse]
	updateContract                      *connect.Client[v1.UpdateContractRequest, v1.UpdateContractResponse]
	readContract                        *connect.Client[v1.ReadContractRequest, v1.ReadContractResponse]
	clusterStatus                       *connect.Client[v1.ClusterStatusRequest, v1.ClusterStatusResponse]
	deleteCluster                       *connect.Client[v1.DeleteClusterRequest, v1.DeleteClusterResponse]
	tokenForRegistry                    *connect.Client[v1.TokenForRegistryRequest, v1.TokenForRegistryResponse]
	contractComplianceChecks            *connect.Client[v1.ContractComplianceChecksRequest, v1.ContractComplianceChecksResponse]
	validatePorterApp                   *connect.Client[v1.ValidatePorterAppRequest, v1.ValidatePorterAppResponse]
	applyPorterApp                      *connect.Client[v1.ApplyPorterAppRequest, v1.ApplyPorterAppResponse]
	updateApp                           *connect.Client[v1.UpdateAppRequest, v1.UpdateAppResponse]
	updateAddon                         *connect.Client[v1.UpdateAddonRequest, v1.UpdateAddonResponse]
	deleteAddon                         *connect.Client[v1.DeleteAddonRequest, v1.DeleteAddonResponse]
	rollbackRevision                    *connect.Client[v1.RollbackRevisionRequest, v1.RollbackRevisionResponse]
	updateRevisionStatus                *connect.Client[v1.UpdateRevisionStatusRequest, v1.UpdateRevisionStatusResponse]
	appRevisionStatus                   *connect.Client[v1.AppRevisionStatusRequest, v1.AppRevisionStatusResponse]
	deletePorterApp                     *connect.Client[v1.DeletePorterAppRequest, v1.DeletePorterAppResponse]
	deleteAppDeployment                 *connect.Client[v1.DeleteAppDeploymentRequest, v1.DeleteAppDeploymentResponse]
	deleteDeploymentTarget              *connect.Client[v1.DeleteDeploymentTargetRequest, v1.DeleteDeploymentTargetResponse]
	currentAppRevision                  *connect.Client[v1.CurrentAppRevisionRequest, v1.CurrentAppRevisionResponse]
	listAppRevisions                    *connect.Client[v1.ListAppRevisionsRequest, v1.ListAppRevisionsResponse]
	latestAppRevisions                  *connect.Client[v1.LatestAppRevisionsRequest, v1.LatestAppRevisionsResponse]
	getAppRevision                      *connect.Client[v1.GetAppRevisionRequest, v1.GetAppRevisionResponse]
	appTemplate                         *connect.Client[v1.AppTemplateRequest, v1.AppTemplateResponse]
	updateAppTemplate                   *connect.Client[v1.UpdateAppTemplateRequest, v1.UpdateAppTemplateResponse]
	latestAddons                        *connect.Client[v1.LatestAddonsRequest, v1.LatestAddonsResponse]
	predeployStatus                     *connect.Client[v1.PredeployStatusRequest, v1.PredeployStatusResponse]
	deploymentTargetDetails             *connect.Client[v1.DeploymentTargetDetailsRequest, v1.DeploymentTargetDetailsResponse]
	createDeploymentTarget              *connect.Client[v1.CreateDeploymentTargetRequest, v1.CreateDeploymentTargetResponse]
	deploymentTargets                   *connect.Client[v1.DeploymentTargetsRequest, v1.DeploymentTargetsResponse]
	defaultDeploymentTarget             *connect.Client[v1.DefaultDeploymentTargetRequest, v1.DefaultDeploymentTargetResponse]
	seedAppRevisions                    *connect.Client[v1.SeedAppRevisionsRequest, v1.SeedAppRevisionsResponse]
	envGroupVariables                   *connect.Client[v1.EnvGroupVariablesRequest, v1.EnvGroupVariablesResponse]
	latestEnvGroupWithVariables         *connect.Client[v1.LatestEnvGroupWithVariablesRequest, v1.LatestEnvGroupWithVariablesResponse]
	appEnvVariables                     *connect.Client[v1.AppEnvVariablesRequest, v1.AppEnvVariablesResponse]
	updateAppImage                      *connect.Client[v1.UpdateAppImageRequest, v1.UpdateAppImageResponse]
	updateAppBuildSettings              *connect.Client[v1.UpdateAppBuildSettingsRequest, v1.UpdateAppBuildSettingsResponse]
	updateAppsLinkedToEnvGroup          *connect.Client[v1.UpdateAppsLinkedToEnvGroupRequest, v1.UpdateAppsLinkedToEnvGroupResponse]
	appHelmValues                       *connect.Client[v1.AppHelmValuesRequest, v1.AppHelmValuesResponse]
	manualServiceRun                    *connect.Client[v1.ManualServiceRunRequest, v1.ManualServiceRunResponse]
	cancelJobRun                        *connect.Client[v1.CancelJobRunRequest, v1.CancelJobRunResponse]
	jobRunStatus                        *connect.Client[v1.JobRunStatusRequest, v1.JobRunStatusResponse]
	jobRuns                             *connect.Client[v1.JobRunsRequest, v1.JobRunsResponse]
	clusterNetworkSettings              *connect.Client[v1.ClusterNetworkSettingsRequest, v1.ClusterNetworkSettingsResponse]
	sharedNetworkSettings               *connect.Client[v1.SharedNetworkSettingsRequest, v1.SharedNetworkSettingsResponse]
	images                              *connect.Client[v1.ImagesRequest, v1.ImagesResponse]
	createAppInstance                   *connect.Client[v1.CreateAppInstanceRequest, v1.CreateAppInstanceResponse]
	deleteAppInstance                   *connect.Client[v1.DeleteAppInstanceRequest, v1.DeleteAppInstanceResponse]
	listAppInstances                    *connect.Client[v1.ListAppInstancesRequest, v1.ListAppInstancesResponse]
	templateAppManifests                *connect.Client[v1.TemplateAppManifestsRequest, v1.TemplateAppManifestsResponse]
	createNotification                  *connect.Client[v1.CreateNotificationRequest, v1.CreateNotificationResponse]
	recordPrometheusAlert               *connect.Client[v1.RecordPrometheusAlertRequest, v1.RecordPrometheusAlertResponse]
	updateServiceDeploymentStatus       *connect.Client[v1.UpdateServiceDeploymentStatusRequest, v1.UpdateServiceDeploymentStatusResponse]
	connectHostedProject                *connect.Client[v1.ConnectHostedProjectRequest, v1.ConnectHostedProjectResponse]
	updateDatastore                     *connect.Client[v1.UpdateDatastoreRequest, v1.UpdateDatastoreResponse]
	deleteDatastore                     *connect.Client[v1.DeleteDatastoreRequest, v1.DeleteDatastoreResponse]
	createDatastoreProxy                *connect.Client[v1.CreateDatastoreProxyRequest, v1.CreateDatastoreProxyResponse]
	datastoreCredential                 *connect.Client[v1.DatastoreCredentialRequest, v1.DatastoreCredentialResponse]
	cloudProviderPermissionsStatus      *connect.Client[v1.CloudProviderPermissionsStatusRequest, v1.CloudProviderPermissionsStatusResponse]
	patchCloudContract                  *connect.Client[v1.PatchCloudContractRequest, v1.PatchCloudContractResponse]
	readCloudContract                   *connect.Client[v1.ReadCloudContractRequest, v1.ReadCloudContractResponse]
	dockerConfigFileForRegistry         *connect.Client[v1.DockerConfigFileForRegistryRequest, v1.DockerConfigFileForRegistryResponse]
	eCRTokenForRegistry                 *connect.Client[v1.ECRTokenForRegistryRequest, v1.ECRTokenForRegistryResponse]
	assumeRoleCredentials               *connect.Client[v1.AssumeRoleCredentialsRequest, v1.AssumeRoleCredentialsResponse]
	assumeRoleChainTargets              *connect.Client[v1.AssumeRoleChainTargetsRequest, v1.AssumeRoleChainTargetsResponse]
	certificateAuthorityData            *connect.Client[v1.CertificateAuthorityDataRequest, v1.CertificateAuthorityDataResponse]
	eKSBearerToken                      *connect.Client[v1.EKSBearerTokenRequest, v1.EKSBearerTokenResponse]
	listRepositoriesForRegistry         *connect.Client[v1.ListRepositoriesForRegistryRequest, v1.ListRepositoriesForRegistryResponse]
	listImagesForRepository             *connect.Client[v1.ListImagesForRepositoryRequest, v1.ListImagesForRepositoryResponse]
	listDatastores                      *connect.Client[v1.ListDatastoresRequest, v1.ListDatastoresResponse]
	datastoreStatus                     *connect.Client[v1.DatastoreStatusRequest, v1.DatastoreStatusResponse]
	registryStatus                      *connect.Client[v1.RegistryStatusRequest, v1.RegistryStatusResponse]
	enableExternalEnvGroupProviders     *connect.Client[v1.EnableExternalEnvGroupProvidersRequest, v1.EnableExternalEnvGroupProvidersResponse]
	areExternalEnvGroupProvidersEnabled *connect.Client[v1.AreExternalEnvGroupProvidersEnabledRequest, v1.AreExternalEnvGroupProvidersEnabledResponse]
	createOrUpdateEnvGroup              *connect.Client[v1.CreateOrUpdateEnvGroupRequest, v1.CreateOrUpdateEnvGroupResponse]
	deleteEnvGroup                      *connect.Client[v1.DeleteEnvGroupRequest, v1.DeleteEnvGroupResponse]
	appsLinkedToEnvGroup                *connect.Client[v1.AppsLinkedToEnvGroupRequest, v1.AppsLinkedToEnvGroupResponse]
	listEnvGroups                       *connect.Client[v1.ListEnvGroupsRequest, v1.ListEnvGroupsResponse]
	updateNotificationConfig            *connect.Client[v1.UpdateNotificationConfigRequest, v1.UpdateNotificationConfigResponse]
	notificationConfig                  *connect.Client[v1.NotificationConfigRequest, v1.NotificationConfigResponse]
	systemStatusHistory                 *connect.Client[v1.SystemStatusHistoryRequest, v1.SystemStatusHistoryResponse]
}

// MachineTypes calls porter.v1.ClusterControlPlaneService.MachineTypes.
func (c *clusterControlPlaneServiceClient) MachineTypes(ctx context.Context, req *connect.Request[v1.MachineTypesRequest]) (*connect.Response[v1.MachineTypesResponse], error) {
	return c.machineTypes.CallUnary(ctx, req)
}

// QuotaIncrease calls porter.v1.ClusterControlPlaneService.QuotaIncrease.
func (c *clusterControlPlaneServiceClient) QuotaIncrease(ctx context.Context, req *connect.Request[v1.QuotaIncreaseRequest]) (*connect.Response[v1.QuotaIncreaseResponse], error) {
	return c.quotaIncrease.CallUnary(ctx, req)
}

// UpdateCloudProviderCredentials calls
// porter.v1.ClusterControlPlaneService.UpdateCloudProviderCredentials.
func (c *clusterControlPlaneServiceClient) UpdateCloudProviderCredentials(ctx context.Context, req *connect.Request[v1.UpdateCloudProviderCredentialsRequest]) (*connect.Response[v1.UpdateCloudProviderCredentialsResponse], error) {
	return c.updateCloudProviderCredentials.CallUnary(ctx, req)
}

// QuotaPreflightCheck calls porter.v1.ClusterControlPlaneService.QuotaPreflightCheck.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) QuotaPreflightCheck(ctx context.Context, req *connect.Request[v1.QuotaPreflightCheckRequest]) (*connect.Response[v1.QuotaPreflightCheckResponse], error) {
	return c.quotaPreflightCheck.CallUnary(ctx, req)
}

// PreflightCheck calls porter.v1.ClusterControlPlaneService.PreflightCheck.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) PreflightCheck(ctx context.Context, req *connect.Request[v1.PreflightCheckRequest]) (*connect.Response[v1.PreflightCheckResponse], error) {
	return c.preflightCheck.CallUnary(ctx, req)
}

// CloudContractPreflightCheck calls
// porter.v1.ClusterControlPlaneService.CloudContractPreflightCheck.
func (c *clusterControlPlaneServiceClient) CloudContractPreflightCheck(ctx context.Context, req *connect.Request[v1.CloudContractPreflightCheckRequest]) (*connect.Response[v1.CloudContractPreflightCheckResponse], error) {
	return c.cloudContractPreflightCheck.CallUnary(ctx, req)
}

// CreateAssumeRoleChain calls porter.v1.ClusterControlPlaneService.CreateAssumeRoleChain.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) CreateAssumeRoleChain(ctx context.Context, req *connect.Request[v1.CreateAssumeRoleChainRequest]) (*connect.Response[v1.CreateAssumeRoleChainResponse], error) {
	return c.createAssumeRoleChain.CallUnary(ctx, req)
}

// SaveAzureCredentials calls porter.v1.ClusterControlPlaneService.SaveAzureCredentials.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) SaveAzureCredentials(ctx context.Context, req *connect.Request[v1.SaveAzureCredentialsRequest]) (*connect.Response[v1.SaveAzureCredentialsResponse], error) {
	return c.saveAzureCredentials.CallUnary(ctx, req)
}

// KubeConfigForCluster calls porter.v1.ClusterControlPlaneService.KubeConfigForCluster.
func (c *clusterControlPlaneServiceClient) KubeConfigForCluster(ctx context.Context, req *connect.Request[v1.KubeConfigForClusterRequest]) (*connect.Response[v1.KubeConfigForClusterResponse], error) {
	return c.kubeConfigForCluster.CallUnary(ctx, req)
}

// UpdateContract calls porter.v1.ClusterControlPlaneService.UpdateContract.
func (c *clusterControlPlaneServiceClient) UpdateContract(ctx context.Context, req *connect.Request[v1.UpdateContractRequest]) (*connect.Response[v1.UpdateContractResponse], error) {
	return c.updateContract.CallUnary(ctx, req)
}

// ReadContract calls porter.v1.ClusterControlPlaneService.ReadContract.
func (c *clusterControlPlaneServiceClient) ReadContract(ctx context.Context, req *connect.Request[v1.ReadContractRequest]) (*connect.Response[v1.ReadContractResponse], error) {
	return c.readContract.CallUnary(ctx, req)
}

// ClusterStatus calls porter.v1.ClusterControlPlaneService.ClusterStatus.
func (c *clusterControlPlaneServiceClient) ClusterStatus(ctx context.Context, req *connect.Request[v1.ClusterStatusRequest]) (*connect.Response[v1.ClusterStatusResponse], error) {
	return c.clusterStatus.CallUnary(ctx, req)
}

// DeleteCluster calls porter.v1.ClusterControlPlaneService.DeleteCluster.
func (c *clusterControlPlaneServiceClient) DeleteCluster(ctx context.Context, req *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error) {
	return c.deleteCluster.CallUnary(ctx, req)
}

// TokenForRegistry calls porter.v1.ClusterControlPlaneService.TokenForRegistry.
func (c *clusterControlPlaneServiceClient) TokenForRegistry(ctx context.Context, req *connect.Request[v1.TokenForRegistryRequest]) (*connect.Response[v1.TokenForRegistryResponse], error) {
	return c.tokenForRegistry.CallUnary(ctx, req)
}

// ContractComplianceChecks calls porter.v1.ClusterControlPlaneService.ContractComplianceChecks.
func (c *clusterControlPlaneServiceClient) ContractComplianceChecks(ctx context.Context, req *connect.Request[v1.ContractComplianceChecksRequest]) (*connect.Response[v1.ContractComplianceChecksResponse], error) {
	return c.contractComplianceChecks.CallUnary(ctx, req)
}

// ValidatePorterApp calls porter.v1.ClusterControlPlaneService.ValidatePorterApp.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) ValidatePorterApp(ctx context.Context, req *connect.Request[v1.ValidatePorterAppRequest]) (*connect.Response[v1.ValidatePorterAppResponse], error) {
	return c.validatePorterApp.CallUnary(ctx, req)
}

// ApplyPorterApp calls porter.v1.ClusterControlPlaneService.ApplyPorterApp.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) ApplyPorterApp(ctx context.Context, req *connect.Request[v1.ApplyPorterAppRequest]) (*connect.Response[v1.ApplyPorterAppResponse], error) {
	return c.applyPorterApp.CallUnary(ctx, req)
}

// UpdateApp calls porter.v1.ClusterControlPlaneService.UpdateApp.
func (c *clusterControlPlaneServiceClient) UpdateApp(ctx context.Context, req *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error) {
	return c.updateApp.CallUnary(ctx, req)
}

// UpdateAddon calls porter.v1.ClusterControlPlaneService.UpdateAddon.
func (c *clusterControlPlaneServiceClient) UpdateAddon(ctx context.Context, req *connect.Request[v1.UpdateAddonRequest]) (*connect.Response[v1.UpdateAddonResponse], error) {
	return c.updateAddon.CallUnary(ctx, req)
}

// DeleteAddon calls porter.v1.ClusterControlPlaneService.DeleteAddon.
func (c *clusterControlPlaneServiceClient) DeleteAddon(ctx context.Context, req *connect.Request[v1.DeleteAddonRequest]) (*connect.Response[v1.DeleteAddonResponse], error) {
	return c.deleteAddon.CallUnary(ctx, req)
}

// RollbackRevision calls porter.v1.ClusterControlPlaneService.RollbackRevision.
func (c *clusterControlPlaneServiceClient) RollbackRevision(ctx context.Context, req *connect.Request[v1.RollbackRevisionRequest]) (*connect.Response[v1.RollbackRevisionResponse], error) {
	return c.rollbackRevision.CallUnary(ctx, req)
}

// UpdateRevisionStatus calls porter.v1.ClusterControlPlaneService.UpdateRevisionStatus.
func (c *clusterControlPlaneServiceClient) UpdateRevisionStatus(ctx context.Context, req *connect.Request[v1.UpdateRevisionStatusRequest]) (*connect.Response[v1.UpdateRevisionStatusResponse], error) {
	return c.updateRevisionStatus.CallUnary(ctx, req)
}

// AppRevisionStatus calls porter.v1.ClusterControlPlaneService.AppRevisionStatus.
func (c *clusterControlPlaneServiceClient) AppRevisionStatus(ctx context.Context, req *connect.Request[v1.AppRevisionStatusRequest]) (*connect.Response[v1.AppRevisionStatusResponse], error) {
	return c.appRevisionStatus.CallUnary(ctx, req)
}

// DeletePorterApp calls porter.v1.ClusterControlPlaneService.DeletePorterApp.
func (c *clusterControlPlaneServiceClient) DeletePorterApp(ctx context.Context, req *connect.Request[v1.DeletePorterAppRequest]) (*connect.Response[v1.DeletePorterAppResponse], error) {
	return c.deletePorterApp.CallUnary(ctx, req)
}

// DeleteAppDeployment calls porter.v1.ClusterControlPlaneService.DeleteAppDeployment.
func (c *clusterControlPlaneServiceClient) DeleteAppDeployment(ctx context.Context, req *connect.Request[v1.DeleteAppDeploymentRequest]) (*connect.Response[v1.DeleteAppDeploymentResponse], error) {
	return c.deleteAppDeployment.CallUnary(ctx, req)
}

// DeleteDeploymentTarget calls porter.v1.ClusterControlPlaneService.DeleteDeploymentTarget.
func (c *clusterControlPlaneServiceClient) DeleteDeploymentTarget(ctx context.Context, req *connect.Request[v1.DeleteDeploymentTargetRequest]) (*connect.Response[v1.DeleteDeploymentTargetResponse], error) {
	return c.deleteDeploymentTarget.CallUnary(ctx, req)
}

// CurrentAppRevision calls porter.v1.ClusterControlPlaneService.CurrentAppRevision.
func (c *clusterControlPlaneServiceClient) CurrentAppRevision(ctx context.Context, req *connect.Request[v1.CurrentAppRevisionRequest]) (*connect.Response[v1.CurrentAppRevisionResponse], error) {
	return c.currentAppRevision.CallUnary(ctx, req)
}

// ListAppRevisions calls porter.v1.ClusterControlPlaneService.ListAppRevisions.
func (c *clusterControlPlaneServiceClient) ListAppRevisions(ctx context.Context, req *connect.Request[v1.ListAppRevisionsRequest]) (*connect.Response[v1.ListAppRevisionsResponse], error) {
	return c.listAppRevisions.CallUnary(ctx, req)
}

// LatestAppRevisions calls porter.v1.ClusterControlPlaneService.LatestAppRevisions.
func (c *clusterControlPlaneServiceClient) LatestAppRevisions(ctx context.Context, req *connect.Request[v1.LatestAppRevisionsRequest]) (*connect.Response[v1.LatestAppRevisionsResponse], error) {
	return c.latestAppRevisions.CallUnary(ctx, req)
}

// GetAppRevision calls porter.v1.ClusterControlPlaneService.GetAppRevision.
func (c *clusterControlPlaneServiceClient) GetAppRevision(ctx context.Context, req *connect.Request[v1.GetAppRevisionRequest]) (*connect.Response[v1.GetAppRevisionResponse], error) {
	return c.getAppRevision.CallUnary(ctx, req)
}

// AppTemplate calls porter.v1.ClusterControlPlaneService.AppTemplate.
func (c *clusterControlPlaneServiceClient) AppTemplate(ctx context.Context, req *connect.Request[v1.AppTemplateRequest]) (*connect.Response[v1.AppTemplateResponse], error) {
	return c.appTemplate.CallUnary(ctx, req)
}

// UpdateAppTemplate calls porter.v1.ClusterControlPlaneService.UpdateAppTemplate.
func (c *clusterControlPlaneServiceClient) UpdateAppTemplate(ctx context.Context, req *connect.Request[v1.UpdateAppTemplateRequest]) (*connect.Response[v1.UpdateAppTemplateResponse], error) {
	return c.updateAppTemplate.CallUnary(ctx, req)
}

// LatestAddons calls porter.v1.ClusterControlPlaneService.LatestAddons.
func (c *clusterControlPlaneServiceClient) LatestAddons(ctx context.Context, req *connect.Request[v1.LatestAddonsRequest]) (*connect.Response[v1.LatestAddonsResponse], error) {
	return c.latestAddons.CallUnary(ctx, req)
}

// PredeployStatus calls porter.v1.ClusterControlPlaneService.PredeployStatus.
func (c *clusterControlPlaneServiceClient) PredeployStatus(ctx context.Context, req *connect.Request[v1.PredeployStatusRequest]) (*connect.Response[v1.PredeployStatusResponse], error) {
	return c.predeployStatus.CallUnary(ctx, req)
}

// DeploymentTargetDetails calls porter.v1.ClusterControlPlaneService.DeploymentTargetDetails.
func (c *clusterControlPlaneServiceClient) DeploymentTargetDetails(ctx context.Context, req *connect.Request[v1.DeploymentTargetDetailsRequest]) (*connect.Response[v1.DeploymentTargetDetailsResponse], error) {
	return c.deploymentTargetDetails.CallUnary(ctx, req)
}

// CreateDeploymentTarget calls porter.v1.ClusterControlPlaneService.CreateDeploymentTarget.
func (c *clusterControlPlaneServiceClient) CreateDeploymentTarget(ctx context.Context, req *connect.Request[v1.CreateDeploymentTargetRequest]) (*connect.Response[v1.CreateDeploymentTargetResponse], error) {
	return c.createDeploymentTarget.CallUnary(ctx, req)
}

// DeploymentTargets calls porter.v1.ClusterControlPlaneService.DeploymentTargets.
func (c *clusterControlPlaneServiceClient) DeploymentTargets(ctx context.Context, req *connect.Request[v1.DeploymentTargetsRequest]) (*connect.Response[v1.DeploymentTargetsResponse], error) {
	return c.deploymentTargets.CallUnary(ctx, req)
}

// DefaultDeploymentTarget calls porter.v1.ClusterControlPlaneService.DefaultDeploymentTarget.
func (c *clusterControlPlaneServiceClient) DefaultDeploymentTarget(ctx context.Context, req *connect.Request[v1.DefaultDeploymentTargetRequest]) (*connect.Response[v1.DefaultDeploymentTargetResponse], error) {
	return c.defaultDeploymentTarget.CallUnary(ctx, req)
}

// SeedAppRevisions calls porter.v1.ClusterControlPlaneService.SeedAppRevisions.
func (c *clusterControlPlaneServiceClient) SeedAppRevisions(ctx context.Context, req *connect.Request[v1.SeedAppRevisionsRequest]) (*connect.Response[v1.SeedAppRevisionsResponse], error) {
	return c.seedAppRevisions.CallUnary(ctx, req)
}

// EnvGroupVariables calls porter.v1.ClusterControlPlaneService.EnvGroupVariables.
func (c *clusterControlPlaneServiceClient) EnvGroupVariables(ctx context.Context, req *connect.Request[v1.EnvGroupVariablesRequest]) (*connect.Response[v1.EnvGroupVariablesResponse], error) {
	return c.envGroupVariables.CallUnary(ctx, req)
}

// LatestEnvGroupWithVariables calls
// porter.v1.ClusterControlPlaneService.LatestEnvGroupWithVariables.
func (c *clusterControlPlaneServiceClient) LatestEnvGroupWithVariables(ctx context.Context, req *connect.Request[v1.LatestEnvGroupWithVariablesRequest]) (*connect.Response[v1.LatestEnvGroupWithVariablesResponse], error) {
	return c.latestEnvGroupWithVariables.CallUnary(ctx, req)
}

// AppEnvVariables calls porter.v1.ClusterControlPlaneService.AppEnvVariables.
func (c *clusterControlPlaneServiceClient) AppEnvVariables(ctx context.Context, req *connect.Request[v1.AppEnvVariablesRequest]) (*connect.Response[v1.AppEnvVariablesResponse], error) {
	return c.appEnvVariables.CallUnary(ctx, req)
}

// UpdateAppImage calls porter.v1.ClusterControlPlaneService.UpdateAppImage.
func (c *clusterControlPlaneServiceClient) UpdateAppImage(ctx context.Context, req *connect.Request[v1.UpdateAppImageRequest]) (*connect.Response[v1.UpdateAppImageResponse], error) {
	return c.updateAppImage.CallUnary(ctx, req)
}

// UpdateAppBuildSettings calls porter.v1.ClusterControlPlaneService.UpdateAppBuildSettings.
func (c *clusterControlPlaneServiceClient) UpdateAppBuildSettings(ctx context.Context, req *connect.Request[v1.UpdateAppBuildSettingsRequest]) (*connect.Response[v1.UpdateAppBuildSettingsResponse], error) {
	return c.updateAppBuildSettings.CallUnary(ctx, req)
}

// UpdateAppsLinkedToEnvGroup calls porter.v1.ClusterControlPlaneService.UpdateAppsLinkedToEnvGroup.
func (c *clusterControlPlaneServiceClient) UpdateAppsLinkedToEnvGroup(ctx context.Context, req *connect.Request[v1.UpdateAppsLinkedToEnvGroupRequest]) (*connect.Response[v1.UpdateAppsLinkedToEnvGroupResponse], error) {
	return c.updateAppsLinkedToEnvGroup.CallUnary(ctx, req)
}

// AppHelmValues calls porter.v1.ClusterControlPlaneService.AppHelmValues.
func (c *clusterControlPlaneServiceClient) AppHelmValues(ctx context.Context, req *connect.Request[v1.AppHelmValuesRequest]) (*connect.Response[v1.AppHelmValuesResponse], error) {
	return c.appHelmValues.CallUnary(ctx, req)
}

// ManualServiceRun calls porter.v1.ClusterControlPlaneService.ManualServiceRun.
func (c *clusterControlPlaneServiceClient) ManualServiceRun(ctx context.Context, req *connect.Request[v1.ManualServiceRunRequest]) (*connect.Response[v1.ManualServiceRunResponse], error) {
	return c.manualServiceRun.CallUnary(ctx, req)
}

// CancelJobRun calls porter.v1.ClusterControlPlaneService.CancelJobRun.
func (c *clusterControlPlaneServiceClient) CancelJobRun(ctx context.Context, req *connect.Request[v1.CancelJobRunRequest]) (*connect.Response[v1.CancelJobRunResponse], error) {
	return c.cancelJobRun.CallUnary(ctx, req)
}

// JobRunStatus calls porter.v1.ClusterControlPlaneService.JobRunStatus.
func (c *clusterControlPlaneServiceClient) JobRunStatus(ctx context.Context, req *connect.Request[v1.JobRunStatusRequest]) (*connect.Response[v1.JobRunStatusResponse], error) {
	return c.jobRunStatus.CallUnary(ctx, req)
}

// JobRuns calls porter.v1.ClusterControlPlaneService.JobRuns.
func (c *clusterControlPlaneServiceClient) JobRuns(ctx context.Context, req *connect.Request[v1.JobRunsRequest]) (*connect.Response[v1.JobRunsResponse], error) {
	return c.jobRuns.CallUnary(ctx, req)
}

// ClusterNetworkSettings calls porter.v1.ClusterControlPlaneService.ClusterNetworkSettings.
func (c *clusterControlPlaneServiceClient) ClusterNetworkSettings(ctx context.Context, req *connect.Request[v1.ClusterNetworkSettingsRequest]) (*connect.Response[v1.ClusterNetworkSettingsResponse], error) {
	return c.clusterNetworkSettings.CallUnary(ctx, req)
}

// SharedNetworkSettings calls porter.v1.ClusterControlPlaneService.SharedNetworkSettings.
func (c *clusterControlPlaneServiceClient) SharedNetworkSettings(ctx context.Context, req *connect.Request[v1.SharedNetworkSettingsRequest]) (*connect.Response[v1.SharedNetworkSettingsResponse], error) {
	return c.sharedNetworkSettings.CallUnary(ctx, req)
}

// Images calls porter.v1.ClusterControlPlaneService.Images.
func (c *clusterControlPlaneServiceClient) Images(ctx context.Context, req *connect.Request[v1.ImagesRequest]) (*connect.Response[v1.ImagesResponse], error) {
	return c.images.CallUnary(ctx, req)
}

// CreateAppInstance calls porter.v1.ClusterControlPlaneService.CreateAppInstance.
func (c *clusterControlPlaneServiceClient) CreateAppInstance(ctx context.Context, req *connect.Request[v1.CreateAppInstanceRequest]) (*connect.Response[v1.CreateAppInstanceResponse], error) {
	return c.createAppInstance.CallUnary(ctx, req)
}

// DeleteAppInstance calls porter.v1.ClusterControlPlaneService.DeleteAppInstance.
func (c *clusterControlPlaneServiceClient) DeleteAppInstance(ctx context.Context, req *connect.Request[v1.DeleteAppInstanceRequest]) (*connect.Response[v1.DeleteAppInstanceResponse], error) {
	return c.deleteAppInstance.CallUnary(ctx, req)
}

// ListAppInstances calls porter.v1.ClusterControlPlaneService.ListAppInstances.
func (c *clusterControlPlaneServiceClient) ListAppInstances(ctx context.Context, req *connect.Request[v1.ListAppInstancesRequest]) (*connect.Response[v1.ListAppInstancesResponse], error) {
	return c.listAppInstances.CallUnary(ctx, req)
}

// TemplateAppManifests calls porter.v1.ClusterControlPlaneService.TemplateAppManifests.
func (c *clusterControlPlaneServiceClient) TemplateAppManifests(ctx context.Context, req *connect.Request[v1.TemplateAppManifestsRequest]) (*connect.Response[v1.TemplateAppManifestsResponse], error) {
	return c.templateAppManifests.CallUnary(ctx, req)
}

// CreateNotification calls porter.v1.ClusterControlPlaneService.CreateNotification.
func (c *clusterControlPlaneServiceClient) CreateNotification(ctx context.Context, req *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error) {
	return c.createNotification.CallUnary(ctx, req)
}

// RecordPrometheusAlert calls porter.v1.ClusterControlPlaneService.RecordPrometheusAlert.
func (c *clusterControlPlaneServiceClient) RecordPrometheusAlert(ctx context.Context, req *connect.Request[v1.RecordPrometheusAlertRequest]) (*connect.Response[v1.RecordPrometheusAlertResponse], error) {
	return c.recordPrometheusAlert.CallUnary(ctx, req)
}

// UpdateServiceDeploymentStatus calls
// porter.v1.ClusterControlPlaneService.UpdateServiceDeploymentStatus.
func (c *clusterControlPlaneServiceClient) UpdateServiceDeploymentStatus(ctx context.Context, req *connect.Request[v1.UpdateServiceDeploymentStatusRequest]) (*connect.Response[v1.UpdateServiceDeploymentStatusResponse], error) {
	return c.updateServiceDeploymentStatus.CallUnary(ctx, req)
}

// ConnectHostedProject calls porter.v1.ClusterControlPlaneService.ConnectHostedProject.
func (c *clusterControlPlaneServiceClient) ConnectHostedProject(ctx context.Context, req *connect.Request[v1.ConnectHostedProjectRequest]) (*connect.Response[v1.ConnectHostedProjectResponse], error) {
	return c.connectHostedProject.CallUnary(ctx, req)
}

// UpdateDatastore calls porter.v1.ClusterControlPlaneService.UpdateDatastore.
func (c *clusterControlPlaneServiceClient) UpdateDatastore(ctx context.Context, req *connect.Request[v1.UpdateDatastoreRequest]) (*connect.Response[v1.UpdateDatastoreResponse], error) {
	return c.updateDatastore.CallUnary(ctx, req)
}

// DeleteDatastore calls porter.v1.ClusterControlPlaneService.DeleteDatastore.
func (c *clusterControlPlaneServiceClient) DeleteDatastore(ctx context.Context, req *connect.Request[v1.DeleteDatastoreRequest]) (*connect.Response[v1.DeleteDatastoreResponse], error) {
	return c.deleteDatastore.CallUnary(ctx, req)
}

// CreateDatastoreProxy calls porter.v1.ClusterControlPlaneService.CreateDatastoreProxy.
func (c *clusterControlPlaneServiceClient) CreateDatastoreProxy(ctx context.Context, req *connect.Request[v1.CreateDatastoreProxyRequest]) (*connect.Response[v1.CreateDatastoreProxyResponse], error) {
	return c.createDatastoreProxy.CallUnary(ctx, req)
}

// DatastoreCredential calls porter.v1.ClusterControlPlaneService.DatastoreCredential.
func (c *clusterControlPlaneServiceClient) DatastoreCredential(ctx context.Context, req *connect.Request[v1.DatastoreCredentialRequest]) (*connect.Response[v1.DatastoreCredentialResponse], error) {
	return c.datastoreCredential.CallUnary(ctx, req)
}

// CloudProviderPermissionsStatus calls
// porter.v1.ClusterControlPlaneService.CloudProviderPermissionsStatus.
func (c *clusterControlPlaneServiceClient) CloudProviderPermissionsStatus(ctx context.Context, req *connect.Request[v1.CloudProviderPermissionsStatusRequest]) (*connect.Response[v1.CloudProviderPermissionsStatusResponse], error) {
	return c.cloudProviderPermissionsStatus.CallUnary(ctx, req)
}

// PatchCloudContract calls porter.v1.ClusterControlPlaneService.PatchCloudContract.
func (c *clusterControlPlaneServiceClient) PatchCloudContract(ctx context.Context, req *connect.Request[v1.PatchCloudContractRequest]) (*connect.Response[v1.PatchCloudContractResponse], error) {
	return c.patchCloudContract.CallUnary(ctx, req)
}

// ReadCloudContract calls porter.v1.ClusterControlPlaneService.ReadCloudContract.
func (c *clusterControlPlaneServiceClient) ReadCloudContract(ctx context.Context, req *connect.Request[v1.ReadCloudContractRequest]) (*connect.Response[v1.ReadCloudContractResponse], error) {
	return c.readCloudContract.CallUnary(ctx, req)
}

// DockerConfigFileForRegistry calls
// porter.v1.ClusterControlPlaneService.DockerConfigFileForRegistry.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) DockerConfigFileForRegistry(ctx context.Context, req *connect.Request[v1.DockerConfigFileForRegistryRequest]) (*connect.Response[v1.DockerConfigFileForRegistryResponse], error) {
	return c.dockerConfigFileForRegistry.CallUnary(ctx, req)
}

// ECRTokenForRegistry calls porter.v1.ClusterControlPlaneService.ECRTokenForRegistry.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) ECRTokenForRegistry(ctx context.Context, req *connect.Request[v1.ECRTokenForRegistryRequest]) (*connect.Response[v1.ECRTokenForRegistryResponse], error) {
	return c.eCRTokenForRegistry.CallUnary(ctx, req)
}

// AssumeRoleCredentials calls porter.v1.ClusterControlPlaneService.AssumeRoleCredentials.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) AssumeRoleCredentials(ctx context.Context, req *connect.Request[v1.AssumeRoleCredentialsRequest]) (*connect.Response[v1.AssumeRoleCredentialsResponse], error) {
	return c.assumeRoleCredentials.CallUnary(ctx, req)
}

// AssumeRoleChainTargets calls porter.v1.ClusterControlPlaneService.AssumeRoleChainTargets.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) AssumeRoleChainTargets(ctx context.Context, req *connect.Request[v1.AssumeRoleChainTargetsRequest]) (*connect.Response[v1.AssumeRoleChainTargetsResponse], error) {
	return c.assumeRoleChainTargets.CallUnary(ctx, req)
}

// CertificateAuthorityData calls porter.v1.ClusterControlPlaneService.CertificateAuthorityData.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) CertificateAuthorityData(ctx context.Context, req *connect.Request[v1.CertificateAuthorityDataRequest]) (*connect.Response[v1.CertificateAuthorityDataResponse], error) {
	return c.certificateAuthorityData.CallUnary(ctx, req)
}

// EKSBearerToken calls porter.v1.ClusterControlPlaneService.EKSBearerToken.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) EKSBearerToken(ctx context.Context, req *connect.Request[v1.EKSBearerTokenRequest]) (*connect.Response[v1.EKSBearerTokenResponse], error) {
	return c.eKSBearerToken.CallUnary(ctx, req)
}

// ListRepositoriesForRegistry calls
// porter.v1.ClusterControlPlaneService.ListRepositoriesForRegistry.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) ListRepositoriesForRegistry(ctx context.Context, req *connect.Request[v1.ListRepositoriesForRegistryRequest]) (*connect.Response[v1.ListRepositoriesForRegistryResponse], error) {
	return c.listRepositoriesForRegistry.CallUnary(ctx, req)
}

// ListImagesForRepository calls porter.v1.ClusterControlPlaneService.ListImagesForRepository.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) ListImagesForRepository(ctx context.Context, req *connect.Request[v1.ListImagesForRepositoryRequest]) (*connect.Response[v1.ListImagesForRepositoryResponse], error) {
	return c.listImagesForRepository.CallUnary(ctx, req)
}

// ListDatastores calls porter.v1.ClusterControlPlaneService.ListDatastores.
func (c *clusterControlPlaneServiceClient) ListDatastores(ctx context.Context, req *connect.Request[v1.ListDatastoresRequest]) (*connect.Response[v1.ListDatastoresResponse], error) {
	return c.listDatastores.CallUnary(ctx, req)
}

// DatastoreStatus calls porter.v1.ClusterControlPlaneService.DatastoreStatus.
//
// Deprecated: do not use.
func (c *clusterControlPlaneServiceClient) DatastoreStatus(ctx context.Context, req *connect.Request[v1.DatastoreStatusRequest]) (*connect.Response[v1.DatastoreStatusResponse], error) {
	return c.datastoreStatus.CallUnary(ctx, req)
}

// RegistryStatus calls porter.v1.ClusterControlPlaneService.RegistryStatus.
func (c *clusterControlPlaneServiceClient) RegistryStatus(ctx context.Context, req *connect.Request[v1.RegistryStatusRequest]) (*connect.Response[v1.RegistryStatusResponse], error) {
	return c.registryStatus.CallUnary(ctx, req)
}

// EnableExternalEnvGroupProviders calls
// porter.v1.ClusterControlPlaneService.EnableExternalEnvGroupProviders.
func (c *clusterControlPlaneServiceClient) EnableExternalEnvGroupProviders(ctx context.Context, req *connect.Request[v1.EnableExternalEnvGroupProvidersRequest]) (*connect.Response[v1.EnableExternalEnvGroupProvidersResponse], error) {
	return c.enableExternalEnvGroupProviders.CallUnary(ctx, req)
}

// AreExternalEnvGroupProvidersEnabled calls
// porter.v1.ClusterControlPlaneService.AreExternalEnvGroupProvidersEnabled.
func (c *clusterControlPlaneServiceClient) AreExternalEnvGroupProvidersEnabled(ctx context.Context, req *connect.Request[v1.AreExternalEnvGroupProvidersEnabledRequest]) (*connect.Response[v1.AreExternalEnvGroupProvidersEnabledResponse], error) {
	return c.areExternalEnvGroupProvidersEnabled.CallUnary(ctx, req)
}

// CreateOrUpdateEnvGroup calls porter.v1.ClusterControlPlaneService.CreateOrUpdateEnvGroup.
func (c *clusterControlPlaneServiceClient) CreateOrUpdateEnvGroup(ctx context.Context, req *connect.Request[v1.CreateOrUpdateEnvGroupRequest]) (*connect.Response[v1.CreateOrUpdateEnvGroupResponse], error) {
	return c.createOrUpdateEnvGroup.CallUnary(ctx, req)
}

// DeleteEnvGroup calls porter.v1.ClusterControlPlaneService.DeleteEnvGroup.
func (c *clusterControlPlaneServiceClient) DeleteEnvGroup(ctx context.Context, req *connect.Request[v1.DeleteEnvGroupRequest]) (*connect.Response[v1.DeleteEnvGroupResponse], error) {
	return c.deleteEnvGroup.CallUnary(ctx, req)
}

// AppsLinkedToEnvGroup calls porter.v1.ClusterControlPlaneService.AppsLinkedToEnvGroup.
func (c *clusterControlPlaneServiceClient) AppsLinkedToEnvGroup(ctx context.Context, req *connect.Request[v1.AppsLinkedToEnvGroupRequest]) (*connect.Response[v1.AppsLinkedToEnvGroupResponse], error) {
	return c.appsLinkedToEnvGroup.CallUnary(ctx, req)
}

// ListEnvGroups calls porter.v1.ClusterControlPlaneService.ListEnvGroups.
func (c *clusterControlPlaneServiceClient) ListEnvGroups(ctx context.Context, req *connect.Request[v1.ListEnvGroupsRequest]) (*connect.Response[v1.ListEnvGroupsResponse], error) {
	return c.listEnvGroups.CallUnary(ctx, req)
}

// UpdateNotificationConfig calls porter.v1.ClusterControlPlaneService.UpdateNotificationConfig.
func (c *clusterControlPlaneServiceClient) UpdateNotificationConfig(ctx context.Context, req *connect.Request[v1.UpdateNotificationConfigRequest]) (*connect.Response[v1.UpdateNotificationConfigResponse], error) {
	return c.updateNotificationConfig.CallUnary(ctx, req)
}

// NotificationConfig calls porter.v1.ClusterControlPlaneService.NotificationConfig.
func (c *clusterControlPlaneServiceClient) NotificationConfig(ctx context.Context, req *connect.Request[v1.NotificationConfigRequest]) (*connect.Response[v1.NotificationConfigResponse], error) {
	return c.notificationConfig.CallUnary(ctx, req)
}

// SystemStatusHistory calls porter.v1.ClusterControlPlaneService.SystemStatusHistory.
func (c *clusterControlPlaneServiceClient) SystemStatusHistory(ctx context.Context, req *connect.Request[v1.SystemStatusHistoryRequest]) (*connect.Response[v1.SystemStatusHistoryResponse], error) {
	return c.systemStatusHistory.CallUnary(ctx, req)
}

// ClusterControlPlaneServiceHandler is an implementation of the
// porter.v1.ClusterControlPlaneService service.
type ClusterControlPlaneServiceHandler interface {
	MachineTypes(context.Context, *connect.Request[v1.MachineTypesRequest]) (*connect.Response[v1.MachineTypesResponse], error)
	// QuotaIncrease will auto request increases to the quota in a specific region given a list of quotas
	QuotaIncrease(context.Context, *connect.Request[v1.QuotaIncreaseRequest]) (*connect.Response[v1.QuotaIncreaseResponse], error)
	// UpdateCloudProviderCredentials creates or updates the credentials used for accessing the specific cloud
	UpdateCloudProviderCredentials(context.Context, *connect.Request[v1.UpdateCloudProviderCredentialsRequest]) (*connect.Response[v1.UpdateCloudProviderCredentialsResponse], error)
	// QuotaPreflightCheck checks if the target account and region has sufficient resources (EIP addresses and VPCs) to provision a new cluster
	//
	// Deprecated: do not use.
	QuotaPreflightCheck(context.Context, *connect.Request[v1.QuotaPreflightCheckRequest]) (*connect.Response[v1.QuotaPreflightCheckResponse], error)
	// PreflightCheck checks if the target account is able to provision a cluster
	// Deprecated: Use CloudContractPreflightCheck instead
	//
	// Deprecated: do not use.
	PreflightCheck(context.Context, *connect.Request[v1.PreflightCheckRequest]) (*connect.Response[v1.PreflightCheckResponse], error)
	// CloudContractPreflightCheck runs preflight checks on the target account to ensure it is able to provision the resources defined in the contract.
	// It returns a list of failing checks that must be resolved before  can be provisioned.
	CloudContractPreflightCheck(context.Context, *connect.Request[v1.CloudContractPreflightCheckRequest]) (*connect.Response[v1.CloudContractPreflightCheckResponse], error)
	// CreateAssumeRoleChain creates a new assume role chain for a given project and checks if the target assumed role has sufficient permissions. Use UpdateCloudProviderCredentials instead.
	//
	// Deprecated: do not use.
	CreateAssumeRoleChain(context.Context, *connect.Request[v1.CreateAssumeRoleChainRequest]) (*connect.Response[v1.CreateAssumeRoleChainResponse], error)
	// SaveAzureCredentials stores the new azure service principal credentials and creates the azure cluster identity. Deprecated. Use UpdateCloudProviderCredentials instead.
	//
	// Deprecated: do not use.
	SaveAzureCredentials(context.Context, *connect.Request[v1.SaveAzureCredentialsRequest]) (*connect.Response[v1.SaveAzureCredentialsResponse], error)
	// KubeConfigForCluster gets a valid kubeconfig from the management cluster, for a given workload cluster
	KubeConfigForCluster(context.Context, *connect.Request[v1.KubeConfigForClusterRequest]) (*connect.Response[v1.KubeConfigForClusterResponse], error)
	// UpdateContract takes in a Porter Contract, actioning upon it where necessary
	UpdateContract(context.Context, *connect.Request[v1.UpdateContractRequest]) (*connect.Response[v1.UpdateContractResponse], error)
	// ReadContract returns the base64 encoded contract for a given cluster and project
	ReadContract(context.Context, *connect.Request[v1.ReadContractRequest]) (*connect.Response[v1.ReadContractResponse], error)
	// ClusterStatus returns the status of a given workload cluster
	ClusterStatus(context.Context, *connect.Request[v1.ClusterStatusRequest]) (*connect.Response[v1.ClusterStatusResponse], error)
	// DeleteCluster uninstalls system components from a given workload cluster before deleting it.
	// This should ultimately be wrapped into UpdateContract
	DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error)
	// TokenForRegistry returns a token for accessing a given registry
	TokenForRegistry(context.Context, *connect.Request[v1.TokenForRegistryRequest]) (*connect.Response[v1.TokenForRegistryResponse], error)
	// ContractComplianceChecks returns the current status of the compliance checks for a given cluster and project
	ContractComplianceChecks(context.Context, *connect.Request[v1.ContractComplianceChecksRequest]) (*connect.Response[v1.ContractComplianceChecksResponse], error)
	// ValidatePorterApp validates and hydrates a definition of a porter app, based on the porter.yaml file
	// Deprecated: Use UpdateApp instead
	//
	// Deprecated: do not use.
	ValidatePorterApp(context.Context, *connect.Request[v1.ValidatePorterAppRequest]) (*connect.Response[v1.ValidatePorterAppResponse], error)
	// ApplyPorterApp applies a porter app as defined by the provided porter.yaml file to a given deployment id
	// Deprecated: Use UpdateApp instead
	//
	// Deprecated: do not use.
	ApplyPorterApp(context.Context, *connect.Request[v1.ApplyPorterAppRequest]) (*connect.Response[v1.ApplyPorterAppResponse], error)
	// UpdateApp hydrates a definition of a porter app, and takes necessary actions to update the app on the cluster
	UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error)
	// UpdateAddon hydrates a definition of a porter add-on, and takes necessary actions to update the add-on on the cluster
	UpdateAddon(context.Context, *connect.Request[v1.UpdateAddonRequest]) (*connect.Response[v1.UpdateAddonResponse], error)
	// DeleteAddon deletes a porter-addon
	DeleteAddon(context.Context, *connect.Request[v1.DeleteAddonRequest]) (*connect.Response[v1.DeleteAddonResponse], error)
	// RollbackRevision reverts an app to the previous revision, or optionally to the revision specified
	RollbackRevision(context.Context, *connect.Request[v1.RollbackRevisionRequest]) (*connect.Response[v1.RollbackRevisionResponse], error)
	// UpdateRevisionStatus updates the status of a revision
	UpdateRevisionStatus(context.Context, *connect.Request[v1.UpdateRevisionStatusRequest]) (*connect.Response[v1.UpdateRevisionStatusResponse], error)
	// AppRevisionStatus returns the status of a revision
	AppRevisionStatus(context.Context, *connect.Request[v1.AppRevisionStatusRequest]) (*connect.Response[v1.AppRevisionStatusResponse], error)
	// DeletePorterApp deletes all instances of a porter app across deployment targets in a given project
	DeletePorterApp(context.Context, *connect.Request[v1.DeletePorterAppRequest]) (*connect.Response[v1.DeletePorterAppResponse], error)
	// DeleteAppDeployment deletes a porter app from a given deployment target
	DeleteAppDeployment(context.Context, *connect.Request[v1.DeleteAppDeploymentRequest]) (*connect.Response[v1.DeleteAppDeploymentResponse], error)
	// DeleteDeploymentTarget deletes a deployment target from a given cluster
	DeleteDeploymentTarget(context.Context, *connect.Request[v1.DeleteDeploymentTargetRequest]) (*connect.Response[v1.DeleteDeploymentTargetResponse], error)
	// CurrentAppRevision returns the currently deployed app revision for a given porter_app and deployment_target
	CurrentAppRevision(context.Context, *connect.Request[v1.CurrentAppRevisionRequest]) (*connect.Response[v1.CurrentAppRevisionResponse], error)
	ListAppRevisions(context.Context, *connect.Request[v1.ListAppRevisionsRequest]) (*connect.Response[v1.ListAppRevisionsResponse], error)
	// LatestAppRevisions returns the currently deployed app revisions for a given deployment_target
	LatestAppRevisions(context.Context, *connect.Request[v1.LatestAppRevisionsRequest]) (*connect.Response[v1.LatestAppRevisionsResponse], error)
	// GetAppRevision returns the app revision for a given app revision id
	GetAppRevision(context.Context, *connect.Request[v1.GetAppRevisionRequest]) (*connect.Response[v1.GetAppRevisionResponse], error)
	// AppTemplate returns the app template for a given app id
	AppTemplate(context.Context, *connect.Request[v1.AppTemplateRequest]) (*connect.Response[v1.AppTemplateResponse], error)
	// UpdateAppTemplate updates the app template for a given app
	UpdateAppTemplate(context.Context, *connect.Request[v1.UpdateAppTemplateRequest]) (*connect.Response[v1.UpdateAppTemplateResponse], error)
	// LatestAddons returns the currently deployed addons for a given deployment_target
	LatestAddons(context.Context, *connect.Request[v1.LatestAddonsRequest]) (*connect.Response[v1.LatestAddonsResponse], error)
	// PredeployStatus returns the status of the predeploy job for a given app revision
	PredeployStatus(context.Context, *connect.Request[v1.PredeployStatusRequest]) (*connect.Response[v1.PredeployStatusResponse], error)
	// DeploymentTargetDetails returns the details of a deployment target job given the id.  This is a work-around to moving all namespace-related
	// logic to CCP and should only be used to support metrics and logging (and confirming cluster RBAC). This will fail once
	// we start using deployment targets that do not have a selector kind of "namespace"
	DeploymentTargetDetails(context.Context, *connect.Request[v1.DeploymentTargetDetailsRequest]) (*connect.Response[v1.DeploymentTargetDetailsResponse], error)
	// CreateDeploymentTarget creates a new deployment target for a given cluster, returning the deployment target id. If a deployment target with the same name already exists with
	// the same namespace, cluster and preview status, the existing deployment target ID will be returned. Otherwise, an error will be returned.
	CreateDeploymentTarget(context.Context, *connect.Request[v1.CreateDeploymentTargetRequest]) (*connect.Response[v1.CreateDeploymentTargetResponse], error)
	// DeploymentTargets returns all of the deployment targets for a given project
	DeploymentTargets(context.Context, *connect.Request[v1.DeploymentTargetsRequest]) (*connect.Response[v1.DeploymentTargetsResponse], error)
	// DefaultDeploymentTarget returns the default deployment target for a given cluster
	DefaultDeploymentTarget(context.Context, *connect.Request[v1.DefaultDeploymentTargetRequest]) (*connect.Response[v1.DefaultDeploymentTargetResponse], error)
	// SeedAppRevision seeds app revisions for a given project id, cluster id, release name, namespace.  It should only be called
	// from the Cluster Control Plane CLI and should be removed once all legacy users are migrated to the new apply validate.
	SeedAppRevisions(context.Context, *connect.Request[v1.SeedAppRevisionsRequest]) (*connect.Response[v1.SeedAppRevisionsResponse], error)
	// EnvGroupVariables returns the variables for a given env group name and version
	EnvGroupVariables(context.Context, *connect.Request[v1.EnvGroupVariablesRequest]) (*connect.Response[v1.EnvGroupVariablesResponse], error)
	// LatestEnvGroupWithVariables returns the latest env group and variables for a given env group name in the given deployment target
	LatestEnvGroupWithVariables(context.Context, *connect.Request[v1.LatestEnvGroupWithVariablesRequest]) (*connect.Response[v1.LatestEnvGroupWithVariablesResponse], error)
	// AppEnvVariables returns the latest env variables for a given app in the given deployment target
	AppEnvVariables(context.Context, *connect.Request[v1.AppEnvVariablesRequest]) (*connect.Response[v1.AppEnvVariablesResponse], error)
	// UpdateAppImage updates the image of a porter app and applies the new app revision to the deployment target.
	UpdateAppImage(context.Context, *connect.Request[v1.UpdateAppImageRequest]) (*connect.Response[v1.UpdateAppImageResponse], error)
	// UpdateAppBuildSettings updates the build settings for an app
	UpdateAppBuildSettings(context.Context, *connect.Request[v1.UpdateAppBuildSettingsRequest]) (*connect.Response[v1.UpdateAppBuildSettingsResponse], error)
	// UpdateAppsLinkedToEnvGroup updates all apps that are linked to a given env group
	UpdateAppsLinkedToEnvGroup(context.Context, *connect.Request[v1.UpdateAppsLinkedToEnvGroupRequest]) (*connect.Response[v1.UpdateAppsLinkedToEnvGroupResponse], error)
	// AppHelmValues retrieves the raw helm values used to install an app on the cluster.
	AppHelmValues(context.Context, *connect.Request[v1.AppHelmValuesRequest]) (*connect.Response[v1.AppHelmValuesResponse], error)
	// ManualServiceRun creates a pod/job with the same spec as the provided service (as defined in the latest app revision)
	// and runs the provided command, or if no command is provided, runs the command defined for the service.
	ManualServiceRun(context.Context, *connect.Request[v1.ManualServiceRunRequest]) (*connect.Response[v1.ManualServiceRunResponse], error)
	// CancelJobRun cancels a job run for a given app and job service in the provided deployment target
	CancelJobRun(context.Context, *connect.Request[v1.CancelJobRunRequest]) (*connect.Response[v1.CancelJobRunResponse], error)
	// JobRunStatus returns the status of a given job run
	JobRunStatus(context.Context, *connect.Request[v1.JobRunStatusRequest]) (*connect.Response[v1.JobRunStatusResponse], error)
	// JobRuns returns the job runs for a given app and job service in the provided deployment target
	JobRuns(context.Context, *connect.Request[v1.JobRunsRequest]) (*connect.Response[v1.JobRunsResponse], error)
	// ClusterNetworkSettings gets the network settings (region, subnets, vpc) for a given project/cluster combination
	ClusterNetworkSettings(context.Context, *connect.Request[v1.ClusterNetworkSettingsRequest]) (*connect.Response[v1.ClusterNetworkSettingsResponse], error)
	// SharedNetworkSettings gets the network settings (region, subnets, vpc) for a given project/cluster/service combination
	SharedNetworkSettings(context.Context, *connect.Request[v1.SharedNetworkSettingsRequest]) (*connect.Response[v1.SharedNetworkSettingsResponse], error)
	// Images returns images matching provided filter parameters
	Images(context.Context, *connect.Request[v1.ImagesRequest]) (*connect.Response[v1.ImagesResponse], error)
	// CreateAppInstance creates a new app instance for a given name and deployment target. If an app instance with the same name and deployment target already exists, the existing app instance ID will be returned.
	CreateAppInstance(context.Context, *connect.Request[v1.CreateAppInstanceRequest]) (*connect.Response[v1.CreateAppInstanceResponse], error)
	// DeleteAppInstance deletes an app instance and all associated revisions.
	DeleteAppInstance(context.Context, *connect.Request[v1.DeleteAppInstanceRequest]) (*connect.Response[v1.DeleteAppInstanceResponse], error)
	// ListAppInstances lists app instance in a project (and deployment target if provided).
	ListAppInstances(context.Context, *connect.Request[v1.ListAppInstancesRequest]) (*connect.Response[v1.ListAppInstancesResponse], error)
	// TemplateAppManifests returns the manifests for a given app template
	TemplateAppManifests(context.Context, *connect.Request[v1.TemplateAppManifestsRequest]) (*connect.Response[v1.TemplateAppManifestsResponse], error)
	// CreateNotification creates a notification for a porter app and service at a given app revision
	CreateNotification(context.Context, *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error)
	// RecordPrometheusAlert records a prometheus alert and generates slack notifications when appropriate
	RecordPrometheusAlert(context.Context, *connect.Request[v1.RecordPrometheusAlertRequest]) (*connect.Response[v1.RecordPrometheusAlertResponse], error)
	// UpdateServiceDeploymentStatus updates the current deployment status of a service with a new status
	UpdateServiceDeploymentStatus(context.Context, *connect.Request[v1.UpdateServiceDeploymentStatusRequest]) (*connect.Response[v1.UpdateServiceDeploymentStatusResponse], error)
	// ConnectHostedProject connects a hosted project to a host cluster, returning the cluster id of the symbolic cluster associated with this project that is linked to the host cluster
	ConnectHostedProject(context.Context, *connect.Request[v1.ConnectHostedProjectRequest]) (*connect.Response[v1.ConnectHostedProjectResponse], error)
	// UpdateDatastore updates a porter-managed datastore
	UpdateDatastore(context.Context, *connect.Request[v1.UpdateDatastoreRequest]) (*connect.Response[v1.UpdateDatastoreResponse], error)
	// DeleteDatastore deletes a porter-managed datastore
	DeleteDatastore(context.Context, *connect.Request[v1.DeleteDatastoreRequest]) (*connect.Response[v1.DeleteDatastoreResponse], error)
	// CreateDatastoreProxy creates a proxy for connecting to a datastore
	CreateDatastoreProxy(context.Context, *connect.Request[v1.CreateDatastoreProxyRequest]) (*connect.Response[v1.CreateDatastoreProxyResponse], error)
	// DatastoreCredential returns the set of credentials for connecting to a datastore
	DatastoreCredential(context.Context, *connect.Request[v1.DatastoreCredentialRequest]) (*connect.Response[v1.DatastoreCredentialResponse], error)
	// CloudProviderPermissionsStatus returns the status to poll after a user grants cloud provider permissions to Porter
	CloudProviderPermissionsStatus(context.Context, *connect.Request[v1.CloudProviderPermissionsStatusRequest]) (*connect.Response[v1.CloudProviderPermissionsStatusResponse], error)
	// PatchCloudContract patches a cloud contract by modifying its resources
	PatchCloudContract(context.Context, *connect.Request[v1.PatchCloudContractRequest]) (*connect.Response[v1.PatchCloudContractResponse], error)
	// ReadCloudContract returns a cloud contract
	ReadCloudContract(context.Context, *connect.Request[v1.ReadCloudContractRequest]) (*connect.Response[v1.ReadCloudContractResponse], error)
	// DockerConfigFileForRegistry returns a stringified config.json for accessing a given registry.
	// Deprecated. Use TokenForRegistry instead.
	//
	// Deprecated: do not use.
	DockerConfigFileForRegistry(context.Context, *connect.Request[v1.DockerConfigFileForRegistryRequest]) (*connect.Response[v1.DockerConfigFileForRegistryResponse], error)
	// ECRTokenForRegistry returns a docker-compatible token for accessing a given ECR registry.
	// This cannot be deleted before TokenForRegistry supports AWS and we edit RegistryGetECRTokenHandler to call that endpoint.
	// Deprecated. Use TokenForRegistry instead.
	//
	// Deprecated: do not use.
	ECRTokenForRegistry(context.Context, *connect.Request[v1.ECRTokenForRegistryRequest]) (*connect.Response[v1.ECRTokenForRegistryResponse], error)
	// AssumeRoleCredentials should be used vary sparingly, and ONLY for replacing AWS Integrations which have no workaround on the Porter API.
	// This endpoint returns temporary AWS credentials for a given AWS Account ID, and should not be expanded further to allow specifc role selection without being tied to a project and cluster.
	// Deprecated. This is no longer needed once ListRepositoriesForRegistry, ListImages, and CreateRepository supports AWS
	//
	// Deprecated: do not use.
	AssumeRoleCredentials(context.Context, *connect.Request[v1.AssumeRoleCredentialsRequest]) (*connect.Response[v1.AssumeRoleCredentialsResponse], error)
	// AssumeRoleChainTargets gets the final destination target_arns for a given project.
	// Deprecated. Do not use.
	//
	// Deprecated: do not use.
	AssumeRoleChainTargets(context.Context, *connect.Request[v1.AssumeRoleChainTargetsRequest]) (*connect.Response[v1.AssumeRoleChainTargetsResponse], error)
	// CertificateAuthorityData gets the certificate authority data for a customer cluster
	//
	// Deprecated: do not use.
	CertificateAuthorityData(context.Context, *connect.Request[v1.CertificateAuthorityDataRequest]) (*connect.Response[v1.CertificateAuthorityDataResponse], error)
	// EKSBearerToken gets a bearer token for programatic access to an EKS cluster's kubernetes API.
	// Deprecated. Use KubeConfigForCluster instead.
	//
	// Deprecated: do not use.
	EKSBearerToken(context.Context, *connect.Request[v1.EKSBearerTokenRequest]) (*connect.Response[v1.EKSBearerTokenResponse], error)
	// ListRepositoriesForRegistry lists the repositories for a given registry, provided it is in the scope of the project id
	// Deprecated. Use Images instead.
	//
	// Deprecated: do not use.
	ListRepositoriesForRegistry(context.Context, *connect.Request[v1.ListRepositoriesForRegistryRequest]) (*connect.Response[v1.ListRepositoriesForRegistryResponse], error)
	// ListImagesForRepository lists the repositories for a given registry, provided it is in the scope of the project id
	// Deprecated. Use Images instead.
	//
	// Deprecated: do not use.
	ListImagesForRepository(context.Context, *connect.Request[v1.ListImagesForRepositoryRequest]) (*connect.Response[v1.ListImagesForRepositoryResponse], error)
	// ListDatastores returns a list of datastores for a project and account scope
	ListDatastores(context.Context, *connect.Request[v1.ListDatastoresRequest]) (*connect.Response[v1.ListDatastoresResponse], error)
	// DatastoreStatus returns the status of a given datastore within a project and cluster scope
	// Deprecated. Use ListDatastores with the proper filtering instead.
	//
	// Deprecated: do not use.
	DatastoreStatus(context.Context, *connect.Request[v1.DatastoreStatusRequest]) (*connect.Response[v1.DatastoreStatusResponse], error)
	// RegistryStatus returns the status of a given docker registry within a project scope
	RegistryStatus(context.Context, *connect.Request[v1.RegistryStatusRequest]) (*connect.Response[v1.RegistryStatusResponse], error)
	// EnableExternalEnvGroupProvider will enable support for external env group providers on the cluster
	EnableExternalEnvGroupProviders(context.Context, *connect.Request[v1.EnableExternalEnvGroupProvidersRequest]) (*connect.Response[v1.EnableExternalEnvGroupProvidersResponse], error)
	// AreExternalEnvGroupProviderEnabled will return whether external env group providers are enabled on the cluster
	AreExternalEnvGroupProvidersEnabled(context.Context, *connect.Request[v1.AreExternalEnvGroupProvidersEnabledRequest]) (*connect.Response[v1.AreExternalEnvGroupProvidersEnabledResponse], error)
	// CreateOrUpdateEnvGroup will create or update an env group
	CreateOrUpdateEnvGroup(context.Context, *connect.Request[v1.CreateOrUpdateEnvGroupRequest]) (*connect.Response[v1.CreateOrUpdateEnvGroupResponse], error)
	// DeleteEnvGroup will delete an env group
	DeleteEnvGroup(context.Context, *connect.Request[v1.DeleteEnvGroupRequest]) (*connect.Response[v1.DeleteEnvGroupResponse], error)
	// AppsLinkedToEnvGroup returns the list of app names linked to a given env group.  Note: this should be deprecated in the future in favor of a higher-level ListEnvGroups API (POR-2182)
	AppsLinkedToEnvGroup(context.Context, *connect.Request[v1.AppsLinkedToEnvGroupRequest]) (*connect.Response[v1.AppsLinkedToEnvGroupResponse], error)
	// ListEnvGroups returns the list of env groups configured on a cluster
	ListEnvGroups(context.Context, *connect.Request[v1.ListEnvGroupsRequest]) (*connect.Response[v1.ListEnvGroupsResponse], error)
	// UpdateNotificationConfig updates the notification config for a given id, or creates a new one if no id is provided
	UpdateNotificationConfig(context.Context, *connect.Request[v1.UpdateNotificationConfigRequest]) (*connect.Response[v1.UpdateNotificationConfigResponse], error)
	// NotificationConfig gets the notification config for a given id
	NotificationConfig(context.Context, *connect.Request[v1.NotificationConfigRequest]) (*connect.Response[v1.NotificationConfigResponse], error)
	// SystemStatusHistory fetches the system status history in a cluster
	SystemStatusHistory(context.Context, *connect.Request[v1.SystemStatusHistoryRequest]) (*connect.Response[v1.SystemStatusHistoryResponse], error)
}

// NewClusterControlPlaneServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterControlPlaneServiceHandler(svc ClusterControlPlaneServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clusterControlPlaneServiceMachineTypesHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceMachineTypesProcedure,
		svc.MachineTypes,
		connect.WithSchema(clusterControlPlaneServiceMachineTypesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceQuotaIncreaseHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceQuotaIncreaseProcedure,
		svc.QuotaIncrease,
		connect.WithSchema(clusterControlPlaneServiceQuotaIncreaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceUpdateCloudProviderCredentialsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateCloudProviderCredentialsProcedure,
		svc.UpdateCloudProviderCredentials,
		connect.WithSchema(clusterControlPlaneServiceUpdateCloudProviderCredentialsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceQuotaPreflightCheckHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceQuotaPreflightCheckProcedure,
		svc.QuotaPreflightCheck,
		connect.WithSchema(clusterControlPlaneServiceQuotaPreflightCheckMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServicePreflightCheckHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServicePreflightCheckProcedure,
		svc.PreflightCheck,
		connect.WithSchema(clusterControlPlaneServicePreflightCheckMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceCloudContractPreflightCheckHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCloudContractPreflightCheckProcedure,
		svc.CloudContractPreflightCheck,
		connect.WithSchema(clusterControlPlaneServiceCloudContractPreflightCheckMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceCreateAssumeRoleChainHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCreateAssumeRoleChainProcedure,
		svc.CreateAssumeRoleChain,
		connect.WithSchema(clusterControlPlaneServiceCreateAssumeRoleChainMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceSaveAzureCredentialsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceSaveAzureCredentialsProcedure,
		svc.SaveAzureCredentials,
		connect.WithSchema(clusterControlPlaneServiceSaveAzureCredentialsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceKubeConfigForClusterHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceKubeConfigForClusterProcedure,
		svc.KubeConfigForCluster,
		connect.WithSchema(clusterControlPlaneServiceKubeConfigForClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceUpdateContractHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateContractProcedure,
		svc.UpdateContract,
		connect.WithSchema(clusterControlPlaneServiceUpdateContractMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceReadContractHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceReadContractProcedure,
		svc.ReadContract,
		connect.WithSchema(clusterControlPlaneServiceReadContractMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceClusterStatusHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceClusterStatusProcedure,
		svc.ClusterStatus,
		connect.WithSchema(clusterControlPlaneServiceClusterStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceDeleteClusterHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeleteClusterProcedure,
		svc.DeleteCluster,
		connect.WithSchema(clusterControlPlaneServiceDeleteClusterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceTokenForRegistryHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceTokenForRegistryProcedure,
		svc.TokenForRegistry,
		connect.WithSchema(clusterControlPlaneServiceTokenForRegistryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceContractComplianceChecksHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceContractComplianceChecksProcedure,
		svc.ContractComplianceChecks,
		connect.WithSchema(clusterControlPlaneServiceContractComplianceChecksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceValidatePorterAppHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceValidatePorterAppProcedure,
		svc.ValidatePorterApp,
		connect.WithSchema(clusterControlPlaneServiceValidatePorterAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceApplyPorterAppHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceApplyPorterAppProcedure,
		svc.ApplyPorterApp,
		connect.WithSchema(clusterControlPlaneServiceApplyPorterAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceUpdateAppHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateAppProcedure,
		svc.UpdateApp,
		connect.WithSchema(clusterControlPlaneServiceUpdateAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceUpdateAddonHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateAddonProcedure,
		svc.UpdateAddon,
		connect.WithSchema(clusterControlPlaneServiceUpdateAddonMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceDeleteAddonHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeleteAddonProcedure,
		svc.DeleteAddon,
		connect.WithSchema(clusterControlPlaneServiceDeleteAddonMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceRollbackRevisionHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceRollbackRevisionProcedure,
		svc.RollbackRevision,
		connect.WithSchema(clusterControlPlaneServiceRollbackRevisionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceUpdateRevisionStatusHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateRevisionStatusProcedure,
		svc.UpdateRevisionStatus,
		connect.WithSchema(clusterControlPlaneServiceUpdateRevisionStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceAppRevisionStatusHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceAppRevisionStatusProcedure,
		svc.AppRevisionStatus,
		connect.WithSchema(clusterControlPlaneServiceAppRevisionStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceDeletePorterAppHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeletePorterAppProcedure,
		svc.DeletePorterApp,
		connect.WithSchema(clusterControlPlaneServiceDeletePorterAppMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceDeleteAppDeploymentHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeleteAppDeploymentProcedure,
		svc.DeleteAppDeployment,
		connect.WithSchema(clusterControlPlaneServiceDeleteAppDeploymentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceDeleteDeploymentTargetHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeleteDeploymentTargetProcedure,
		svc.DeleteDeploymentTarget,
		connect.WithSchema(clusterControlPlaneServiceDeleteDeploymentTargetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceCurrentAppRevisionHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCurrentAppRevisionProcedure,
		svc.CurrentAppRevision,
		connect.WithSchema(clusterControlPlaneServiceCurrentAppRevisionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceListAppRevisionsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceListAppRevisionsProcedure,
		svc.ListAppRevisions,
		connect.WithSchema(clusterControlPlaneServiceListAppRevisionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceLatestAppRevisionsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceLatestAppRevisionsProcedure,
		svc.LatestAppRevisions,
		connect.WithSchema(clusterControlPlaneServiceLatestAppRevisionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceGetAppRevisionHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceGetAppRevisionProcedure,
		svc.GetAppRevision,
		connect.WithSchema(clusterControlPlaneServiceGetAppRevisionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceAppTemplateHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceAppTemplateProcedure,
		svc.AppTemplate,
		connect.WithSchema(clusterControlPlaneServiceAppTemplateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceUpdateAppTemplateHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateAppTemplateProcedure,
		svc.UpdateAppTemplate,
		connect.WithSchema(clusterControlPlaneServiceUpdateAppTemplateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceLatestAddonsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceLatestAddonsProcedure,
		svc.LatestAddons,
		connect.WithSchema(clusterControlPlaneServiceLatestAddonsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServicePredeployStatusHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServicePredeployStatusProcedure,
		svc.PredeployStatus,
		connect.WithSchema(clusterControlPlaneServicePredeployStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceDeploymentTargetDetailsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeploymentTargetDetailsProcedure,
		svc.DeploymentTargetDetails,
		connect.WithSchema(clusterControlPlaneServiceDeploymentTargetDetailsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceCreateDeploymentTargetHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCreateDeploymentTargetProcedure,
		svc.CreateDeploymentTarget,
		connect.WithSchema(clusterControlPlaneServiceCreateDeploymentTargetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceDeploymentTargetsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeploymentTargetsProcedure,
		svc.DeploymentTargets,
		connect.WithSchema(clusterControlPlaneServiceDeploymentTargetsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceDefaultDeploymentTargetHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDefaultDeploymentTargetProcedure,
		svc.DefaultDeploymentTarget,
		connect.WithSchema(clusterControlPlaneServiceDefaultDeploymentTargetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceSeedAppRevisionsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceSeedAppRevisionsProcedure,
		svc.SeedAppRevisions,
		connect.WithSchema(clusterControlPlaneServiceSeedAppRevisionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceEnvGroupVariablesHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceEnvGroupVariablesProcedure,
		svc.EnvGroupVariables,
		connect.WithSchema(clusterControlPlaneServiceEnvGroupVariablesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceLatestEnvGroupWithVariablesHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceLatestEnvGroupWithVariablesProcedure,
		svc.LatestEnvGroupWithVariables,
		connect.WithSchema(clusterControlPlaneServiceLatestEnvGroupWithVariablesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceAppEnvVariablesHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceAppEnvVariablesProcedure,
		svc.AppEnvVariables,
		connect.WithSchema(clusterControlPlaneServiceAppEnvVariablesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceUpdateAppImageHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateAppImageProcedure,
		svc.UpdateAppImage,
		connect.WithSchema(clusterControlPlaneServiceUpdateAppImageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceUpdateAppBuildSettingsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateAppBuildSettingsProcedure,
		svc.UpdateAppBuildSettings,
		connect.WithSchema(clusterControlPlaneServiceUpdateAppBuildSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceUpdateAppsLinkedToEnvGroupHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateAppsLinkedToEnvGroupProcedure,
		svc.UpdateAppsLinkedToEnvGroup,
		connect.WithSchema(clusterControlPlaneServiceUpdateAppsLinkedToEnvGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceAppHelmValuesHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceAppHelmValuesProcedure,
		svc.AppHelmValues,
		connect.WithSchema(clusterControlPlaneServiceAppHelmValuesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceManualServiceRunHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceManualServiceRunProcedure,
		svc.ManualServiceRun,
		connect.WithSchema(clusterControlPlaneServiceManualServiceRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceCancelJobRunHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCancelJobRunProcedure,
		svc.CancelJobRun,
		connect.WithSchema(clusterControlPlaneServiceCancelJobRunMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceJobRunStatusHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceJobRunStatusProcedure,
		svc.JobRunStatus,
		connect.WithSchema(clusterControlPlaneServiceJobRunStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceJobRunsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceJobRunsProcedure,
		svc.JobRuns,
		connect.WithSchema(clusterControlPlaneServiceJobRunsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceClusterNetworkSettingsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceClusterNetworkSettingsProcedure,
		svc.ClusterNetworkSettings,
		connect.WithSchema(clusterControlPlaneServiceClusterNetworkSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceSharedNetworkSettingsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceSharedNetworkSettingsProcedure,
		svc.SharedNetworkSettings,
		connect.WithSchema(clusterControlPlaneServiceSharedNetworkSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceImagesHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceImagesProcedure,
		svc.Images,
		connect.WithSchema(clusterControlPlaneServiceImagesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceCreateAppInstanceHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCreateAppInstanceProcedure,
		svc.CreateAppInstance,
		connect.WithSchema(clusterControlPlaneServiceCreateAppInstanceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceDeleteAppInstanceHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeleteAppInstanceProcedure,
		svc.DeleteAppInstance,
		connect.WithSchema(clusterControlPlaneServiceDeleteAppInstanceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceListAppInstancesHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceListAppInstancesProcedure,
		svc.ListAppInstances,
		connect.WithSchema(clusterControlPlaneServiceListAppInstancesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceTemplateAppManifestsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceTemplateAppManifestsProcedure,
		svc.TemplateAppManifests,
		connect.WithSchema(clusterControlPlaneServiceTemplateAppManifestsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceCreateNotificationHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCreateNotificationProcedure,
		svc.CreateNotification,
		connect.WithSchema(clusterControlPlaneServiceCreateNotificationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceRecordPrometheusAlertHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceRecordPrometheusAlertProcedure,
		svc.RecordPrometheusAlert,
		connect.WithSchema(clusterControlPlaneServiceRecordPrometheusAlertMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceUpdateServiceDeploymentStatusHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateServiceDeploymentStatusProcedure,
		svc.UpdateServiceDeploymentStatus,
		connect.WithSchema(clusterControlPlaneServiceUpdateServiceDeploymentStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceConnectHostedProjectHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceConnectHostedProjectProcedure,
		svc.ConnectHostedProject,
		connect.WithSchema(clusterControlPlaneServiceConnectHostedProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceUpdateDatastoreHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateDatastoreProcedure,
		svc.UpdateDatastore,
		connect.WithSchema(clusterControlPlaneServiceUpdateDatastoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceDeleteDatastoreHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeleteDatastoreProcedure,
		svc.DeleteDatastore,
		connect.WithSchema(clusterControlPlaneServiceDeleteDatastoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceCreateDatastoreProxyHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCreateDatastoreProxyProcedure,
		svc.CreateDatastoreProxy,
		connect.WithSchema(clusterControlPlaneServiceCreateDatastoreProxyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceDatastoreCredentialHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDatastoreCredentialProcedure,
		svc.DatastoreCredential,
		connect.WithSchema(clusterControlPlaneServiceDatastoreCredentialMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceCloudProviderPermissionsStatusHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCloudProviderPermissionsStatusProcedure,
		svc.CloudProviderPermissionsStatus,
		connect.WithSchema(clusterControlPlaneServiceCloudProviderPermissionsStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServicePatchCloudContractHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServicePatchCloudContractProcedure,
		svc.PatchCloudContract,
		connect.WithSchema(clusterControlPlaneServicePatchCloudContractMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceReadCloudContractHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceReadCloudContractProcedure,
		svc.ReadCloudContract,
		connect.WithSchema(clusterControlPlaneServiceReadCloudContractMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceDockerConfigFileForRegistryHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDockerConfigFileForRegistryProcedure,
		svc.DockerConfigFileForRegistry,
		connect.WithSchema(clusterControlPlaneServiceDockerConfigFileForRegistryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceECRTokenForRegistryHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceECRTokenForRegistryProcedure,
		svc.ECRTokenForRegistry,
		connect.WithSchema(clusterControlPlaneServiceECRTokenForRegistryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceAssumeRoleCredentialsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceAssumeRoleCredentialsProcedure,
		svc.AssumeRoleCredentials,
		connect.WithSchema(clusterControlPlaneServiceAssumeRoleCredentialsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceAssumeRoleChainTargetsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceAssumeRoleChainTargetsProcedure,
		svc.AssumeRoleChainTargets,
		connect.WithSchema(clusterControlPlaneServiceAssumeRoleChainTargetsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceCertificateAuthorityDataHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCertificateAuthorityDataProcedure,
		svc.CertificateAuthorityData,
		connect.WithSchema(clusterControlPlaneServiceCertificateAuthorityDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceEKSBearerTokenHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceEKSBearerTokenProcedure,
		svc.EKSBearerToken,
		connect.WithSchema(clusterControlPlaneServiceEKSBearerTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceListRepositoriesForRegistryHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceListRepositoriesForRegistryProcedure,
		svc.ListRepositoriesForRegistry,
		connect.WithSchema(clusterControlPlaneServiceListRepositoriesForRegistryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceListImagesForRepositoryHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceListImagesForRepositoryProcedure,
		svc.ListImagesForRepository,
		connect.WithSchema(clusterControlPlaneServiceListImagesForRepositoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceListDatastoresHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceListDatastoresProcedure,
		svc.ListDatastores,
		connect.WithSchema(clusterControlPlaneServiceListDatastoresMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceDatastoreStatusHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDatastoreStatusProcedure,
		svc.DatastoreStatus,
		connect.WithSchema(clusterControlPlaneServiceDatastoreStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceRegistryStatusHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceRegistryStatusProcedure,
		svc.RegistryStatus,
		connect.WithSchema(clusterControlPlaneServiceRegistryStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceEnableExternalEnvGroupProvidersHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceEnableExternalEnvGroupProvidersProcedure,
		svc.EnableExternalEnvGroupProviders,
		connect.WithSchema(clusterControlPlaneServiceEnableExternalEnvGroupProvidersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceAreExternalEnvGroupProvidersEnabledHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceAreExternalEnvGroupProvidersEnabledProcedure,
		svc.AreExternalEnvGroupProvidersEnabled,
		connect.WithSchema(clusterControlPlaneServiceAreExternalEnvGroupProvidersEnabledMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceCreateOrUpdateEnvGroupHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceCreateOrUpdateEnvGroupProcedure,
		svc.CreateOrUpdateEnvGroup,
		connect.WithSchema(clusterControlPlaneServiceCreateOrUpdateEnvGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceDeleteEnvGroupHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceDeleteEnvGroupProcedure,
		svc.DeleteEnvGroup,
		connect.WithSchema(clusterControlPlaneServiceDeleteEnvGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceAppsLinkedToEnvGroupHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceAppsLinkedToEnvGroupProcedure,
		svc.AppsLinkedToEnvGroup,
		connect.WithSchema(clusterControlPlaneServiceAppsLinkedToEnvGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceListEnvGroupsHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceListEnvGroupsProcedure,
		svc.ListEnvGroups,
		connect.WithSchema(clusterControlPlaneServiceListEnvGroupsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceUpdateNotificationConfigHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceUpdateNotificationConfigProcedure,
		svc.UpdateNotificationConfig,
		connect.WithSchema(clusterControlPlaneServiceUpdateNotificationConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceNotificationConfigHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceNotificationConfigProcedure,
		svc.NotificationConfig,
		connect.WithSchema(clusterControlPlaneServiceNotificationConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	clusterControlPlaneServiceSystemStatusHistoryHandler := connect.NewUnaryHandler(
		ClusterControlPlaneServiceSystemStatusHistoryProcedure,
		svc.SystemStatusHistory,
		connect.WithSchema(clusterControlPlaneServiceSystemStatusHistoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/porter.v1.ClusterControlPlaneService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClusterControlPlaneServiceMachineTypesProcedure:
			clusterControlPlaneServiceMachineTypesHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceQuotaIncreaseProcedure:
			clusterControlPlaneServiceQuotaIncreaseHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateCloudProviderCredentialsProcedure:
			clusterControlPlaneServiceUpdateCloudProviderCredentialsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceQuotaPreflightCheckProcedure:
			clusterControlPlaneServiceQuotaPreflightCheckHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServicePreflightCheckProcedure:
			clusterControlPlaneServicePreflightCheckHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCloudContractPreflightCheckProcedure:
			clusterControlPlaneServiceCloudContractPreflightCheckHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCreateAssumeRoleChainProcedure:
			clusterControlPlaneServiceCreateAssumeRoleChainHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceSaveAzureCredentialsProcedure:
			clusterControlPlaneServiceSaveAzureCredentialsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceKubeConfigForClusterProcedure:
			clusterControlPlaneServiceKubeConfigForClusterHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateContractProcedure:
			clusterControlPlaneServiceUpdateContractHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceReadContractProcedure:
			clusterControlPlaneServiceReadContractHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceClusterStatusProcedure:
			clusterControlPlaneServiceClusterStatusHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeleteClusterProcedure:
			clusterControlPlaneServiceDeleteClusterHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceTokenForRegistryProcedure:
			clusterControlPlaneServiceTokenForRegistryHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceContractComplianceChecksProcedure:
			clusterControlPlaneServiceContractComplianceChecksHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceValidatePorterAppProcedure:
			clusterControlPlaneServiceValidatePorterAppHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceApplyPorterAppProcedure:
			clusterControlPlaneServiceApplyPorterAppHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateAppProcedure:
			clusterControlPlaneServiceUpdateAppHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateAddonProcedure:
			clusterControlPlaneServiceUpdateAddonHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeleteAddonProcedure:
			clusterControlPlaneServiceDeleteAddonHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceRollbackRevisionProcedure:
			clusterControlPlaneServiceRollbackRevisionHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateRevisionStatusProcedure:
			clusterControlPlaneServiceUpdateRevisionStatusHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceAppRevisionStatusProcedure:
			clusterControlPlaneServiceAppRevisionStatusHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeletePorterAppProcedure:
			clusterControlPlaneServiceDeletePorterAppHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeleteAppDeploymentProcedure:
			clusterControlPlaneServiceDeleteAppDeploymentHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeleteDeploymentTargetProcedure:
			clusterControlPlaneServiceDeleteDeploymentTargetHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCurrentAppRevisionProcedure:
			clusterControlPlaneServiceCurrentAppRevisionHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceListAppRevisionsProcedure:
			clusterControlPlaneServiceListAppRevisionsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceLatestAppRevisionsProcedure:
			clusterControlPlaneServiceLatestAppRevisionsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceGetAppRevisionProcedure:
			clusterControlPlaneServiceGetAppRevisionHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceAppTemplateProcedure:
			clusterControlPlaneServiceAppTemplateHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateAppTemplateProcedure:
			clusterControlPlaneServiceUpdateAppTemplateHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceLatestAddonsProcedure:
			clusterControlPlaneServiceLatestAddonsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServicePredeployStatusProcedure:
			clusterControlPlaneServicePredeployStatusHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeploymentTargetDetailsProcedure:
			clusterControlPlaneServiceDeploymentTargetDetailsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCreateDeploymentTargetProcedure:
			clusterControlPlaneServiceCreateDeploymentTargetHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeploymentTargetsProcedure:
			clusterControlPlaneServiceDeploymentTargetsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDefaultDeploymentTargetProcedure:
			clusterControlPlaneServiceDefaultDeploymentTargetHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceSeedAppRevisionsProcedure:
			clusterControlPlaneServiceSeedAppRevisionsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceEnvGroupVariablesProcedure:
			clusterControlPlaneServiceEnvGroupVariablesHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceLatestEnvGroupWithVariablesProcedure:
			clusterControlPlaneServiceLatestEnvGroupWithVariablesHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceAppEnvVariablesProcedure:
			clusterControlPlaneServiceAppEnvVariablesHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateAppImageProcedure:
			clusterControlPlaneServiceUpdateAppImageHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateAppBuildSettingsProcedure:
			clusterControlPlaneServiceUpdateAppBuildSettingsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateAppsLinkedToEnvGroupProcedure:
			clusterControlPlaneServiceUpdateAppsLinkedToEnvGroupHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceAppHelmValuesProcedure:
			clusterControlPlaneServiceAppHelmValuesHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceManualServiceRunProcedure:
			clusterControlPlaneServiceManualServiceRunHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCancelJobRunProcedure:
			clusterControlPlaneServiceCancelJobRunHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceJobRunStatusProcedure:
			clusterControlPlaneServiceJobRunStatusHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceJobRunsProcedure:
			clusterControlPlaneServiceJobRunsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceClusterNetworkSettingsProcedure:
			clusterControlPlaneServiceClusterNetworkSettingsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceSharedNetworkSettingsProcedure:
			clusterControlPlaneServiceSharedNetworkSettingsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceImagesProcedure:
			clusterControlPlaneServiceImagesHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCreateAppInstanceProcedure:
			clusterControlPlaneServiceCreateAppInstanceHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeleteAppInstanceProcedure:
			clusterControlPlaneServiceDeleteAppInstanceHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceListAppInstancesProcedure:
			clusterControlPlaneServiceListAppInstancesHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceTemplateAppManifestsProcedure:
			clusterControlPlaneServiceTemplateAppManifestsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCreateNotificationProcedure:
			clusterControlPlaneServiceCreateNotificationHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceRecordPrometheusAlertProcedure:
			clusterControlPlaneServiceRecordPrometheusAlertHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateServiceDeploymentStatusProcedure:
			clusterControlPlaneServiceUpdateServiceDeploymentStatusHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceConnectHostedProjectProcedure:
			clusterControlPlaneServiceConnectHostedProjectHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateDatastoreProcedure:
			clusterControlPlaneServiceUpdateDatastoreHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeleteDatastoreProcedure:
			clusterControlPlaneServiceDeleteDatastoreHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCreateDatastoreProxyProcedure:
			clusterControlPlaneServiceCreateDatastoreProxyHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDatastoreCredentialProcedure:
			clusterControlPlaneServiceDatastoreCredentialHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCloudProviderPermissionsStatusProcedure:
			clusterControlPlaneServiceCloudProviderPermissionsStatusHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServicePatchCloudContractProcedure:
			clusterControlPlaneServicePatchCloudContractHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceReadCloudContractProcedure:
			clusterControlPlaneServiceReadCloudContractHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDockerConfigFileForRegistryProcedure:
			clusterControlPlaneServiceDockerConfigFileForRegistryHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceECRTokenForRegistryProcedure:
			clusterControlPlaneServiceECRTokenForRegistryHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceAssumeRoleCredentialsProcedure:
			clusterControlPlaneServiceAssumeRoleCredentialsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceAssumeRoleChainTargetsProcedure:
			clusterControlPlaneServiceAssumeRoleChainTargetsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCertificateAuthorityDataProcedure:
			clusterControlPlaneServiceCertificateAuthorityDataHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceEKSBearerTokenProcedure:
			clusterControlPlaneServiceEKSBearerTokenHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceListRepositoriesForRegistryProcedure:
			clusterControlPlaneServiceListRepositoriesForRegistryHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceListImagesForRepositoryProcedure:
			clusterControlPlaneServiceListImagesForRepositoryHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceListDatastoresProcedure:
			clusterControlPlaneServiceListDatastoresHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDatastoreStatusProcedure:
			clusterControlPlaneServiceDatastoreStatusHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceRegistryStatusProcedure:
			clusterControlPlaneServiceRegistryStatusHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceEnableExternalEnvGroupProvidersProcedure:
			clusterControlPlaneServiceEnableExternalEnvGroupProvidersHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceAreExternalEnvGroupProvidersEnabledProcedure:
			clusterControlPlaneServiceAreExternalEnvGroupProvidersEnabledHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceCreateOrUpdateEnvGroupProcedure:
			clusterControlPlaneServiceCreateOrUpdateEnvGroupHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceDeleteEnvGroupProcedure:
			clusterControlPlaneServiceDeleteEnvGroupHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceAppsLinkedToEnvGroupProcedure:
			clusterControlPlaneServiceAppsLinkedToEnvGroupHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceListEnvGroupsProcedure:
			clusterControlPlaneServiceListEnvGroupsHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceUpdateNotificationConfigProcedure:
			clusterControlPlaneServiceUpdateNotificationConfigHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceNotificationConfigProcedure:
			clusterControlPlaneServiceNotificationConfigHandler.ServeHTTP(w, r)
		case ClusterControlPlaneServiceSystemStatusHistoryProcedure:
			clusterControlPlaneServiceSystemStatusHistoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClusterControlPlaneServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterControlPlaneServiceHandler struct{}

func (UnimplementedClusterControlPlaneServiceHandler) MachineTypes(context.Context, *connect.Request[v1.MachineTypesRequest]) (*connect.Response[v1.MachineTypesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.MachineTypes is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) QuotaIncrease(context.Context, *connect.Request[v1.QuotaIncreaseRequest]) (*connect.Response[v1.QuotaIncreaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.QuotaIncrease is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateCloudProviderCredentials(context.Context, *connect.Request[v1.UpdateCloudProviderCredentialsRequest]) (*connect.Response[v1.UpdateCloudProviderCredentialsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateCloudProviderCredentials is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) QuotaPreflightCheck(context.Context, *connect.Request[v1.QuotaPreflightCheckRequest]) (*connect.Response[v1.QuotaPreflightCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.QuotaPreflightCheck is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) PreflightCheck(context.Context, *connect.Request[v1.PreflightCheckRequest]) (*connect.Response[v1.PreflightCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.PreflightCheck is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CloudContractPreflightCheck(context.Context, *connect.Request[v1.CloudContractPreflightCheckRequest]) (*connect.Response[v1.CloudContractPreflightCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CloudContractPreflightCheck is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CreateAssumeRoleChain(context.Context, *connect.Request[v1.CreateAssumeRoleChainRequest]) (*connect.Response[v1.CreateAssumeRoleChainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CreateAssumeRoleChain is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) SaveAzureCredentials(context.Context, *connect.Request[v1.SaveAzureCredentialsRequest]) (*connect.Response[v1.SaveAzureCredentialsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.SaveAzureCredentials is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) KubeConfigForCluster(context.Context, *connect.Request[v1.KubeConfigForClusterRequest]) (*connect.Response[v1.KubeConfigForClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.KubeConfigForCluster is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateContract(context.Context, *connect.Request[v1.UpdateContractRequest]) (*connect.Response[v1.UpdateContractResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateContract is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ReadContract(context.Context, *connect.Request[v1.ReadContractRequest]) (*connect.Response[v1.ReadContractResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ReadContract is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ClusterStatus(context.Context, *connect.Request[v1.ClusterStatusRequest]) (*connect.Response[v1.ClusterStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ClusterStatus is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeleteCluster(context.Context, *connect.Request[v1.DeleteClusterRequest]) (*connect.Response[v1.DeleteClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeleteCluster is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) TokenForRegistry(context.Context, *connect.Request[v1.TokenForRegistryRequest]) (*connect.Response[v1.TokenForRegistryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.TokenForRegistry is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ContractComplianceChecks(context.Context, *connect.Request[v1.ContractComplianceChecksRequest]) (*connect.Response[v1.ContractComplianceChecksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ContractComplianceChecks is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ValidatePorterApp(context.Context, *connect.Request[v1.ValidatePorterAppRequest]) (*connect.Response[v1.ValidatePorterAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ValidatePorterApp is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ApplyPorterApp(context.Context, *connect.Request[v1.ApplyPorterAppRequest]) (*connect.Response[v1.ApplyPorterAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ApplyPorterApp is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateApp is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateAddon(context.Context, *connect.Request[v1.UpdateAddonRequest]) (*connect.Response[v1.UpdateAddonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateAddon is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeleteAddon(context.Context, *connect.Request[v1.DeleteAddonRequest]) (*connect.Response[v1.DeleteAddonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeleteAddon is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) RollbackRevision(context.Context, *connect.Request[v1.RollbackRevisionRequest]) (*connect.Response[v1.RollbackRevisionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.RollbackRevision is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateRevisionStatus(context.Context, *connect.Request[v1.UpdateRevisionStatusRequest]) (*connect.Response[v1.UpdateRevisionStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateRevisionStatus is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) AppRevisionStatus(context.Context, *connect.Request[v1.AppRevisionStatusRequest]) (*connect.Response[v1.AppRevisionStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.AppRevisionStatus is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeletePorterApp(context.Context, *connect.Request[v1.DeletePorterAppRequest]) (*connect.Response[v1.DeletePorterAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeletePorterApp is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeleteAppDeployment(context.Context, *connect.Request[v1.DeleteAppDeploymentRequest]) (*connect.Response[v1.DeleteAppDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeleteAppDeployment is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeleteDeploymentTarget(context.Context, *connect.Request[v1.DeleteDeploymentTargetRequest]) (*connect.Response[v1.DeleteDeploymentTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeleteDeploymentTarget is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CurrentAppRevision(context.Context, *connect.Request[v1.CurrentAppRevisionRequest]) (*connect.Response[v1.CurrentAppRevisionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CurrentAppRevision is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ListAppRevisions(context.Context, *connect.Request[v1.ListAppRevisionsRequest]) (*connect.Response[v1.ListAppRevisionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ListAppRevisions is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) LatestAppRevisions(context.Context, *connect.Request[v1.LatestAppRevisionsRequest]) (*connect.Response[v1.LatestAppRevisionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.LatestAppRevisions is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) GetAppRevision(context.Context, *connect.Request[v1.GetAppRevisionRequest]) (*connect.Response[v1.GetAppRevisionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.GetAppRevision is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) AppTemplate(context.Context, *connect.Request[v1.AppTemplateRequest]) (*connect.Response[v1.AppTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.AppTemplate is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateAppTemplate(context.Context, *connect.Request[v1.UpdateAppTemplateRequest]) (*connect.Response[v1.UpdateAppTemplateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateAppTemplate is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) LatestAddons(context.Context, *connect.Request[v1.LatestAddonsRequest]) (*connect.Response[v1.LatestAddonsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.LatestAddons is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) PredeployStatus(context.Context, *connect.Request[v1.PredeployStatusRequest]) (*connect.Response[v1.PredeployStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.PredeployStatus is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeploymentTargetDetails(context.Context, *connect.Request[v1.DeploymentTargetDetailsRequest]) (*connect.Response[v1.DeploymentTargetDetailsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeploymentTargetDetails is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CreateDeploymentTarget(context.Context, *connect.Request[v1.CreateDeploymentTargetRequest]) (*connect.Response[v1.CreateDeploymentTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CreateDeploymentTarget is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeploymentTargets(context.Context, *connect.Request[v1.DeploymentTargetsRequest]) (*connect.Response[v1.DeploymentTargetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeploymentTargets is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DefaultDeploymentTarget(context.Context, *connect.Request[v1.DefaultDeploymentTargetRequest]) (*connect.Response[v1.DefaultDeploymentTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DefaultDeploymentTarget is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) SeedAppRevisions(context.Context, *connect.Request[v1.SeedAppRevisionsRequest]) (*connect.Response[v1.SeedAppRevisionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.SeedAppRevisions is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) EnvGroupVariables(context.Context, *connect.Request[v1.EnvGroupVariablesRequest]) (*connect.Response[v1.EnvGroupVariablesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.EnvGroupVariables is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) LatestEnvGroupWithVariables(context.Context, *connect.Request[v1.LatestEnvGroupWithVariablesRequest]) (*connect.Response[v1.LatestEnvGroupWithVariablesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.LatestEnvGroupWithVariables is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) AppEnvVariables(context.Context, *connect.Request[v1.AppEnvVariablesRequest]) (*connect.Response[v1.AppEnvVariablesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.AppEnvVariables is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateAppImage(context.Context, *connect.Request[v1.UpdateAppImageRequest]) (*connect.Response[v1.UpdateAppImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateAppImage is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateAppBuildSettings(context.Context, *connect.Request[v1.UpdateAppBuildSettingsRequest]) (*connect.Response[v1.UpdateAppBuildSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateAppBuildSettings is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateAppsLinkedToEnvGroup(context.Context, *connect.Request[v1.UpdateAppsLinkedToEnvGroupRequest]) (*connect.Response[v1.UpdateAppsLinkedToEnvGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateAppsLinkedToEnvGroup is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) AppHelmValues(context.Context, *connect.Request[v1.AppHelmValuesRequest]) (*connect.Response[v1.AppHelmValuesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.AppHelmValues is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ManualServiceRun(context.Context, *connect.Request[v1.ManualServiceRunRequest]) (*connect.Response[v1.ManualServiceRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ManualServiceRun is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CancelJobRun(context.Context, *connect.Request[v1.CancelJobRunRequest]) (*connect.Response[v1.CancelJobRunResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CancelJobRun is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) JobRunStatus(context.Context, *connect.Request[v1.JobRunStatusRequest]) (*connect.Response[v1.JobRunStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.JobRunStatus is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) JobRuns(context.Context, *connect.Request[v1.JobRunsRequest]) (*connect.Response[v1.JobRunsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.JobRuns is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ClusterNetworkSettings(context.Context, *connect.Request[v1.ClusterNetworkSettingsRequest]) (*connect.Response[v1.ClusterNetworkSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ClusterNetworkSettings is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) SharedNetworkSettings(context.Context, *connect.Request[v1.SharedNetworkSettingsRequest]) (*connect.Response[v1.SharedNetworkSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.SharedNetworkSettings is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) Images(context.Context, *connect.Request[v1.ImagesRequest]) (*connect.Response[v1.ImagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.Images is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CreateAppInstance(context.Context, *connect.Request[v1.CreateAppInstanceRequest]) (*connect.Response[v1.CreateAppInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CreateAppInstance is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeleteAppInstance(context.Context, *connect.Request[v1.DeleteAppInstanceRequest]) (*connect.Response[v1.DeleteAppInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeleteAppInstance is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ListAppInstances(context.Context, *connect.Request[v1.ListAppInstancesRequest]) (*connect.Response[v1.ListAppInstancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ListAppInstances is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) TemplateAppManifests(context.Context, *connect.Request[v1.TemplateAppManifestsRequest]) (*connect.Response[v1.TemplateAppManifestsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.TemplateAppManifests is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CreateNotification(context.Context, *connect.Request[v1.CreateNotificationRequest]) (*connect.Response[v1.CreateNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CreateNotification is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) RecordPrometheusAlert(context.Context, *connect.Request[v1.RecordPrometheusAlertRequest]) (*connect.Response[v1.RecordPrometheusAlertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.RecordPrometheusAlert is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateServiceDeploymentStatus(context.Context, *connect.Request[v1.UpdateServiceDeploymentStatusRequest]) (*connect.Response[v1.UpdateServiceDeploymentStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateServiceDeploymentStatus is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ConnectHostedProject(context.Context, *connect.Request[v1.ConnectHostedProjectRequest]) (*connect.Response[v1.ConnectHostedProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ConnectHostedProject is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateDatastore(context.Context, *connect.Request[v1.UpdateDatastoreRequest]) (*connect.Response[v1.UpdateDatastoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateDatastore is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeleteDatastore(context.Context, *connect.Request[v1.DeleteDatastoreRequest]) (*connect.Response[v1.DeleteDatastoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeleteDatastore is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CreateDatastoreProxy(context.Context, *connect.Request[v1.CreateDatastoreProxyRequest]) (*connect.Response[v1.CreateDatastoreProxyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CreateDatastoreProxy is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DatastoreCredential(context.Context, *connect.Request[v1.DatastoreCredentialRequest]) (*connect.Response[v1.DatastoreCredentialResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DatastoreCredential is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CloudProviderPermissionsStatus(context.Context, *connect.Request[v1.CloudProviderPermissionsStatusRequest]) (*connect.Response[v1.CloudProviderPermissionsStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CloudProviderPermissionsStatus is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) PatchCloudContract(context.Context, *connect.Request[v1.PatchCloudContractRequest]) (*connect.Response[v1.PatchCloudContractResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.PatchCloudContract is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ReadCloudContract(context.Context, *connect.Request[v1.ReadCloudContractRequest]) (*connect.Response[v1.ReadCloudContractResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ReadCloudContract is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DockerConfigFileForRegistry(context.Context, *connect.Request[v1.DockerConfigFileForRegistryRequest]) (*connect.Response[v1.DockerConfigFileForRegistryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DockerConfigFileForRegistry is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ECRTokenForRegistry(context.Context, *connect.Request[v1.ECRTokenForRegistryRequest]) (*connect.Response[v1.ECRTokenForRegistryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ECRTokenForRegistry is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) AssumeRoleCredentials(context.Context, *connect.Request[v1.AssumeRoleCredentialsRequest]) (*connect.Response[v1.AssumeRoleCredentialsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.AssumeRoleCredentials is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) AssumeRoleChainTargets(context.Context, *connect.Request[v1.AssumeRoleChainTargetsRequest]) (*connect.Response[v1.AssumeRoleChainTargetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.AssumeRoleChainTargets is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CertificateAuthorityData(context.Context, *connect.Request[v1.CertificateAuthorityDataRequest]) (*connect.Response[v1.CertificateAuthorityDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CertificateAuthorityData is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) EKSBearerToken(context.Context, *connect.Request[v1.EKSBearerTokenRequest]) (*connect.Response[v1.EKSBearerTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.EKSBearerToken is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ListRepositoriesForRegistry(context.Context, *connect.Request[v1.ListRepositoriesForRegistryRequest]) (*connect.Response[v1.ListRepositoriesForRegistryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ListRepositoriesForRegistry is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ListImagesForRepository(context.Context, *connect.Request[v1.ListImagesForRepositoryRequest]) (*connect.Response[v1.ListImagesForRepositoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ListImagesForRepository is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ListDatastores(context.Context, *connect.Request[v1.ListDatastoresRequest]) (*connect.Response[v1.ListDatastoresResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ListDatastores is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DatastoreStatus(context.Context, *connect.Request[v1.DatastoreStatusRequest]) (*connect.Response[v1.DatastoreStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DatastoreStatus is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) RegistryStatus(context.Context, *connect.Request[v1.RegistryStatusRequest]) (*connect.Response[v1.RegistryStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.RegistryStatus is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) EnableExternalEnvGroupProviders(context.Context, *connect.Request[v1.EnableExternalEnvGroupProvidersRequest]) (*connect.Response[v1.EnableExternalEnvGroupProvidersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.EnableExternalEnvGroupProviders is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) AreExternalEnvGroupProvidersEnabled(context.Context, *connect.Request[v1.AreExternalEnvGroupProvidersEnabledRequest]) (*connect.Response[v1.AreExternalEnvGroupProvidersEnabledResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.AreExternalEnvGroupProvidersEnabled is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) CreateOrUpdateEnvGroup(context.Context, *connect.Request[v1.CreateOrUpdateEnvGroupRequest]) (*connect.Response[v1.CreateOrUpdateEnvGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CreateOrUpdateEnvGroup is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) DeleteEnvGroup(context.Context, *connect.Request[v1.DeleteEnvGroupRequest]) (*connect.Response[v1.DeleteEnvGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.DeleteEnvGroup is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) AppsLinkedToEnvGroup(context.Context, *connect.Request[v1.AppsLinkedToEnvGroupRequest]) (*connect.Response[v1.AppsLinkedToEnvGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.AppsLinkedToEnvGroup is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) ListEnvGroups(context.Context, *connect.Request[v1.ListEnvGroupsRequest]) (*connect.Response[v1.ListEnvGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.ListEnvGroups is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateNotificationConfig(context.Context, *connect.Request[v1.UpdateNotificationConfigRequest]) (*connect.Response[v1.UpdateNotificationConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateNotificationConfig is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) NotificationConfig(context.Context, *connect.Request[v1.NotificationConfigRequest]) (*connect.Response[v1.NotificationConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.NotificationConfig is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) SystemStatusHistory(context.Context, *connect.Request[v1.SystemStatusHistoryRequest]) (*connect.Response[v1.SystemStatusHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.SystemStatusHistory is not implemented"))
}
