// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: porter/v1/cluster_control_plane.proto

package porterv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/porter-dev/api-contracts/generated/go/porter/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ClusterControlPlaneServiceName is the fully-qualified name of the ClusterControlPlaneService
	// service.
	ClusterControlPlaneServiceName = "porter.v1.ClusterControlPlaneService"
)

// ClusterControlPlaneServiceClient is a client for the porter.v1.ClusterControlPlaneService
// service.
type ClusterControlPlaneServiceClient interface {
	// CreateAssumeRoleChain creates a new assume role chain for a given project
	CreateAssumeRoleChain(context.Context, *connect_go.Request[v1.CreateAssumeRoleChainRequest]) (*connect_go.Response[v1.CreateAssumeRoleChainResponse], error)
	// AssumeRoleChainTargets gets the final destination target_arns for a given project
	AssumeRoleChainTargets(context.Context, *connect_go.Request[v1.AssumeRoleChainTargetsRequest]) (*connect_go.Response[v1.AssumeRoleChainTargetsResponse], error)
	// EKSBearerToken gets a bearer token for programatic access to an EKS cluster's kubernetes API
	EKSBearerToken(context.Context, *connect_go.Request[v1.EKSBearerTokenRequest]) (*connect_go.Response[v1.EKSBearerTokenResponse], error)
	// KubeConfigForCluster gets a valid kubeconfig from the management cluster, for a given workload cluster
	KubeConfigForCluster(context.Context, *connect_go.Request[v1.KubeConfigForClusterRequest]) (*connect_go.Response[v1.KubeConfigForClusterResponse], error)
	// UpdateContract takes in a Porter Contract, actioning upon it where necessary
	UpdateContract(context.Context, *connect_go.Request[v1.UpdateContractRequest]) (*connect_go.Response[v1.UpdateContractResponse], error)
}

// NewClusterControlPlaneServiceClient constructs a client for the
// porter.v1.ClusterControlPlaneService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterControlPlaneServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ClusterControlPlaneServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &clusterControlPlaneServiceClient{
		createAssumeRoleChain: connect_go.NewClient[v1.CreateAssumeRoleChainRequest, v1.CreateAssumeRoleChainResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/CreateAssumeRoleChain",
			opts...,
		),
		assumeRoleChainTargets: connect_go.NewClient[v1.AssumeRoleChainTargetsRequest, v1.AssumeRoleChainTargetsResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/AssumeRoleChainTargets",
			opts...,
		),
		eKSBearerToken: connect_go.NewClient[v1.EKSBearerTokenRequest, v1.EKSBearerTokenResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/EKSBearerToken",
			opts...,
		),
		kubeConfigForCluster: connect_go.NewClient[v1.KubeConfigForClusterRequest, v1.KubeConfigForClusterResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/KubeConfigForCluster",
			opts...,
		),
		updateContract: connect_go.NewClient[v1.UpdateContractRequest, v1.UpdateContractResponse](
			httpClient,
			baseURL+"/porter.v1.ClusterControlPlaneService/UpdateContract",
			opts...,
		),
	}
}

// clusterControlPlaneServiceClient implements ClusterControlPlaneServiceClient.
type clusterControlPlaneServiceClient struct {
	createAssumeRoleChain  *connect_go.Client[v1.CreateAssumeRoleChainRequest, v1.CreateAssumeRoleChainResponse]
	assumeRoleChainTargets *connect_go.Client[v1.AssumeRoleChainTargetsRequest, v1.AssumeRoleChainTargetsResponse]
	eKSBearerToken         *connect_go.Client[v1.EKSBearerTokenRequest, v1.EKSBearerTokenResponse]
	kubeConfigForCluster   *connect_go.Client[v1.KubeConfigForClusterRequest, v1.KubeConfigForClusterResponse]
	updateContract         *connect_go.Client[v1.UpdateContractRequest, v1.UpdateContractResponse]
}

// CreateAssumeRoleChain calls porter.v1.ClusterControlPlaneService.CreateAssumeRoleChain.
func (c *clusterControlPlaneServiceClient) CreateAssumeRoleChain(ctx context.Context, req *connect_go.Request[v1.CreateAssumeRoleChainRequest]) (*connect_go.Response[v1.CreateAssumeRoleChainResponse], error) {
	return c.createAssumeRoleChain.CallUnary(ctx, req)
}

// AssumeRoleChainTargets calls porter.v1.ClusterControlPlaneService.AssumeRoleChainTargets.
func (c *clusterControlPlaneServiceClient) AssumeRoleChainTargets(ctx context.Context, req *connect_go.Request[v1.AssumeRoleChainTargetsRequest]) (*connect_go.Response[v1.AssumeRoleChainTargetsResponse], error) {
	return c.assumeRoleChainTargets.CallUnary(ctx, req)
}

// EKSBearerToken calls porter.v1.ClusterControlPlaneService.EKSBearerToken.
func (c *clusterControlPlaneServiceClient) EKSBearerToken(ctx context.Context, req *connect_go.Request[v1.EKSBearerTokenRequest]) (*connect_go.Response[v1.EKSBearerTokenResponse], error) {
	return c.eKSBearerToken.CallUnary(ctx, req)
}

// KubeConfigForCluster calls porter.v1.ClusterControlPlaneService.KubeConfigForCluster.
func (c *clusterControlPlaneServiceClient) KubeConfigForCluster(ctx context.Context, req *connect_go.Request[v1.KubeConfigForClusterRequest]) (*connect_go.Response[v1.KubeConfigForClusterResponse], error) {
	return c.kubeConfigForCluster.CallUnary(ctx, req)
}

// UpdateContract calls porter.v1.ClusterControlPlaneService.UpdateContract.
func (c *clusterControlPlaneServiceClient) UpdateContract(ctx context.Context, req *connect_go.Request[v1.UpdateContractRequest]) (*connect_go.Response[v1.UpdateContractResponse], error) {
	return c.updateContract.CallUnary(ctx, req)
}

// ClusterControlPlaneServiceHandler is an implementation of the
// porter.v1.ClusterControlPlaneService service.
type ClusterControlPlaneServiceHandler interface {
	// CreateAssumeRoleChain creates a new assume role chain for a given project
	CreateAssumeRoleChain(context.Context, *connect_go.Request[v1.CreateAssumeRoleChainRequest]) (*connect_go.Response[v1.CreateAssumeRoleChainResponse], error)
	// AssumeRoleChainTargets gets the final destination target_arns for a given project
	AssumeRoleChainTargets(context.Context, *connect_go.Request[v1.AssumeRoleChainTargetsRequest]) (*connect_go.Response[v1.AssumeRoleChainTargetsResponse], error)
	// EKSBearerToken gets a bearer token for programatic access to an EKS cluster's kubernetes API
	EKSBearerToken(context.Context, *connect_go.Request[v1.EKSBearerTokenRequest]) (*connect_go.Response[v1.EKSBearerTokenResponse], error)
	// KubeConfigForCluster gets a valid kubeconfig from the management cluster, for a given workload cluster
	KubeConfigForCluster(context.Context, *connect_go.Request[v1.KubeConfigForClusterRequest]) (*connect_go.Response[v1.KubeConfigForClusterResponse], error)
	// UpdateContract takes in a Porter Contract, actioning upon it where necessary
	UpdateContract(context.Context, *connect_go.Request[v1.UpdateContractRequest]) (*connect_go.Response[v1.UpdateContractResponse], error)
}

// NewClusterControlPlaneServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterControlPlaneServiceHandler(svc ClusterControlPlaneServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/porter.v1.ClusterControlPlaneService/CreateAssumeRoleChain", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/CreateAssumeRoleChain",
		svc.CreateAssumeRoleChain,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/AssumeRoleChainTargets", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/AssumeRoleChainTargets",
		svc.AssumeRoleChainTargets,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/EKSBearerToken", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/EKSBearerToken",
		svc.EKSBearerToken,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/KubeConfigForCluster", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/KubeConfigForCluster",
		svc.KubeConfigForCluster,
		opts...,
	))
	mux.Handle("/porter.v1.ClusterControlPlaneService/UpdateContract", connect_go.NewUnaryHandler(
		"/porter.v1.ClusterControlPlaneService/UpdateContract",
		svc.UpdateContract,
		opts...,
	))
	return "/porter.v1.ClusterControlPlaneService/", mux
}

// UnimplementedClusterControlPlaneServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterControlPlaneServiceHandler struct{}

func (UnimplementedClusterControlPlaneServiceHandler) CreateAssumeRoleChain(context.Context, *connect_go.Request[v1.CreateAssumeRoleChainRequest]) (*connect_go.Response[v1.CreateAssumeRoleChainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.CreateAssumeRoleChain is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) AssumeRoleChainTargets(context.Context, *connect_go.Request[v1.AssumeRoleChainTargetsRequest]) (*connect_go.Response[v1.AssumeRoleChainTargetsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.AssumeRoleChainTargets is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) EKSBearerToken(context.Context, *connect_go.Request[v1.EKSBearerTokenRequest]) (*connect_go.Response[v1.EKSBearerTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.EKSBearerToken is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) KubeConfigForCluster(context.Context, *connect_go.Request[v1.KubeConfigForClusterRequest]) (*connect_go.Response[v1.KubeConfigForClusterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.KubeConfigForCluster is not implemented"))
}

func (UnimplementedClusterControlPlaneServiceHandler) UpdateContract(context.Context, *connect_go.Request[v1.UpdateContractRequest]) (*connect_go.Response[v1.UpdateContractResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("porter.v1.ClusterControlPlaneService.UpdateContract is not implemented"))
}
