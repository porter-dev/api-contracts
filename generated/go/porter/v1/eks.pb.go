// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: porter/v1/eks.proto

package porterv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeGroupType int32

const (
	NodeGroupType_NODE_GROUP_TYPE_UNSPECIFIED NodeGroupType = 0
	NodeGroupType_NODE_GROUP_TYPE_SYSTEM      NodeGroupType = 1
	NodeGroupType_NODE_GROUP_TYPE_MONITORING  NodeGroupType = 2
	NodeGroupType_NODE_GROUP_TYPE_APPLICATION NodeGroupType = 3
	NodeGroupType_NODE_GROUP_TYPE_CUSTOM      NodeGroupType = 4
)

// Enum value maps for NodeGroupType.
var (
	NodeGroupType_name = map[int32]string{
		0: "NODE_GROUP_TYPE_UNSPECIFIED",
		1: "NODE_GROUP_TYPE_SYSTEM",
		2: "NODE_GROUP_TYPE_MONITORING",
		3: "NODE_GROUP_TYPE_APPLICATION",
		4: "NODE_GROUP_TYPE_CUSTOM",
	}
	NodeGroupType_value = map[string]int32{
		"NODE_GROUP_TYPE_UNSPECIFIED": 0,
		"NODE_GROUP_TYPE_SYSTEM":      1,
		"NODE_GROUP_TYPE_MONITORING":  2,
		"NODE_GROUP_TYPE_APPLICATION": 3,
		"NODE_GROUP_TYPE_CUSTOM":      4,
	}
)

func (x NodeGroupType) Enum() *NodeGroupType {
	p := new(NodeGroupType)
	*p = x
	return p
}

func (x NodeGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_eks_proto_enumTypes[0].Descriptor()
}

func (NodeGroupType) Type() protoreflect.EnumType {
	return &file_porter_v1_eks_proto_enumTypes[0]
}

func (x NodeGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeGroupType.Descriptor instead.
func (NodeGroupType) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_eks_proto_rawDescGZIP(), []int{0}
}

type LoadBalancerType int32

const (
	LoadBalancerType_LOAD_BALANCER_TYPE_UNSPECIFIED LoadBalancerType = 0
	LoadBalancerType_LOAD_BALANCER_TYPE_NLB         LoadBalancerType = 1
	LoadBalancerType_LOAD_BALANCER_TYPE_ALB         LoadBalancerType = 2
)

// Enum value maps for LoadBalancerType.
var (
	LoadBalancerType_name = map[int32]string{
		0: "LOAD_BALANCER_TYPE_UNSPECIFIED",
		1: "LOAD_BALANCER_TYPE_NLB",
		2: "LOAD_BALANCER_TYPE_ALB",
	}
	LoadBalancerType_value = map[string]int32{
		"LOAD_BALANCER_TYPE_UNSPECIFIED": 0,
		"LOAD_BALANCER_TYPE_NLB":         1,
		"LOAD_BALANCER_TYPE_ALB":         2,
	}
)

func (x LoadBalancerType) Enum() *LoadBalancerType {
	p := new(LoadBalancerType)
	*p = x
	return p
}

func (x LoadBalancerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadBalancerType) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_eks_proto_enumTypes[1].Descriptor()
}

func (LoadBalancerType) Type() protoreflect.EnumType {
	return &file_porter_v1_eks_proto_enumTypes[1]
}

func (x LoadBalancerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadBalancerType.Descriptor instead.
func (LoadBalancerType) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_eks_proto_rawDescGZIP(), []int{1}
}

type EKS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName     string          `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	ClusterVersion  string          `protobuf:"bytes,2,opt,name=cluster_version,json=clusterVersion,proto3" json:"cluster_version,omitempty"`
	CidrRange       string          `protobuf:"bytes,3,opt,name=cidr_range,json=cidrRange,proto3" json:"cidr_range,omitempty"`
	Region          string          `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	NodeGroups      []*EKSNodeGroup `protobuf:"bytes,5,rep,name=node_groups,json=nodeGroups,proto3" json:"node_groups,omitempty"`
	LoadBalancer    *LoadBalancer   `protobuf:"bytes,6,opt,name=load_balancer,json=loadBalancer,proto3" json:"load_balancer,omitempty"`
	EnableGuardDuty bool            `protobuf:"varint,7,opt,name=enable_guard_duty,json=enableGuardDuty,proto3" json:"enable_guard_duty,omitempty"`
	Logging         *EKSLogging     `protobuf:"bytes,8,opt,name=logging,proto3" json:"logging,omitempty"`
	// enable_kms_encryption triggers a KMS key creation and enables encryption on the EKS cluster with that key.  Once enabled, encryption can never be disabled.
	EnableKmsEncryption bool `protobuf:"varint,9,opt,name=enable_kms_encryption,json=enableKmsEncryption,proto3" json:"enable_kms_encryption,omitempty"`
}

func (x *EKS) Reset() {
	*x = EKS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_eks_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EKS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EKS) ProtoMessage() {}

func (x *EKS) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_eks_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EKS.ProtoReflect.Descriptor instead.
func (*EKS) Descriptor() ([]byte, []int) {
	return file_porter_v1_eks_proto_rawDescGZIP(), []int{0}
}

func (x *EKS) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *EKS) GetClusterVersion() string {
	if x != nil {
		return x.ClusterVersion
	}
	return ""
}

func (x *EKS) GetCidrRange() string {
	if x != nil {
		return x.CidrRange
	}
	return ""
}

func (x *EKS) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *EKS) GetNodeGroups() []*EKSNodeGroup {
	if x != nil {
		return x.NodeGroups
	}
	return nil
}

func (x *EKS) GetLoadBalancer() *LoadBalancer {
	if x != nil {
		return x.LoadBalancer
	}
	return nil
}

func (x *EKS) GetEnableGuardDuty() bool {
	if x != nil {
		return x.EnableGuardDuty
	}
	return false
}

func (x *EKS) GetLogging() *EKSLogging {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *EKS) GetEnableKmsEncryption() bool {
	if x != nil {
		return x.EnableKmsEncryption
	}
	return false
}

type EKSNodeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceType string `protobuf:"bytes,1,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	MinInstances uint32 `protobuf:"varint,2,opt,name=min_instances,json=minInstances,proto3" json:"min_instances,omitempty"`
	MaxInstances uint32 `protobuf:"varint,3,opt,name=max_instances,json=maxInstances,proto3" json:"max_instances,omitempty"`
	// node_group_type is used to specify the type of node group. This is used to specify what node groups are used by Porter, vs users.
	NodeGroupType NodeGroupType `protobuf:"varint,4,opt,name=node_group_type,json=nodeGroupType,proto3,enum=porter.v1.NodeGroupType" json:"node_group_type,omitempty"`
	// is_stateful is deprecated. It was initially used to specify if a nodegroup had state, and needed to be kept in a single AZ.
	//
	// Deprecated: Marked as deprecated in porter/v1/eks.proto.
	IsStateful bool `protobuf:"varint,5,opt,name=is_stateful,json=isStateful,proto3" json:"is_stateful,omitempty"`
	// additional_policies is a list of IAM policies to attach to the node group role, on top of the policies applied by Porter.
	AdditionalPolicies []string `protobuf:"bytes,6,rep,name=additional_policies,json=additionalPolicies,proto3" json:"additional_policies,omitempty"`
}

func (x *EKSNodeGroup) Reset() {
	*x = EKSNodeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_eks_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EKSNodeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EKSNodeGroup) ProtoMessage() {}

func (x *EKSNodeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_eks_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EKSNodeGroup.ProtoReflect.Descriptor instead.
func (*EKSNodeGroup) Descriptor() ([]byte, []int) {
	return file_porter_v1_eks_proto_rawDescGZIP(), []int{1}
}

func (x *EKSNodeGroup) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *EKSNodeGroup) GetMinInstances() uint32 {
	if x != nil {
		return x.MinInstances
	}
	return 0
}

func (x *EKSNodeGroup) GetMaxInstances() uint32 {
	if x != nil {
		return x.MaxInstances
	}
	return 0
}

func (x *EKSNodeGroup) GetNodeGroupType() NodeGroupType {
	if x != nil {
		return x.NodeGroupType
	}
	return NodeGroupType_NODE_GROUP_TYPE_UNSPECIFIED
}

// Deprecated: Marked as deprecated in porter/v1/eks.proto.
func (x *EKSNodeGroup) GetIsStateful() bool {
	if x != nil {
		return x.IsStateful
	}
	return false
}

func (x *EKSNodeGroup) GetAdditionalPolicies() []string {
	if x != nil {
		return x.AdditionalPolicies
	}
	return nil
}

type LoadBalancer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// load_balancer_type is the type of load balancer to deploy. If unspecified, this will be assumed to be NLB for AWS
	LoadBalancerType LoadBalancerType `protobuf:"varint,1,opt,name=load_balancer_type,json=loadBalancerType,proto3,enum=porter.v1.LoadBalancerType" json:"load_balancer_type,omitempty"`
	// wildcard_domain is used in ALB loadbalancer deployment when allowlisting IPs. This has no effect when load_balancer_type is NLB
	WildcardDomain string `protobuf:"bytes,2,opt,name=wildcard_domain,json=wildcardDomain,proto3" json:"wildcard_domain,omitempty"`
	// allowlist_ip_ranges are comma separated CIDRS, which are the only ranges who will be granted access to ALB ingress resources. This has no effect when load_balancer_type is NLB
	AllowlistIpRanges string `protobuf:"bytes,3,opt,name=allowlist_ip_ranges,json=allowlistIpRanges,proto3" json:"allowlist_ip_ranges,omitempty"`
	// enable_wafv2 enables WAFv2 on the ALB. This has no effect when load_balancer_type is NLB
	EnableWafv2 bool `protobuf:"varint,4,opt,name=enable_wafv2,json=enableWafv2,proto3" json:"enable_wafv2,omitempty"`
	// wafv2_arn is the ARN of the WAFv2 ACL to attach to the ALB. This has no effect when load_balancer_type is NLB, or if enable_wafv2 is false
	Wafv2Arn string `protobuf:"bytes,5,opt,name=wafv2_arn,json=wafv2Arn,proto3" json:"wafv2_arn,omitempty"`
	// additional_certificate_arns is a list of ACM certificate ARNs to attach to the ALB. This has no effect when load_balancer_type is NLB. These will be added in order, before the ACM certificate created by Porter.
	AdditionalCertificateArns []string `protobuf:"bytes,6,rep,name=additional_certificate_arns,json=additionalCertificateArns,proto3" json:"additional_certificate_arns,omitempty"`
	// tags is a map of AWS tags to apply to the ALB. This has no effect when load_balancer_type is NLB.
	Tags map[string]string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// enable_s3_access_logs enables S3 access logs on the ALB. This has no effect when load_balancer_type is NLB.
	EnableS3AccessLogs bool `protobuf:"varint,8,opt,name=enable_s3_access_logs,json=enableS3AccessLogs,proto3" json:"enable_s3_access_logs,omitempty"`
}

func (x *LoadBalancer) Reset() {
	*x = LoadBalancer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_eks_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancer) ProtoMessage() {}

func (x *LoadBalancer) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_eks_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancer.ProtoReflect.Descriptor instead.
func (*LoadBalancer) Descriptor() ([]byte, []int) {
	return file_porter_v1_eks_proto_rawDescGZIP(), []int{2}
}

func (x *LoadBalancer) GetLoadBalancerType() LoadBalancerType {
	if x != nil {
		return x.LoadBalancerType
	}
	return LoadBalancerType_LOAD_BALANCER_TYPE_UNSPECIFIED
}

func (x *LoadBalancer) GetWildcardDomain() string {
	if x != nil {
		return x.WildcardDomain
	}
	return ""
}

func (x *LoadBalancer) GetAllowlistIpRanges() string {
	if x != nil {
		return x.AllowlistIpRanges
	}
	return ""
}

func (x *LoadBalancer) GetEnableWafv2() bool {
	if x != nil {
		return x.EnableWafv2
	}
	return false
}

func (x *LoadBalancer) GetWafv2Arn() string {
	if x != nil {
		return x.Wafv2Arn
	}
	return ""
}

func (x *LoadBalancer) GetAdditionalCertificateArns() []string {
	if x != nil {
		return x.AdditionalCertificateArns
	}
	return nil
}

func (x *LoadBalancer) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *LoadBalancer) GetEnableS3AccessLogs() bool {
	if x != nil {
		return x.EnableS3AccessLogs
	}
	return false
}

// EKSLogging is the configuration for EKS control plane logging which is typically managed through the AWS Console. This will create a CloudWatch log group and log stream for the enabled logs.
type EKSLogging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableApiServerLogs         bool `protobuf:"varint,1,opt,name=enable_api_server_logs,json=enableApiServerLogs,proto3" json:"enable_api_server_logs,omitempty"`
	EnableAuthenticatorLogs     bool `protobuf:"varint,2,opt,name=enable_authenticator_logs,json=enableAuthenticatorLogs,proto3" json:"enable_authenticator_logs,omitempty"`
	EnableSchedulerLogs         bool `protobuf:"varint,3,opt,name=enable_scheduler_logs,json=enableSchedulerLogs,proto3" json:"enable_scheduler_logs,omitempty"`
	EnableAuditLogs             bool `protobuf:"varint,4,opt,name=enable_audit_logs,json=enableAuditLogs,proto3" json:"enable_audit_logs,omitempty"`
	EnableControllerManagerLogs bool `protobuf:"varint,5,opt,name=enable_controller_manager_logs,json=enableControllerManagerLogs,proto3" json:"enable_controller_manager_logs,omitempty"`
}

func (x *EKSLogging) Reset() {
	*x = EKSLogging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_eks_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EKSLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EKSLogging) ProtoMessage() {}

func (x *EKSLogging) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_eks_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EKSLogging.ProtoReflect.Descriptor instead.
func (*EKSLogging) Descriptor() ([]byte, []int) {
	return file_porter_v1_eks_proto_rawDescGZIP(), []int{3}
}

func (x *EKSLogging) GetEnableApiServerLogs() bool {
	if x != nil {
		return x.EnableApiServerLogs
	}
	return false
}

func (x *EKSLogging) GetEnableAuthenticatorLogs() bool {
	if x != nil {
		return x.EnableAuthenticatorLogs
	}
	return false
}

func (x *EKSLogging) GetEnableSchedulerLogs() bool {
	if x != nil {
		return x.EnableSchedulerLogs
	}
	return false
}

func (x *EKSLogging) GetEnableAuditLogs() bool {
	if x != nil {
		return x.EnableAuditLogs
	}
	return false
}

func (x *EKSLogging) GetEnableControllerManagerLogs() bool {
	if x != nil {
		return x.EnableControllerManagerLogs
	}
	return false
}

// EKSPreflightValues contains all needed values to perform EKS Preflight Checks
type EKSPreflightValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// //EKS contains all information required to configure the EKS cluster's preflight checks
	Eks *EKS `protobuf:"bytes,1,opt,name=eks,proto3" json:"eks,omitempty"`
	// target_arn ARN of the eks cluster
	TargetArn string `protobuf:"bytes,2,opt,name=target_arn,json=targetArn,proto3" json:"target_arn,omitempty"`
	// extrnal_id of the eks cluster
	ExternalId string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (x *EKSPreflightValues) Reset() {
	*x = EKSPreflightValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_eks_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EKSPreflightValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EKSPreflightValues) ProtoMessage() {}

func (x *EKSPreflightValues) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_eks_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EKSPreflightValues.ProtoReflect.Descriptor instead.
func (*EKSPreflightValues) Descriptor() ([]byte, []int) {
	return file_porter_v1_eks_proto_rawDescGZIP(), []int{4}
}

func (x *EKSPreflightValues) GetEks() *EKS {
	if x != nil {
		return x.Eks
	}
	return nil
}

func (x *EKSPreflightValues) GetTargetArn() string {
	if x != nil {
		return x.TargetArn
	}
	return ""
}

func (x *EKSPreflightValues) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

var File_porter_v1_eks_proto protoreflect.FileDescriptor

var file_porter_v1_eks_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6b, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x22, 0x91, 0x03, 0x0a, 0x03, 0x45, 0x4b, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69, 0x64, 0x72, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4b, 0x53,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x75, 0x61, 0x72, 0x64, 0x44, 0x75, 0x74, 0x79, 0x12,
	0x2f, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4b, 0x53,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x6d, 0x73, 0x5f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x6d, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x02, 0x0a, 0x0c, 0x45, 0x4b, 0x53, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69,
	0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x66, 0x75, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0a, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xd5, 0x03, 0x0a,
	0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x49, 0x0a,
	0x12, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x6c, 0x64,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x61, 0x66, 0x76,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57,
	0x61, 0x66, 0x76, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x66, 0x76, 0x32, 0x5f, 0x61, 0x72,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x66, 0x76, 0x32, 0x41, 0x72,
	0x6e, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x72, 0x6e,
	0x73, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x33, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x33, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x02, 0x0a, 0x0a, 0x45, 0x4b, 0x53, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x4c, 0x6f, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0x76, 0x0a, 0x12, 0x45, 0x4b, 0x53,
	0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x03, 0x65, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4b, 0x53, 0x52, 0x03, 0x65, 0x6b,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x2a, 0xa9, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x04, 0x2a, 0x6e, 0x0a,
	0x10, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4c, 0x42, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x42, 0x10, 0x02, 0x42, 0xa3, 0x01,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42,
	0x08, 0x45, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2d, 0x64,
	0x65, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x15, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_porter_v1_eks_proto_rawDescOnce sync.Once
	file_porter_v1_eks_proto_rawDescData = file_porter_v1_eks_proto_rawDesc
)

func file_porter_v1_eks_proto_rawDescGZIP() []byte {
	file_porter_v1_eks_proto_rawDescOnce.Do(func() {
		file_porter_v1_eks_proto_rawDescData = protoimpl.X.CompressGZIP(file_porter_v1_eks_proto_rawDescData)
	})
	return file_porter_v1_eks_proto_rawDescData
}

var file_porter_v1_eks_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_porter_v1_eks_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_porter_v1_eks_proto_goTypes = []interface{}{
	(NodeGroupType)(0),         // 0: porter.v1.NodeGroupType
	(LoadBalancerType)(0),      // 1: porter.v1.LoadBalancerType
	(*EKS)(nil),                // 2: porter.v1.EKS
	(*EKSNodeGroup)(nil),       // 3: porter.v1.EKSNodeGroup
	(*LoadBalancer)(nil),       // 4: porter.v1.LoadBalancer
	(*EKSLogging)(nil),         // 5: porter.v1.EKSLogging
	(*EKSPreflightValues)(nil), // 6: porter.v1.EKSPreflightValues
	nil,                        // 7: porter.v1.LoadBalancer.TagsEntry
}
var file_porter_v1_eks_proto_depIdxs = []int32{
	3, // 0: porter.v1.EKS.node_groups:type_name -> porter.v1.EKSNodeGroup
	4, // 1: porter.v1.EKS.load_balancer:type_name -> porter.v1.LoadBalancer
	5, // 2: porter.v1.EKS.logging:type_name -> porter.v1.EKSLogging
	0, // 3: porter.v1.EKSNodeGroup.node_group_type:type_name -> porter.v1.NodeGroupType
	1, // 4: porter.v1.LoadBalancer.load_balancer_type:type_name -> porter.v1.LoadBalancerType
	7, // 5: porter.v1.LoadBalancer.tags:type_name -> porter.v1.LoadBalancer.TagsEntry
	2, // 6: porter.v1.EKSPreflightValues.eks:type_name -> porter.v1.EKS
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_porter_v1_eks_proto_init() }
func file_porter_v1_eks_proto_init() {
	if File_porter_v1_eks_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_porter_v1_eks_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EKS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_eks_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EKSNodeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_eks_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_eks_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EKSLogging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_eks_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EKSPreflightValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_porter_v1_eks_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_porter_v1_eks_proto_goTypes,
		DependencyIndexes: file_porter_v1_eks_proto_depIdxs,
		EnumInfos:         file_porter_v1_eks_proto_enumTypes,
		MessageInfos:      file_porter_v1_eks_proto_msgTypes,
	}.Build()
	File_porter_v1_eks_proto = out.File
	file_porter_v1_eks_proto_rawDesc = nil
	file_porter_v1_eks_proto_goTypes = nil
	file_porter_v1_eks_proto_depIdxs = nil
}
