// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: porter/v1/addons.proto

package porterv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddonType int32

const (
	// ADDON_TYPE_UNSPECIFIED is the default value
	AddonType_ADDON_TYPE_UNSPECIFIED AddonType = 0
	// ADDON_TYPE_POSTGRES is the postgres addon type
	AddonType_ADDON_TYPE_POSTGRES AddonType = 1
	// ADDON_TYPE_REDIS is the redis addon type
	AddonType_ADDON_TYPE_REDIS AddonType = 2
	// ADDON_TYPE_DATADOG is the datadog addon type
	AddonType_ADDON_TYPE_DATADOG AddonType = 3
	// ADDON_TYPE_MEZMO is the mezmo addon type
	AddonType_ADDON_TYPE_MEZMO AddonType = 4
	// ADDON_TYPE_METABASE is the metabase addon type
	AddonType_ADDON_TYPE_METABASE AddonType = 5
	// ADDON_TYPE_NEWRELIC is the newrelic addon type
	AddonType_ADDON_TYPE_NEWRELIC AddonType = 6
	// ADDON_TYPE_TAILSCALE is the tailscale addon type
	AddonType_ADDON_TYPE_TAILSCALE AddonType = 7
	// ADDON_TYPE_QUIVR is the quivr addon type
	AddonType_ADDON_TYPE_QUIVR AddonType = 8
	// ADDON_TYPE_DEEPGRAM is the deepgram addon type
	AddonType_ADDON_TYPE_DEEPGRAM AddonType = 9
)

// Enum value maps for AddonType.
var (
	AddonType_name = map[int32]string{
		0: "ADDON_TYPE_UNSPECIFIED",
		1: "ADDON_TYPE_POSTGRES",
		2: "ADDON_TYPE_REDIS",
		3: "ADDON_TYPE_DATADOG",
		4: "ADDON_TYPE_MEZMO",
		5: "ADDON_TYPE_METABASE",
		6: "ADDON_TYPE_NEWRELIC",
		7: "ADDON_TYPE_TAILSCALE",
		8: "ADDON_TYPE_QUIVR",
		9: "ADDON_TYPE_DEEPGRAM",
	}
	AddonType_value = map[string]int32{
		"ADDON_TYPE_UNSPECIFIED": 0,
		"ADDON_TYPE_POSTGRES":    1,
		"ADDON_TYPE_REDIS":       2,
		"ADDON_TYPE_DATADOG":     3,
		"ADDON_TYPE_MEZMO":       4,
		"ADDON_TYPE_METABASE":    5,
		"ADDON_TYPE_NEWRELIC":    6,
		"ADDON_TYPE_TAILSCALE":   7,
		"ADDON_TYPE_QUIVR":       8,
		"ADDON_TYPE_DEEPGRAM":    9,
	}
)

func (x AddonType) Enum() *AddonType {
	p := new(AddonType)
	*p = x
	return p
}

func (x AddonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddonType) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_addons_proto_enumTypes[0].Descriptor()
}

func (AddonType) Type() protoreflect.EnumType {
	return &file_porter_v1_addons_proto_enumTypes[0]
}

func (x AddonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddonType.Descriptor instead.
func (AddonType) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_addons_proto_rawDescGZIP(), []int{0}
}

// AddonStatus specifies the status of an addon installation
// this is currently used to track the installation status for complex addons like deepgram and other LLM addons
type AddonStatus int32

const (
	// ADDON_STATUS_UNSPECIFIED is the default value
	AddonStatus_ADDON_STATUS_UNSPECIFIED AddonStatus = 0
	// ADDON_STATUS_QUOTA_PENDING is the status when an addon installation is waiting for a quota upgrade
	AddonStatus_ADDON_STATUS_QUOTA_PENDING AddonStatus = 1
	// ADDON_STATUS_QUOTA_FAILED is the status when an addon can't be installed due to a failed quota upgrade
	AddonStatus_ADDON_STATUS_QUOTA_FAILED AddonStatus = 2
	// ADDON_STATUS_INFRA_PROVISIONING is the status when an addon installation is waiting for infrastructure reprovisioning
	AddonStatus_ADDON_STATUS_INFRA_PROVISIONING AddonStatus = 3
	// ADDON_STATUS_INFRA_PROVISIONING_FAILED is the status when an addon can't be installed due to a failed infrastructure reprovisioning
	AddonStatus_ADDON_STATUS_INFRA_PROVISIONING_FAILED AddonStatus = 4
	// ADDON_STATUS_DEPLOYING is the status when an addon is being deployed
	AddonStatus_ADDON_STATUS_DEPLOYING AddonStatus = 5
)

// Enum value maps for AddonStatus.
var (
	AddonStatus_name = map[int32]string{
		0: "ADDON_STATUS_UNSPECIFIED",
		1: "ADDON_STATUS_QUOTA_PENDING",
		2: "ADDON_STATUS_QUOTA_FAILED",
		3: "ADDON_STATUS_INFRA_PROVISIONING",
		4: "ADDON_STATUS_INFRA_PROVISIONING_FAILED",
		5: "ADDON_STATUS_DEPLOYING",
	}
	AddonStatus_value = map[string]int32{
		"ADDON_STATUS_UNSPECIFIED":               0,
		"ADDON_STATUS_QUOTA_PENDING":             1,
		"ADDON_STATUS_QUOTA_FAILED":              2,
		"ADDON_STATUS_INFRA_PROVISIONING":        3,
		"ADDON_STATUS_INFRA_PROVISIONING_FAILED": 4,
		"ADDON_STATUS_DEPLOYING":                 5,
	}
)

func (x AddonStatus) Enum() *AddonStatus {
	p := new(AddonStatus)
	*p = x
	return p
}

func (x AddonStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddonStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_addons_proto_enumTypes[1].Descriptor()
}

func (AddonStatus) Type() protoreflect.EnumType {
	return &file_porter_v1_addons_proto_enumTypes[1]
}

func (x AddonStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddonStatus.Descriptor instead.
func (AddonStatus) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_addons_proto_rawDescGZIP(), []int{1}
}

// PrerequisiteAddon specifies an addon that must be installed before any apps can be installed
// the addon should be installed with the specified config
type PrerequisiteAddon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// commit_sha is the commit SHA of the addon
	CommitSha string `protobuf:"bytes,1,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
}

func (x *PrerequisiteAddon) Reset() {
	*x = PrerequisiteAddon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_addons_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrerequisiteAddon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrerequisiteAddon) ProtoMessage() {}

func (x *PrerequisiteAddon) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_addons_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrerequisiteAddon.ProtoReflect.Descriptor instead.
func (*PrerequisiteAddon) Descriptor() ([]byte, []int) {
	return file_porter_v1_addons_proto_rawDescGZIP(), []int{0}
}

func (x *PrerequisiteAddon) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

// Addon is the configuration object for tooling or services that can be applied to the cluster alongside porter apps.
type Addon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the addon
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// type is the type of type of addon
	Type AddonType `protobuf:"varint,2,opt,name=type,proto3,enum=porter.v1.AddonType" json:"type,omitempty"`
	// env_groups is a list of environment groups that can be applied to the addon
	EnvGroups []*EnvGroup `protobuf:"bytes,3,rep,name=env_groups,json=envGroups,proto3" json:"env_groups,omitempty"`
	// config is the addon-specific configuration
	//
	// Types that are assignable to Config:
	//
	//	*Addon_Postgres
	//	*Addon_Redis
	//	*Addon_Datadog
	//	*Addon_Mezmo
	//	*Addon_Metabase
	//	*Addon_Newrelic
	//	*Addon_Tailscale
	//	*Addon_Quivr
	//	*Addon_Deepgram
	Config isAddon_Config `protobuf_oneof:"config"`
	// helm_overrides is stringified json of raw Helm overrides to use for the addon. These will override any values generated by the contract.
	HelmOverrides *HelmOverrides `protobuf:"bytes,13,opt,name=helm_overrides,json=helmOverrides,proto3" json:"helm_overrides,omitempty"`
}

func (x *Addon) Reset() {
	*x = Addon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_addons_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addon) ProtoMessage() {}

func (x *Addon) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_addons_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addon.ProtoReflect.Descriptor instead.
func (*Addon) Descriptor() ([]byte, []int) {
	return file_porter_v1_addons_proto_rawDescGZIP(), []int{1}
}

func (x *Addon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Addon) GetType() AddonType {
	if x != nil {
		return x.Type
	}
	return AddonType_ADDON_TYPE_UNSPECIFIED
}

func (x *Addon) GetEnvGroups() []*EnvGroup {
	if x != nil {
		return x.EnvGroups
	}
	return nil
}

func (m *Addon) GetConfig() isAddon_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Addon) GetPostgres() *Postgres {
	if x, ok := x.GetConfig().(*Addon_Postgres); ok {
		return x.Postgres
	}
	return nil
}

func (x *Addon) GetRedis() *Redis {
	if x, ok := x.GetConfig().(*Addon_Redis); ok {
		return x.Redis
	}
	return nil
}

func (x *Addon) GetDatadog() *Datadog {
	if x, ok := x.GetConfig().(*Addon_Datadog); ok {
		return x.Datadog
	}
	return nil
}

func (x *Addon) GetMezmo() *Mezmo {
	if x, ok := x.GetConfig().(*Addon_Mezmo); ok {
		return x.Mezmo
	}
	return nil
}

func (x *Addon) GetMetabase() *Metabase {
	if x, ok := x.GetConfig().(*Addon_Metabase); ok {
		return x.Metabase
	}
	return nil
}

func (x *Addon) GetNewrelic() *Newrelic {
	if x, ok := x.GetConfig().(*Addon_Newrelic); ok {
		return x.Newrelic
	}
	return nil
}

func (x *Addon) GetTailscale() *Tailscale {
	if x, ok := x.GetConfig().(*Addon_Tailscale); ok {
		return x.Tailscale
	}
	return nil
}

func (x *Addon) GetQuivr() *Quivr {
	if x, ok := x.GetConfig().(*Addon_Quivr); ok {
		return x.Quivr
	}
	return nil
}

func (x *Addon) GetDeepgram() *Deepgram {
	if x, ok := x.GetConfig().(*Addon_Deepgram); ok {
		return x.Deepgram
	}
	return nil
}

func (x *Addon) GetHelmOverrides() *HelmOverrides {
	if x != nil {
		return x.HelmOverrides
	}
	return nil
}

type isAddon_Config interface {
	isAddon_Config()
}

type Addon_Postgres struct {
	// postgres is the configuration for the postgres addon
	Postgres *Postgres `protobuf:"bytes,4,opt,name=postgres,proto3,oneof"`
}

type Addon_Redis struct {
	// redis is the configuration for the redis addon
	Redis *Redis `protobuf:"bytes,5,opt,name=redis,proto3,oneof"`
}

type Addon_Datadog struct {
	// datadog is the configuration for the datadog addon
	Datadog *Datadog `protobuf:"bytes,6,opt,name=datadog,proto3,oneof"`
}

type Addon_Mezmo struct {
	// mezmo is the configuration for the mezmo addon
	Mezmo *Mezmo `protobuf:"bytes,7,opt,name=mezmo,proto3,oneof"`
}

type Addon_Metabase struct {
	// metabase is the configuration for the metabase addon
	Metabase *Metabase `protobuf:"bytes,8,opt,name=metabase,proto3,oneof"`
}

type Addon_Newrelic struct {
	// Newrelic is the configuration for the newrelic addon
	Newrelic *Newrelic `protobuf:"bytes,9,opt,name=newrelic,proto3,oneof"`
}

type Addon_Tailscale struct {
	// Tailscale is the configuration for the tailscale addon
	Tailscale *Tailscale `protobuf:"bytes,10,opt,name=tailscale,proto3,oneof"`
}

type Addon_Quivr struct {
	// Quivr is the configuration for the quivr addon
	Quivr *Quivr `protobuf:"bytes,11,opt,name=quivr,proto3,oneof"`
}

type Addon_Deepgram struct {
	// Deepgram is the configuration for the deepgram addon
	Deepgram *Deepgram `protobuf:"bytes,12,opt,name=deepgram,proto3,oneof"`
}

func (*Addon_Postgres) isAddon_Config() {}

func (*Addon_Redis) isAddon_Config() {}

func (*Addon_Datadog) isAddon_Config() {}

func (*Addon_Mezmo) isAddon_Config() {}

func (*Addon_Metabase) isAddon_Config() {}

func (*Addon_Newrelic) isAddon_Config() {}

func (*Addon_Tailscale) isAddon_Config() {}

func (*Addon_Quivr) isAddon_Config() {}

func (*Addon_Deepgram) isAddon_Config() {}

// Postgres is the configuration for postgres
type Postgres struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cpu_cores is the number of CPU cores to allocate to the database
	CpuCores float32 `protobuf:"fixed32,1,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	// ram_megabytes is the amount of memory to allocate to the database
	RamMegabytes int32 `protobuf:"varint,2,opt,name=ram_megabytes,json=ramMegabytes,proto3" json:"ram_megabytes,omitempty"`
	// storage_gigabytes is the amount of storage to allocate to the database
	StorageGigabytes int32 `protobuf:"varint,3,opt,name=storage_gigabytes,json=storageGigabytes,proto3" json:"storage_gigabytes,omitempty"`
	// master_username is the username of the database
	MasterUsername *string `protobuf:"bytes,4,opt,name=master_username,json=masterUsername,proto3,oneof" json:"master_username,omitempty"`
	// master_user_password_literal is the string value of the password; this is only used for creating the datastore password secret and is wiped when the contract is saved
	MasterUserPasswordLiteral *string `protobuf:"bytes,5,opt,name=master_user_password_literal,json=masterUserPasswordLiteral,proto3,oneof" json:"master_user_password_literal,omitempty"`
}

func (x *Postgres) Reset() {
	*x = Postgres{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_addons_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Postgres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Postgres) ProtoMessage() {}

func (x *Postgres) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_addons_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Postgres.ProtoReflect.Descriptor instead.
func (*Postgres) Descriptor() ([]byte, []int) {
	return file_porter_v1_addons_proto_rawDescGZIP(), []int{2}
}

func (x *Postgres) GetCpuCores() float32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *Postgres) GetRamMegabytes() int32 {
	if x != nil {
		return x.RamMegabytes
	}
	return 0
}

func (x *Postgres) GetStorageGigabytes() int32 {
	if x != nil {
		return x.StorageGigabytes
	}
	return 0
}

func (x *Postgres) GetMasterUsername() string {
	if x != nil && x.MasterUsername != nil {
		return *x.MasterUsername
	}
	return ""
}

func (x *Postgres) GetMasterUserPasswordLiteral() string {
	if x != nil && x.MasterUserPasswordLiteral != nil {
		return *x.MasterUserPasswordLiteral
	}
	return ""
}

// Redis is the configuration for redis
type Redis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cpu_cores is the number of CPU cores to allocate to redis
	CpuCores float32 `protobuf:"fixed32,1,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	// ram_megabytes is the amount of memory to allocate to redis
	RamMegabytes int32 `protobuf:"varint,2,opt,name=ram_megabytes,json=ramMegabytes,proto3" json:"ram_megabytes,omitempty"`
	// storage_gigabytes is the amount of storage to allocate to redis
	StorageGigabytes int32 `protobuf:"varint,3,opt,name=storage_gigabytes,json=storageGigabytes,proto3" json:"storage_gigabytes,omitempty"`
	// master_user_password_literal is the string value of the password; this is only used for creating the datastore password secret and is wiped when the contract is saved
	MasterUserPasswordLiteral *string `protobuf:"bytes,4,opt,name=master_user_password_literal,json=masterUserPasswordLiteral,proto3,oneof" json:"master_user_password_literal,omitempty"`
}

func (x *Redis) Reset() {
	*x = Redis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_addons_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redis) ProtoMessage() {}

func (x *Redis) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_addons_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redis.ProtoReflect.Descriptor instead.
func (*Redis) Descriptor() ([]byte, []int) {
	return file_porter_v1_addons_proto_rawDescGZIP(), []int{3}
}

func (x *Redis) GetCpuCores() float32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *Redis) GetRamMegabytes() int32 {
	if x != nil {
		return x.RamMegabytes
	}
	return 0
}

func (x *Redis) GetStorageGigabytes() int32 {
	if x != nil {
		return x.StorageGigabytes
	}
	return 0
}

func (x *Redis) GetMasterUserPasswordLiteral() string {
	if x != nil && x.MasterUserPasswordLiteral != nil {
		return *x.MasterUserPasswordLiteral
	}
	return ""
}

// Datadog is the configuration for Datadog
type Datadog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// site is the datadog site url
	Site *string `protobuf:"bytes,1,opt,name=site,proto3,oneof" json:"site,omitempty"`
	// api_key is the api key
	ApiKey *string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3,oneof" json:"api_key,omitempty"`
	// logging_enabled determines whether all container logs go to datadog
	LoggingEnabled *bool `protobuf:"varint,3,opt,name=logging_enabled,json=loggingEnabled,proto3,oneof" json:"logging_enabled,omitempty"`
	// dogstatsd_enabled determines whether dogstatsd is enabled
	DogstatsdEnabled *bool `protobuf:"varint,4,opt,name=dogstatsd_enabled,json=dogstatsdEnabled,proto3,oneof" json:"dogstatsd_enabled,omitempty"`
	// apm_enabled determines whether apm is enabled
	ApmEnabled *bool `protobuf:"varint,5,opt,name=apm_enabled,json=apmEnabled,proto3,oneof" json:"apm_enabled,omitempty"`
	// cpu_cores is the number of CPU cores to allocate to datadog
	CpuCores *float32 `protobuf:"fixed32,6,opt,name=cpu_cores,json=cpuCores,proto3,oneof" json:"cpu_cores,omitempty"`
	// ram_megabytes is the amount of memory to allocate to datadog
	RamMegabytes *int32 `protobuf:"varint,7,opt,name=ram_megabytes,json=ramMegabytes,proto3,oneof" json:"ram_megabytes,omitempty"`
}

func (x *Datadog) Reset() {
	*x = Datadog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_addons_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datadog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datadog) ProtoMessage() {}

func (x *Datadog) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_addons_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datadog.ProtoReflect.Descriptor instead.
func (*Datadog) Descriptor() ([]byte, []int) {
	return file_porter_v1_addons_proto_rawDescGZIP(), []int{4}
}

func (x *Datadog) GetSite() string {
	if x != nil && x.Site != nil {
		return *x.Site
	}
	return ""
}

func (x *Datadog) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

func (x *Datadog) GetLoggingEnabled() bool {
	if x != nil && x.LoggingEnabled != nil {
		return *x.LoggingEnabled
	}
	return false
}

func (x *Datadog) GetDogstatsdEnabled() bool {
	if x != nil && x.DogstatsdEnabled != nil {
		return *x.DogstatsdEnabled
	}
	return false
}

func (x *Datadog) GetApmEnabled() bool {
	if x != nil && x.ApmEnabled != nil {
		return *x.ApmEnabled
	}
	return false
}

func (x *Datadog) GetCpuCores() float32 {
	if x != nil && x.CpuCores != nil {
		return *x.CpuCores
	}
	return 0
}

func (x *Datadog) GetRamMegabytes() int32 {
	if x != nil && x.RamMegabytes != nil {
		return *x.RamMegabytes
	}
	return 0
}

// Mezmo is the configuration for Mezmo
type Mezmo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ingestion_key is the mezmo ingestion key. This is stored as a secret on the client cluster
	IngestionKey *string `protobuf:"bytes,1,opt,name=ingestion_key,json=ingestionKey,proto3,oneof" json:"ingestion_key,omitempty"`
}

func (x *Mezmo) Reset() {
	*x = Mezmo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_addons_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mezmo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mezmo) ProtoMessage() {}

func (x *Mezmo) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_addons_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mezmo.ProtoReflect.Descriptor instead.
func (*Mezmo) Descriptor() ([]byte, []int) {
	return file_porter_v1_addons_proto_rawDescGZIP(), []int{5}
}

func (x *Mezmo) GetIngestionKey() string {
	if x != nil && x.IngestionKey != nil {
		return *x.IngestionKey
	}
	return ""
}

// MetabaseDatastore is the configuration for a datastore linked with Metabase
type MetabaseDatastore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host                      string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                      int64  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	DatabaseName              string `protobuf:"bytes,3,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	MasterUsername            string `protobuf:"bytes,4,opt,name=master_username,json=masterUsername,proto3" json:"master_username,omitempty"`
	MasterUserPasswordLiteral string `protobuf:"bytes,5,opt,name=master_user_password_literal,json=masterUserPasswordLiteral,proto3" json:"master_user_password_literal,omitempty"`
}

func (x *MetabaseDatastore) Reset() {
	*x = MetabaseDatastore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_addons_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetabaseDatastore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetabaseDatastore) ProtoMessage() {}

func (x *MetabaseDatastore) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_addons_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetabaseDatastore.ProtoReflect.Descriptor instead.
func (*MetabaseDatastore) Descriptor() ([]byte, []int) {
	return file_porter_v1_addons_proto_rawDescGZIP(), []int{6}
}

func (x *MetabaseDatastore) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MetabaseDatastore) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MetabaseDatastore) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *MetabaseDatastore) GetMasterUsername() string {
	if x != nil {
		return x.MasterUsername
	}
	return ""
}

func (x *MetabaseDatastore) GetMasterUserPasswordLiteral() string {
	if x != nil {
		return x.MasterUserPasswordLiteral
	}
	return ""
}

// Metabase is the configuration for Metabase
type Metabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domains is the list of domains for this service
	Domains []*Domain `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// cpu_cores is the number of CPU cores to allocate to metabase
	CpuCores *float32 `protobuf:"fixed32,2,opt,name=cpu_cores,json=cpuCores,proto3,oneof" json:"cpu_cores,omitempty"`
	// ram_megabytes is the amount of memory to allocate to metabase
	RamMegabytes *int32 `protobuf:"varint,3,opt,name=ram_megabytes,json=ramMegabytes,proto3,oneof" json:"ram_megabytes,omitempty"`
	// datastore is the configuration of the datastore that metabase is connected to
	Datastore *MetabaseDatastore `protobuf:"bytes,4,opt,name=datastore,proto3,oneof" json:"datastore,omitempty"`
	// ingress_enabled describes whether the metabase instance has ingress enabled
	IngressEnabled *bool `protobuf:"varint,5,opt,name=ingress_enabled,json=ingressEnabled,proto3,oneof" json:"ingress_enabled,omitempty"`
}

func (x *Metabase) Reset() {
	*x = Metabase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_addons_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metabase) ProtoMessage() {}

func (x *Metabase) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_addons_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metabase.ProtoReflect.Descriptor instead.
func (*Metabase) Descriptor() ([]byte, []int) {
	return file_porter_v1_addons_proto_rawDescGZIP(), []int{7}
}

func (x *Metabase) GetDomains() []*Domain {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *Metabase) GetCpuCores() float32 {
	if x != nil && x.CpuCores != nil {
		return *x.CpuCores
	}
	return 0
}

func (x *Metabase) GetRamMegabytes() int32 {
	if x != nil && x.RamMegabytes != nil {
		return *x.RamMegabytes
	}
	return 0
}

func (x *Metabase) GetDatastore() *MetabaseDatastore {
	if x != nil {
		return x.Datastore
	}
	return nil
}

func (x *Metabase) GetIngressEnabled() bool {
	if x != nil && x.IngressEnabled != nil {
		return *x.IngressEnabled
	}
	return false
}

// Newrelic is the configuration for Newrelic
type Newrelic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster_name is the name of the cluster
	ClusterName *string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3,oneof" json:"cluster_name,omitempty"`
	// license_key is the license key
	LicenseKey *string `protobuf:"bytes,2,opt,name=license_key,json=licenseKey,proto3,oneof" json:"license_key,omitempty"`
	// insights_key is the insights key
	InsightsKey *string `protobuf:"bytes,3,opt,name=insights_key,json=insightsKey,proto3,oneof" json:"insights_key,omitempty"`
	// personal_api_key is the personal api key
	PersonalApiKey *string `protobuf:"bytes,4,opt,name=personal_api_key,json=personalApiKey,proto3,oneof" json:"personal_api_key,omitempty"`
	// account_id is the account id
	AccountId *string `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3,oneof" json:"account_id,omitempty"`
	// logging_enabled determines whether logging is enabled
	LoggingEnabled *bool `protobuf:"varint,6,opt,name=logging_enabled,json=loggingEnabled,proto3,oneof" json:"logging_enabled,omitempty"`
	// metrics_adapter_enabled determines whether metrics adapter is enabled
	MetricsAdapterEnabled *bool `protobuf:"varint,7,opt,name=metrics_adapter_enabled,json=metricsAdapterEnabled,proto3,oneof" json:"metrics_adapter_enabled,omitempty"`
	// prometheus_enabled determines whether prometheus is enabled
	PrometheusEnabled *bool `protobuf:"varint,8,opt,name=prometheus_enabled,json=prometheusEnabled,proto3,oneof" json:"prometheus_enabled,omitempty"`
	// pixie_enabled determines whether pixie is enabled
	PixieEnabled *bool `protobuf:"varint,9,opt,name=pixie_enabled,json=pixieEnabled,proto3,oneof" json:"pixie_enabled,omitempty"`
	// kube_events_enabled determines whether tracking for kube events is enabled
	KubeEventsEnabled *bool `protobuf:"varint,10,opt,name=kube_events_enabled,json=kubeEventsEnabled,proto3,oneof" json:"kube_events_enabled,omitempty"`
}

func (x *Newrelic) Reset() {
	*x = Newrelic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_addons_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Newrelic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Newrelic) ProtoMessage() {}

func (x *Newrelic) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_addons_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Newrelic.ProtoReflect.Descriptor instead.
func (*Newrelic) Descriptor() ([]byte, []int) {
	return file_porter_v1_addons_proto_rawDescGZIP(), []int{8}
}

func (x *Newrelic) GetClusterName() string {
	if x != nil && x.ClusterName != nil {
		return *x.ClusterName
	}
	return ""
}

func (x *Newrelic) GetLicenseKey() string {
	if x != nil && x.LicenseKey != nil {
		return *x.LicenseKey
	}
	return ""
}

func (x *Newrelic) GetInsightsKey() string {
	if x != nil && x.InsightsKey != nil {
		return *x.InsightsKey
	}
	return ""
}

func (x *Newrelic) GetPersonalApiKey() string {
	if x != nil && x.PersonalApiKey != nil {
		return *x.PersonalApiKey
	}
	return ""
}

func (x *Newrelic) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *Newrelic) GetLoggingEnabled() bool {
	if x != nil && x.LoggingEnabled != nil {
		return *x.LoggingEnabled
	}
	return false
}

func (x *Newrelic) GetMetricsAdapterEnabled() bool {
	if x != nil && x.MetricsAdapterEnabled != nil {
		return *x.MetricsAdapterEnabled
	}
	return false
}

func (x *Newrelic) GetPrometheusEnabled() bool {
	if x != nil && x.PrometheusEnabled != nil {
		return *x.PrometheusEnabled
	}
	return false
}

func (x *Newrelic) GetPixieEnabled() bool {
	if x != nil && x.PixieEnabled != nil {
		return *x.PixieEnabled
	}
	return false
}

func (x *Newrelic) GetKubeEventsEnabled() bool {
	if x != nil && x.KubeEventsEnabled != nil {
		return *x.KubeEventsEnabled
	}
	return false
}

// Tailscale is the configuration for Tailscale
type Tailscale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// auth_key is the auth key for Tailscale
	AuthKey *string `protobuf:"bytes,1,opt,name=auth_key,json=authKey,proto3,oneof" json:"auth_key,omitempty"`
	// subnet_routes are the subnet routes for Tailscale
	SubnetRoutes []string `protobuf:"bytes,2,rep,name=subnet_routes,json=subnetRoutes,proto3" json:"subnet_routes,omitempty"`
}

func (x *Tailscale) Reset() {
	*x = Tailscale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_addons_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tailscale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tailscale) ProtoMessage() {}

func (x *Tailscale) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_addons_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tailscale.ProtoReflect.Descriptor instead.
func (*Tailscale) Descriptor() ([]byte, []int) {
	return file_porter_v1_addons_proto_rawDescGZIP(), []int{9}
}

func (x *Tailscale) GetAuthKey() string {
	if x != nil && x.AuthKey != nil {
		return *x.AuthKey
	}
	return ""
}

func (x *Tailscale) GetSubnetRoutes() []string {
	if x != nil {
		return x.SubnetRoutes
	}
	return nil
}

// Quivr is the configuration for Quivr
type Quivr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domains is the list of domains for the service
	Domains []*Domain `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// ingress_enabled describes whether the quivr instance has external ingress enabled
	IngressEnabled     *bool   `protobuf:"varint,2,opt,name=ingress_enabled,json=ingressEnabled,proto3,oneof" json:"ingress_enabled,omitempty"`
	OpenaiApiKey       *string `protobuf:"bytes,3,opt,name=openai_api_key,json=openaiApiKey,proto3,oneof" json:"openai_api_key,omitempty"`
	SupabaseUrl        *string `protobuf:"bytes,4,opt,name=supabase_url,json=supabaseUrl,proto3,oneof" json:"supabase_url,omitempty"`
	SupabaseServiceKey *string `protobuf:"bytes,5,opt,name=supabase_service_key,json=supabaseServiceKey,proto3,oneof" json:"supabase_service_key,omitempty"`
	PgDatabaseUrl      *string `protobuf:"bytes,6,opt,name=pg_database_url,json=pgDatabaseUrl,proto3,oneof" json:"pg_database_url,omitempty"`
	JwtSecretKey       *string `protobuf:"bytes,7,opt,name=jwt_secret_key,json=jwtSecretKey,proto3,oneof" json:"jwt_secret_key,omitempty"`
	CohereApiKey       *string `protobuf:"bytes,8,opt,name=cohere_api_key,json=cohereApiKey,proto3,oneof" json:"cohere_api_key,omitempty"`
	AnthropicApiKey    *string `protobuf:"bytes,9,opt,name=anthropic_api_key,json=anthropicApiKey,proto3,oneof" json:"anthropic_api_key,omitempty"`
	QuivrDomain        *string `protobuf:"bytes,10,opt,name=quivr_domain,json=quivrDomain,proto3,oneof" json:"quivr_domain,omitempty"`
	BraveSearchApiKey  *string `protobuf:"bytes,11,opt,name=brave_search_api_key,json=braveSearchApiKey,proto3,oneof" json:"brave_search_api_key,omitempty"`
}

func (x *Quivr) Reset() {
	*x = Quivr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_addons_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quivr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quivr) ProtoMessage() {}

func (x *Quivr) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_addons_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quivr.ProtoReflect.Descriptor instead.
func (*Quivr) Descriptor() ([]byte, []int) {
	return file_porter_v1_addons_proto_rawDescGZIP(), []int{10}
}

func (x *Quivr) GetDomains() []*Domain {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *Quivr) GetIngressEnabled() bool {
	if x != nil && x.IngressEnabled != nil {
		return *x.IngressEnabled
	}
	return false
}

func (x *Quivr) GetOpenaiApiKey() string {
	if x != nil && x.OpenaiApiKey != nil {
		return *x.OpenaiApiKey
	}
	return ""
}

func (x *Quivr) GetSupabaseUrl() string {
	if x != nil && x.SupabaseUrl != nil {
		return *x.SupabaseUrl
	}
	return ""
}

func (x *Quivr) GetSupabaseServiceKey() string {
	if x != nil && x.SupabaseServiceKey != nil {
		return *x.SupabaseServiceKey
	}
	return ""
}

func (x *Quivr) GetPgDatabaseUrl() string {
	if x != nil && x.PgDatabaseUrl != nil {
		return *x.PgDatabaseUrl
	}
	return ""
}

func (x *Quivr) GetJwtSecretKey() string {
	if x != nil && x.JwtSecretKey != nil {
		return *x.JwtSecretKey
	}
	return ""
}

func (x *Quivr) GetCohereApiKey() string {
	if x != nil && x.CohereApiKey != nil {
		return *x.CohereApiKey
	}
	return ""
}

func (x *Quivr) GetAnthropicApiKey() string {
	if x != nil && x.AnthropicApiKey != nil {
		return *x.AnthropicApiKey
	}
	return ""
}

func (x *Quivr) GetQuivrDomain() string {
	if x != nil && x.QuivrDomain != nil {
		return *x.QuivrDomain
	}
	return ""
}

func (x *Quivr) GetBraveSearchApiKey() string {
	if x != nil && x.BraveSearchApiKey != nil {
		return *x.BraveSearchApiKey
	}
	return ""
}

// Deepgram is the configuration for Deepgram
type Deepgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// api_key is the deepgram API key
	ApiKey *string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3,oneof" json:"api_key,omitempty"`
	// ecr_username is the username to fetch the proprietary image
	EcrUsername *string `protobuf:"bytes,2,opt,name=ecr_username,json=ecrUsername,proto3,oneof" json:"ecr_username,omitempty"`
	// ecr_password is the password to fetch the proprietary image
	EcrPassword *string `protobuf:"bytes,3,opt,name=ecr_password,json=ecrPassword,proto3,oneof" json:"ecr_password,omitempty"`
	// ecr_email is email to fetch the proprietary image
	EcrEmail *string `protobuf:"bytes,4,opt,name=ecr_email,json=ecrEmail,proto3,oneof" json:"ecr_email,omitempty"`
	// release_tag is the version of the deepgram application
	ReleaseTag *string `protobuf:"bytes,5,opt,name=release_tag,json=releaseTag,proto3,oneof" json:"release_tag,omitempty"`
	// model_urls is the list of urls to download deepgram models from
	ModelUrls []string `protobuf:"bytes,6,rep,name=model_urls,json=modelUrls,proto3" json:"model_urls,omitempty"`
}

func (x *Deepgram) Reset() {
	*x = Deepgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_addons_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deepgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deepgram) ProtoMessage() {}

func (x *Deepgram) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_addons_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deepgram.ProtoReflect.Descriptor instead.
func (*Deepgram) Descriptor() ([]byte, []int) {
	return file_porter_v1_addons_proto_rawDescGZIP(), []int{11}
}

func (x *Deepgram) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

func (x *Deepgram) GetEcrUsername() string {
	if x != nil && x.EcrUsername != nil {
		return *x.EcrUsername
	}
	return ""
}

func (x *Deepgram) GetEcrPassword() string {
	if x != nil && x.EcrPassword != nil {
		return *x.EcrPassword
	}
	return ""
}

func (x *Deepgram) GetEcrEmail() string {
	if x != nil && x.EcrEmail != nil {
		return *x.EcrEmail
	}
	return ""
}

func (x *Deepgram) GetReleaseTag() string {
	if x != nil && x.ReleaseTag != nil {
		return *x.ReleaseTag
	}
	return ""
}

func (x *Deepgram) GetModelUrls() []string {
	if x != nil {
		return x.ModelUrls
	}
	return nil
}

var File_porter_v1_addons_proto protoreflect.FileDescriptor

var file_porter_v1_addons_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x22, 0xf4, 0x04, 0x0a,
	0x05, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x65,
	0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x64, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x05, 0x6d, 0x65, 0x7a, 0x6d, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x7a, 0x6d, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x65, 0x7a, 0x6d, 0x6f, 0x12,
	0x31, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x72, 0x65, 0x6c, 0x69, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x77, 0x72, 0x65, 0x6c, 0x69, 0x63, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x77,
	0x72, 0x65, 0x6c, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x71,
	0x75, 0x69, 0x76, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x76, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x71, 0x75, 0x69, 0x76, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x65, 0x65, 0x70, 0x67, 0x72, 0x61,
	0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x67, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x65, 0x65, 0x70, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x3f, 0x0a, 0x0e, 0x68, 0x65, 0x6c, 0x6d,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x6c,
	0x6d, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0d, 0x68, 0x65, 0x6c, 0x6d,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xa2, 0x02, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x67, 0x61, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x69,
	0x67, 0x61, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47, 0x69, 0x67, 0x61, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x1c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x19, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x22, 0xdd, 0x01, 0x0a, 0x05, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x67, 0x61, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x67, 0x69, 0x67, 0x61, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47, 0x69, 0x67, 0x61, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x1c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x19, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x22, 0x81, 0x03, 0x0a, 0x07, 0x44, 0x61, 0x74,
	0x61, 0x64, 0x6f, 0x67, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x64, 0x6f, 0x67,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x10, 0x64, 0x6f, 0x67, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61,
	0x70, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x04, 0x52, 0x0a, 0x61, 0x70, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0c, 0x72, 0x61,
	0x6d, 0x4d, 0x65, 0x67, 0x61, 0x62, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b,
	0x65, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x6f, 0x67, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x61, 0x70, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72,
	0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x05,
	0x4d, 0x65, 0x7a, 0x6d, 0x6f, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x1c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x22, 0xb4,
	0x02, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x61,
	0x6d, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x0c, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x67, 0x61, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x02, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03,
	0x52, 0x0e, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x98, 0x05, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x72, 0x65, 0x6c,
	0x69, 0x63, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x15, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x07, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x69,
	0x78, 0x69, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x08, 0x52, 0x0c, 0x70, 0x69, 0x78, 0x69, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x09, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x69, 0x78, 0x69, 0x65,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6b, 0x75, 0x62,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x5d, 0x0a, 0x09, 0x54, 0x61, 0x69, 0x6c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1e, 0x0a,
	0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x22,
	0xc9, 0x05, 0x0a, 0x05, 0x51, 0x75, 0x69, 0x76, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x07, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0e, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x12, 0x73, 0x75, 0x70, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0f, 0x70, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0d, 0x70, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6a,
	0x77, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x6a, 0x77, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x0c, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0f,
	0x61, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x71, 0x75, 0x69, 0x76, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x71, 0x75, 0x69, 0x76,
	0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x62, 0x72,
	0x61, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x11, 0x62, 0x72, 0x61, 0x76,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x70, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x75, 0x70,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6a, 0x77, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x68,
	0x65, 0x72, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x61, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x71, 0x75, 0x69, 0x76, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x62, 0x72, 0x61, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xab, 0x02, 0x0a, 0x08,
	0x44, 0x65, 0x65, 0x70, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x63, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b,
	0x65, 0x63, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x65, 0x63, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x65, 0x63, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x63, 0x72, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x65, 0x63, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x72, 0x6c, 0x73, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x63,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65,
	0x63, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x65, 0x63, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x2a, 0xff, 0x01, 0x0a, 0x09, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x44, 0x44, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x44, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x44, 0x44, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x44, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x44, 0x4f, 0x47, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x44,
	0x44, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x5a, 0x4d, 0x4f, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x44, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x45, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x44,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x52, 0x45, 0x4c, 0x49, 0x43,
	0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x44, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x44, 0x44, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x56, 0x52,
	0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x44, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x45, 0x50, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x09, 0x2a, 0xd7, 0x01, 0x0a, 0x0b,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x41,
	0x44, 0x44, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x44, 0x44,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x44, 0x44,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x44, 0x44, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x2a, 0x0a,
	0x26, 0x41, 0x44, 0x44, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x46, 0x52, 0x41, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x44, 0x44,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x49, 0x4e, 0x47, 0x10, 0x05, 0x42, 0xa6, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x61, 0x70,
	0x69, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x3b, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x58,
	0x58, 0xaa, 0x02, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x09,
	0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x50, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_porter_v1_addons_proto_rawDescOnce sync.Once
	file_porter_v1_addons_proto_rawDescData = file_porter_v1_addons_proto_rawDesc
)

func file_porter_v1_addons_proto_rawDescGZIP() []byte {
	file_porter_v1_addons_proto_rawDescOnce.Do(func() {
		file_porter_v1_addons_proto_rawDescData = protoimpl.X.CompressGZIP(file_porter_v1_addons_proto_rawDescData)
	})
	return file_porter_v1_addons_proto_rawDescData
}

var file_porter_v1_addons_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_porter_v1_addons_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_porter_v1_addons_proto_goTypes = []interface{}{
	(AddonType)(0),            // 0: porter.v1.AddonType
	(AddonStatus)(0),          // 1: porter.v1.AddonStatus
	(*PrerequisiteAddon)(nil), // 2: porter.v1.PrerequisiteAddon
	(*Addon)(nil),             // 3: porter.v1.Addon
	(*Postgres)(nil),          // 4: porter.v1.Postgres
	(*Redis)(nil),             // 5: porter.v1.Redis
	(*Datadog)(nil),           // 6: porter.v1.Datadog
	(*Mezmo)(nil),             // 7: porter.v1.Mezmo
	(*MetabaseDatastore)(nil), // 8: porter.v1.MetabaseDatastore
	(*Metabase)(nil),          // 9: porter.v1.Metabase
	(*Newrelic)(nil),          // 10: porter.v1.Newrelic
	(*Tailscale)(nil),         // 11: porter.v1.Tailscale
	(*Quivr)(nil),             // 12: porter.v1.Quivr
	(*Deepgram)(nil),          // 13: porter.v1.Deepgram
	(*EnvGroup)(nil),          // 14: porter.v1.EnvGroup
	(*HelmOverrides)(nil),     // 15: porter.v1.HelmOverrides
	(*Domain)(nil),            // 16: porter.v1.Domain
}
var file_porter_v1_addons_proto_depIdxs = []int32{
	0,  // 0: porter.v1.Addon.type:type_name -> porter.v1.AddonType
	14, // 1: porter.v1.Addon.env_groups:type_name -> porter.v1.EnvGroup
	4,  // 2: porter.v1.Addon.postgres:type_name -> porter.v1.Postgres
	5,  // 3: porter.v1.Addon.redis:type_name -> porter.v1.Redis
	6,  // 4: porter.v1.Addon.datadog:type_name -> porter.v1.Datadog
	7,  // 5: porter.v1.Addon.mezmo:type_name -> porter.v1.Mezmo
	9,  // 6: porter.v1.Addon.metabase:type_name -> porter.v1.Metabase
	10, // 7: porter.v1.Addon.newrelic:type_name -> porter.v1.Newrelic
	11, // 8: porter.v1.Addon.tailscale:type_name -> porter.v1.Tailscale
	12, // 9: porter.v1.Addon.quivr:type_name -> porter.v1.Quivr
	13, // 10: porter.v1.Addon.deepgram:type_name -> porter.v1.Deepgram
	15, // 11: porter.v1.Addon.helm_overrides:type_name -> porter.v1.HelmOverrides
	16, // 12: porter.v1.Metabase.domains:type_name -> porter.v1.Domain
	8,  // 13: porter.v1.Metabase.datastore:type_name -> porter.v1.MetabaseDatastore
	16, // 14: porter.v1.Quivr.domains:type_name -> porter.v1.Domain
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_porter_v1_addons_proto_init() }
func file_porter_v1_addons_proto_init() {
	if File_porter_v1_addons_proto != nil {
		return
	}
	file_porter_v1_porter_app_proto_init()
	file_porter_v1_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_porter_v1_addons_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrerequisiteAddon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_addons_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_addons_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Postgres); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_addons_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Redis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_addons_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Datadog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_addons_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mezmo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_addons_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetabaseDatastore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_addons_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metabase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_addons_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Newrelic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_addons_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tailscale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_addons_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quivr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_addons_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deepgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_porter_v1_addons_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Addon_Postgres)(nil),
		(*Addon_Redis)(nil),
		(*Addon_Datadog)(nil),
		(*Addon_Mezmo)(nil),
		(*Addon_Metabase)(nil),
		(*Addon_Newrelic)(nil),
		(*Addon_Tailscale)(nil),
		(*Addon_Quivr)(nil),
		(*Addon_Deepgram)(nil),
	}
	file_porter_v1_addons_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_porter_v1_addons_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_porter_v1_addons_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_porter_v1_addons_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_porter_v1_addons_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_porter_v1_addons_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_porter_v1_addons_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_porter_v1_addons_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_porter_v1_addons_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_porter_v1_addons_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_porter_v1_addons_proto_goTypes,
		DependencyIndexes: file_porter_v1_addons_proto_depIdxs,
		EnumInfos:         file_porter_v1_addons_proto_enumTypes,
		MessageInfos:      file_porter_v1_addons_proto_msgTypes,
	}.Build()
	File_porter_v1_addons_proto = out.File
	file_porter_v1_addons_proto_rawDesc = nil
	file_porter_v1_addons_proto_goTypes = nil
	file_porter_v1_addons_proto_depIdxs = nil
}
