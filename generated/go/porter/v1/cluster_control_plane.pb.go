// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: porter/v1/cluster_control_plane.proto

package porterv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnumPredeployStatus int32

const (
	EnumPredeployStatus_ENUM_PREDEPLOY_STATUS_UNSPECIFIED EnumPredeployStatus = 0
	// ENUM_PREDEPLOY_STATUS_IN_PROGRESS signifies the predeploy is still in progress.
	EnumPredeployStatus_ENUM_PREDEPLOY_STATUS_IN_PROGRESS EnumPredeployStatus = 1
	// ENUM_PREDEPLOY_STATUS_FAILED signifies the predeploy job failed.
	EnumPredeployStatus_ENUM_PREDEPLOY_STATUS_FAILED EnumPredeployStatus = 2
	// ENUM_PREDEPLOY_STATUS_SUCCESSFUL signifies the predeploy job was successful.
	EnumPredeployStatus_ENUM_PREDEPLOY_STATUS_SUCCESSFUL EnumPredeployStatus = 3
)

// Enum value maps for EnumPredeployStatus.
var (
	EnumPredeployStatus_name = map[int32]string{
		0: "ENUM_PREDEPLOY_STATUS_UNSPECIFIED",
		1: "ENUM_PREDEPLOY_STATUS_IN_PROGRESS",
		2: "ENUM_PREDEPLOY_STATUS_FAILED",
		3: "ENUM_PREDEPLOY_STATUS_SUCCESSFUL",
	}
	EnumPredeployStatus_value = map[string]int32{
		"ENUM_PREDEPLOY_STATUS_UNSPECIFIED": 0,
		"ENUM_PREDEPLOY_STATUS_IN_PROGRESS": 1,
		"ENUM_PREDEPLOY_STATUS_FAILED":      2,
		"ENUM_PREDEPLOY_STATUS_SUCCESSFUL":  3,
	}
)

func (x EnumPredeployStatus) Enum() *EnumPredeployStatus {
	p := new(EnumPredeployStatus)
	*p = x
	return p
}

func (x EnumPredeployStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumPredeployStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_cluster_control_plane_proto_enumTypes[0].Descriptor()
}

func (EnumPredeployStatus) Type() protoreflect.EnumType {
	return &file_porter_v1_cluster_control_plane_proto_enumTypes[0]
}

func (x EnumPredeployStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumPredeployStatus.Descriptor instead.
func (EnumPredeployStatus) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{0}
}

type EnumQuotaIncrease int32

const (
	EnumQuotaIncrease_ENUM_QUOTA_INCREASE_UNSPECIFIED EnumQuotaIncrease = 0
	// ENUM_QUOTA_INCREASE_AWS_VPC signifies the quota increase is for AWS VPC
	EnumQuotaIncrease_ENUM_QUOTA_INCREASE_AWS_VPC EnumQuotaIncrease = 1
	// ENUM_QUOTA_INCREASE_AWS_VCPU signifies the quota increase is for AWS VCPU
	EnumQuotaIncrease_ENUM_QUOTA_INCREASE_AWS_VCPU EnumQuotaIncrease = 2
	// ENUM_QUOTA_INCREASE_AWS_EIP signifies the quota increase is for AWS EIP
	EnumQuotaIncrease_ENUM_QUOTA_INCREASE_AWS_EIP EnumQuotaIncrease = 3
	// ENUM_QUOTA_INCREASE_AWS_NAT signifies the quota increase is for AWS NAT
	EnumQuotaIncrease_ENUM_QUOTA_INCREASE_AWS_NAT EnumQuotaIncrease = 4
	// ENUM_QUOTA_INCREASE_GCP signifies the quota increase is for GCP
	EnumQuotaIncrease_ENUM_QUOTA_INCREASE_GCP EnumQuotaIncrease = 5
	// ENUM_QUOTA_INCREASE_AZURE signifies the quota increase is for Azure
	EnumQuotaIncrease_ENUM_QUOTA_INCREASE_AZURE EnumQuotaIncrease = 6
)

// Enum value maps for EnumQuotaIncrease.
var (
	EnumQuotaIncrease_name = map[int32]string{
		0: "ENUM_QUOTA_INCREASE_UNSPECIFIED",
		1: "ENUM_QUOTA_INCREASE_AWS_VPC",
		2: "ENUM_QUOTA_INCREASE_AWS_VCPU",
		3: "ENUM_QUOTA_INCREASE_AWS_EIP",
		4: "ENUM_QUOTA_INCREASE_AWS_NAT",
		5: "ENUM_QUOTA_INCREASE_GCP",
		6: "ENUM_QUOTA_INCREASE_AZURE",
	}
	EnumQuotaIncrease_value = map[string]int32{
		"ENUM_QUOTA_INCREASE_UNSPECIFIED": 0,
		"ENUM_QUOTA_INCREASE_AWS_VPC":     1,
		"ENUM_QUOTA_INCREASE_AWS_VCPU":    2,
		"ENUM_QUOTA_INCREASE_AWS_EIP":     3,
		"ENUM_QUOTA_INCREASE_AWS_NAT":     4,
		"ENUM_QUOTA_INCREASE_GCP":         5,
		"ENUM_QUOTA_INCREASE_AZURE":       6,
	}
)

func (x EnumQuotaIncrease) Enum() *EnumQuotaIncrease {
	p := new(EnumQuotaIncrease)
	*p = x
	return p
}

func (x EnumQuotaIncrease) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumQuotaIncrease) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_cluster_control_plane_proto_enumTypes[1].Descriptor()
}

func (EnumQuotaIncrease) Type() protoreflect.EnumType {
	return &file_porter_v1_cluster_control_plane_proto_enumTypes[1]
}

func (x EnumQuotaIncrease) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumQuotaIncrease.Descriptor instead.
func (EnumQuotaIncrease) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{1}
}

type EnumCLIAction int32

const (
	EnumCLIAction_ENUM_CLI_ACTION_UNSPECIFIED EnumCLIAction = 0
	// ENUM_CLI_ACTION_NONE signals the CLI to do nothing after applying the PorterApp.
	EnumCLIAction_ENUM_CLI_ACTION_NONE EnumCLIAction = 1
	// ENUM_CLI_ACTION_BUILD signals the CLI to build the image and call ApplyPorterApp again after a successful build.
	EnumCLIAction_ENUM_CLI_ACTION_BUILD EnumCLIAction = 2
	// ENUM_CLI_ACTION_TRACK_PREDEPLOY signals the CLI to track the progress of the predeploy job and call ApplyPorterApp again after a successful run.
	EnumCLIAction_ENUM_CLI_ACTION_TRACK_PREDEPLOY EnumCLIAction = 3
)

// Enum value maps for EnumCLIAction.
var (
	EnumCLIAction_name = map[int32]string{
		0: "ENUM_CLI_ACTION_UNSPECIFIED",
		1: "ENUM_CLI_ACTION_NONE",
		2: "ENUM_CLI_ACTION_BUILD",
		3: "ENUM_CLI_ACTION_TRACK_PREDEPLOY",
	}
	EnumCLIAction_value = map[string]int32{
		"ENUM_CLI_ACTION_UNSPECIFIED":     0,
		"ENUM_CLI_ACTION_NONE":            1,
		"ENUM_CLI_ACTION_BUILD":           2,
		"ENUM_CLI_ACTION_TRACK_PREDEPLOY": 3,
	}
)

func (x EnumCLIAction) Enum() *EnumCLIAction {
	p := new(EnumCLIAction)
	*p = x
	return p
}

func (x EnumCLIAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumCLIAction) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_cluster_control_plane_proto_enumTypes[2].Descriptor()
}

func (EnumCLIAction) Type() protoreflect.EnumType {
	return &file_porter_v1_cluster_control_plane_proto_enumTypes[2]
}

func (x EnumCLIAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumCLIAction.Descriptor instead.
func (EnumCLIAction) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{2}
}

type EnumRevisionStatus int32

const (
	EnumRevisionStatus_ENUM_REVISION_STATUS_UNSPECIFIED EnumRevisionStatus = 0
	// ENUM_REVISION_STATUS_PREDEPLOY signifies the predeploy job failed.
	EnumRevisionStatus_ENUM_REVISION_STATUS_PREDEPLOY_FAILED EnumRevisionStatus = 1
	// ENUM_REVISION_STATUS_DEPLOY_FAILED signifies the deploy job failed.
	EnumRevisionStatus_ENUM_REVISION_STATUS_DEPLOY_FAILED EnumRevisionStatus = 2
	// ENUM_REVISION_STATUS_BUILD_FAILED signifies the build failed.
	EnumRevisionStatus_ENUM_REVISION_STATUS_BUILD_FAILED EnumRevisionStatus = 3
)

// Enum value maps for EnumRevisionStatus.
var (
	EnumRevisionStatus_name = map[int32]string{
		0: "ENUM_REVISION_STATUS_UNSPECIFIED",
		1: "ENUM_REVISION_STATUS_PREDEPLOY_FAILED",
		2: "ENUM_REVISION_STATUS_DEPLOY_FAILED",
		3: "ENUM_REVISION_STATUS_BUILD_FAILED",
	}
	EnumRevisionStatus_value = map[string]int32{
		"ENUM_REVISION_STATUS_UNSPECIFIED":      0,
		"ENUM_REVISION_STATUS_PREDEPLOY_FAILED": 1,
		"ENUM_REVISION_STATUS_DEPLOY_FAILED":    2,
		"ENUM_REVISION_STATUS_BUILD_FAILED":     3,
	}
)

func (x EnumRevisionStatus) Enum() *EnumRevisionStatus {
	p := new(EnumRevisionStatus)
	*p = x
	return p
}

func (x EnumRevisionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumRevisionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_cluster_control_plane_proto_enumTypes[3].Descriptor()
}

func (EnumRevisionStatus) Type() protoreflect.EnumType {
	return &file_porter_v1_cluster_control_plane_proto_enumTypes[3]
}

func (x EnumRevisionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumRevisionStatus.Descriptor instead.
func (EnumRevisionStatus) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{3}
}

type QuotaIncreaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cloud_provider the given cloud provider will use to make quota increases
	CloudProvider EnumCloudProvider `protobuf:"varint,2,opt,name=cloud_provider,json=cloudProvider,proto3,enum=porter.v1.EnumCloudProvider" json:"cloud_provider,omitempty"`
	// cloud_provider_credentials_id [REQUIRED] is the Porter credentials that will be used for provisioning a cluster.
	// These must be stored within Porter, prior to cluster creation. For AWS this refers to the last link in an assume role chain
	CloudProviderCredentialsId string `protobuf:"bytes,3,opt,name=cloud_provider_credentials_id,json=cloudProviderCredentialsId,proto3" json:"cloud_provider_credentials_id,omitempty"`
	// quota_increases list of quota increases to be requsted
	QuotaIncreases []EnumQuotaIncrease `protobuf:"varint,4,rep,packed,name=quota_increases,json=quotaIncreases,proto3,enum=porter.v1.EnumQuotaIncrease" json:"quota_increases,omitempty"`
	// Types that are assignable to PreflightValues:
	//
	//	*QuotaIncreaseRequest_GkePreflightValues
	//	*QuotaIncreaseRequest_EksPreflightValues
	PreflightValues isQuotaIncreaseRequest_PreflightValues `protobuf_oneof:"preflight_values"`
}

func (x *QuotaIncreaseRequest) Reset() {
	*x = QuotaIncreaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaIncreaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaIncreaseRequest) ProtoMessage() {}

func (x *QuotaIncreaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaIncreaseRequest.ProtoReflect.Descriptor instead.
func (*QuotaIncreaseRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{0}
}

func (x *QuotaIncreaseRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *QuotaIncreaseRequest) GetCloudProvider() EnumCloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return EnumCloudProvider_ENUM_CLOUD_PROVIDER_UNSPECIFIED
}

func (x *QuotaIncreaseRequest) GetCloudProviderCredentialsId() string {
	if x != nil {
		return x.CloudProviderCredentialsId
	}
	return ""
}

func (x *QuotaIncreaseRequest) GetQuotaIncreases() []EnumQuotaIncrease {
	if x != nil {
		return x.QuotaIncreases
	}
	return nil
}

func (m *QuotaIncreaseRequest) GetPreflightValues() isQuotaIncreaseRequest_PreflightValues {
	if m != nil {
		return m.PreflightValues
	}
	return nil
}

func (x *QuotaIncreaseRequest) GetGkePreflightValues() *GKEPreflightValues {
	if x, ok := x.GetPreflightValues().(*QuotaIncreaseRequest_GkePreflightValues); ok {
		return x.GkePreflightValues
	}
	return nil
}

func (x *QuotaIncreaseRequest) GetEksPreflightValues() *EKSPreflightValues {
	if x, ok := x.GetPreflightValues().(*QuotaIncreaseRequest_EksPreflightValues); ok {
		return x.EksPreflightValues
	}
	return nil
}

type isQuotaIncreaseRequest_PreflightValues interface {
	isQuotaIncreaseRequest_PreflightValues()
}

type QuotaIncreaseRequest_GkePreflightValues struct {
	// gke_preflight_values the values that GKE will use to perform quota increases
	GkePreflightValues *GKEPreflightValues `protobuf:"bytes,5,opt,name=gke_preflight_values,json=gkePreflightValues,proto3,oneof"`
}

type QuotaIncreaseRequest_EksPreflightValues struct {
	// eks_preflight_values the values that AWS will use to perform quota increases
	EksPreflightValues *EKSPreflightValues `protobuf:"bytes,6,opt,name=eks_preflight_values,json=eksPreflightValues,proto3,oneof"` //AKS aks_kind = 6;
}

func (*QuotaIncreaseRequest_GkePreflightValues) isQuotaIncreaseRequest_PreflightValues() {}

func (*QuotaIncreaseRequest_EksPreflightValues) isQuotaIncreaseRequest_PreflightValues() {}

type QuotaIncreaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// error if any of quota increases failed
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *QuotaIncreaseResponse) Reset() {
	*x = QuotaIncreaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaIncreaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaIncreaseResponse) ProtoMessage() {}

func (x *QuotaIncreaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaIncreaseResponse.ProtoReflect.Descriptor instead.
func (*QuotaIncreaseResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{1}
}

func (x *QuotaIncreaseResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type PreflightCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: use contract instead
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cloud_provider [REQUIRED] represents the provider that we will provisioning the cluster in
	// Deprecated: use contract instead
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	CloudProvider EnumCloudProvider `protobuf:"varint,2,opt,name=cloud_provider,json=cloudProvider,proto3,enum=porter.v1.EnumCloudProvider" json:"cloud_provider,omitempty"`
	// cloud_provider_credentials_id [REQUIRED] is the Porter credentials that will be used for provisioning a cluster.
	// These must be stored within Porter, prior to cluster creation. For AWS this refers to the last link in an assume role chain
	// Deprecated: use contract instead
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	CloudProviderCredentialsId string `protobuf:"bytes,3,opt,name=cloud_provider_credentials_id,json=cloudProviderCredentialsId,proto3" json:"cloud_provider_credentials_id,omitempty"`
	// Types that are assignable to PreflightValues:
	//
	//	*PreflightCheckRequest_GkePreflightValues
	//	*PreflightCheckRequest_EksPreflightValues
	PreflightValues isPreflightCheckRequest_PreflightValues `protobuf_oneof:"preflight_values"`
	Contract        *Contract                               `protobuf:"bytes,6,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *PreflightCheckRequest) Reset() {
	*x = PreflightCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreflightCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreflightCheckRequest) ProtoMessage() {}

func (x *PreflightCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreflightCheckRequest.ProtoReflect.Descriptor instead.
func (*PreflightCheckRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{2}
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *PreflightCheckRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *PreflightCheckRequest) GetCloudProvider() EnumCloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return EnumCloudProvider_ENUM_CLOUD_PROVIDER_UNSPECIFIED
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *PreflightCheckRequest) GetCloudProviderCredentialsId() string {
	if x != nil {
		return x.CloudProviderCredentialsId
	}
	return ""
}

func (m *PreflightCheckRequest) GetPreflightValues() isPreflightCheckRequest_PreflightValues {
	if m != nil {
		return m.PreflightValues
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *PreflightCheckRequest) GetGkePreflightValues() *GKEPreflightValues {
	if x, ok := x.GetPreflightValues().(*PreflightCheckRequest_GkePreflightValues); ok {
		return x.GkePreflightValues
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *PreflightCheckRequest) GetEksPreflightValues() *EKSPreflightValues {
	if x, ok := x.GetPreflightValues().(*PreflightCheckRequest_EksPreflightValues); ok {
		return x.EksPreflightValues
	}
	return nil
}

func (x *PreflightCheckRequest) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

type isPreflightCheckRequest_PreflightValues interface {
	isPreflightCheckRequest_PreflightValues()
}

type PreflightCheckRequest_GkePreflightValues struct {
	// gke_preflight_values the values that GKE will use to perform preflight checks
	// Deprecated: use contract instead
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	GkePreflightValues *GKEPreflightValues `protobuf:"bytes,4,opt,name=gke_preflight_values,json=gkePreflightValues,proto3,oneof"`
}

type PreflightCheckRequest_EksPreflightValues struct {
	// eks_preflight_values the values that AWS will use to perform preflight checks
	// Deprecated: use contract instead
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	EksPreflightValues *EKSPreflightValues `protobuf:"bytes,5,opt,name=eks_preflight_values,json=eksPreflightValues,proto3,oneof"`
}

func (*PreflightCheckRequest_GkePreflightValues) isPreflightCheckRequest_PreflightValues() {}

func (*PreflightCheckRequest_EksPreflightValues) isPreflightCheckRequest_PreflightValues() {}

type PreflightCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// preflight_checks keys are name of preflight check and error will be if the preflight checks fails, nil if it passes
	PreflightChecks map[string]*Error `protobuf:"bytes,1,rep,name=preflight_checks,json=preflightChecks,proto3" json:"preflight_checks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PreflightCheckResponse) Reset() {
	*x = PreflightCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreflightCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreflightCheckResponse) ProtoMessage() {}

func (x *PreflightCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreflightCheckResponse.ProtoReflect.Descriptor instead.
func (*PreflightCheckResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{3}
}

func (x *PreflightCheckResponse) GetPreflightChecks() map[string]*Error {
	if x != nil {
		return x.PreflightChecks
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type QuotaPreflightCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TargetArn  string `protobuf:"bytes,2,opt,name=target_arn,json=targetArn,proto3" json:"target_arn,omitempty"`
	ExternalId string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Region     string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *QuotaPreflightCheckRequest) Reset() {
	*x = QuotaPreflightCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaPreflightCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaPreflightCheckRequest) ProtoMessage() {}

func (x *QuotaPreflightCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaPreflightCheckRequest.ProtoReflect.Descriptor instead.
func (*QuotaPreflightCheckRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{4}
}

func (x *QuotaPreflightCheckRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *QuotaPreflightCheckRequest) GetTargetArn() string {
	if x != nil {
		return x.TargetArn
	}
	return ""
}

func (x *QuotaPreflightCheckRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *QuotaPreflightCheckRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type QuotaPreflightCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuotaPreflightCheckResponse) Reset() {
	*x = QuotaPreflightCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaPreflightCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaPreflightCheckResponse) ProtoMessage() {}

func (x *QuotaPreflightCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaPreflightCheckResponse.ProtoReflect.Descriptor instead.
func (*QuotaPreflightCheckResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{5}
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type CreateAssumeRoleChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	SourceArn          string `protobuf:"bytes,2,opt,name=source_arn,json=sourceArn,proto3" json:"source_arn,omitempty"`
	TargetAccessId     string `protobuf:"bytes,3,opt,name=target_access_id,json=targetAccessId,proto3" json:"target_access_id,omitempty"`
	TargetSecretKey    string `protobuf:"bytes,4,opt,name=target_secret_key,json=targetSecretKey,proto3" json:"target_secret_key,omitempty"`
	TargetSessionToken string `protobuf:"bytes,5,opt,name=target_session_token,json=targetSessionToken,proto3" json:"target_session_token,omitempty"`
	TargetArn          string `protobuf:"bytes,6,opt,name=target_arn,json=targetArn,proto3" json:"target_arn,omitempty"`
	ExternalId         string `protobuf:"bytes,7,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (x *CreateAssumeRoleChainRequest) Reset() {
	*x = CreateAssumeRoleChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssumeRoleChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssumeRoleChainRequest) ProtoMessage() {}

func (x *CreateAssumeRoleChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssumeRoleChainRequest.ProtoReflect.Descriptor instead.
func (*CreateAssumeRoleChainRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{6}
}

func (x *CreateAssumeRoleChainRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateAssumeRoleChainRequest) GetSourceArn() string {
	if x != nil {
		return x.SourceArn
	}
	return ""
}

func (x *CreateAssumeRoleChainRequest) GetTargetAccessId() string {
	if x != nil {
		return x.TargetAccessId
	}
	return ""
}

func (x *CreateAssumeRoleChainRequest) GetTargetSecretKey() string {
	if x != nil {
		return x.TargetSecretKey
	}
	return ""
}

func (x *CreateAssumeRoleChainRequest) GetTargetSessionToken() string {
	if x != nil {
		return x.TargetSessionToken
	}
	return ""
}

func (x *CreateAssumeRoleChainRequest) GetTargetArn() string {
	if x != nil {
		return x.TargetArn
	}
	return ""
}

func (x *CreateAssumeRoleChainRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type CreateAssumeRoleChainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TargetArn string `protobuf:"bytes,2,opt,name=target_arn,json=targetArn,proto3" json:"target_arn,omitempty"`
}

func (x *CreateAssumeRoleChainResponse) Reset() {
	*x = CreateAssumeRoleChainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssumeRoleChainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssumeRoleChainResponse) ProtoMessage() {}

func (x *CreateAssumeRoleChainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssumeRoleChainResponse.ProtoReflect.Descriptor instead.
func (*CreateAssumeRoleChainResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{7}
}

func (x *CreateAssumeRoleChainResponse) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateAssumeRoleChainResponse) GetTargetArn() string {
	if x != nil {
		return x.TargetArn
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type SaveAzureCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId              int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId               string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	SubscriptionId         string `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	TenantId               string `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	ServicePrincipalSecret []byte `protobuf:"bytes,5,opt,name=service_principal_secret,json=servicePrincipalSecret,proto3" json:"service_principal_secret,omitempty"`
}

func (x *SaveAzureCredentialsRequest) Reset() {
	*x = SaveAzureCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveAzureCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAzureCredentialsRequest) ProtoMessage() {}

func (x *SaveAzureCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAzureCredentialsRequest.ProtoReflect.Descriptor instead.
func (*SaveAzureCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{8}
}

func (x *SaveAzureCredentialsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SaveAzureCredentialsRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SaveAzureCredentialsRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *SaveAzureCredentialsRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *SaveAzureCredentialsRequest) GetServicePrincipalSecret() []byte {
	if x != nil {
		return x.ServicePrincipalSecret
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type SaveAzureCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId             int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CredentialsIdentifier string `protobuf:"bytes,2,opt,name=credentials_identifier,json=credentialsIdentifier,proto3" json:"credentials_identifier,omitempty"`
}

func (x *SaveAzureCredentialsResponse) Reset() {
	*x = SaveAzureCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveAzureCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAzureCredentialsResponse) ProtoMessage() {}

func (x *SaveAzureCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAzureCredentialsResponse.ProtoReflect.Descriptor instead.
func (*SaveAzureCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{9}
}

func (x *SaveAzureCredentialsResponse) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SaveAzureCredentialsResponse) GetCredentialsIdentifier() string {
	if x != nil {
		return x.CredentialsIdentifier
	}
	return ""
}

type KubeConfigForClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *KubeConfigForClusterRequest) Reset() {
	*x = KubeConfigForClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeConfigForClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeConfigForClusterRequest) ProtoMessage() {}

func (x *KubeConfigForClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeConfigForClusterRequest.ProtoReflect.Descriptor instead.
func (*KubeConfigForClusterRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{10}
}

func (x *KubeConfigForClusterRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *KubeConfigForClusterRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type KubeConfigForClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KubeConfig string `protobuf:"bytes,1,opt,name=kube_config,json=kubeConfig,proto3" json:"kube_config,omitempty"`
}

func (x *KubeConfigForClusterResponse) Reset() {
	*x = KubeConfigForClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeConfigForClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeConfigForClusterResponse) ProtoMessage() {}

func (x *KubeConfigForClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeConfigForClusterResponse.ProtoReflect.Descriptor instead.
func (*KubeConfigForClusterResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{11}
}

func (x *KubeConfigForClusterResponse) GetKubeConfig() string {
	if x != nil {
		return x.KubeConfig
	}
	return ""
}

type UpdateContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract *Contract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *UpdateContractRequest) Reset() {
	*x = UpdateContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContractRequest) ProtoMessage() {}

func (x *UpdateContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContractRequest.ProtoReflect.Descriptor instead.
func (*UpdateContractRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateContractRequest) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

type UpdateContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractRevision *ContractRevision `protobuf:"bytes,1,opt,name=contract_revision,json=contractRevision,proto3" json:"contract_revision,omitempty"`
}

func (x *UpdateContractResponse) Reset() {
	*x = UpdateContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContractResponse) ProtoMessage() {}

func (x *UpdateContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContractResponse.ProtoReflect.Descriptor instead.
func (*UpdateContractResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateContractResponse) GetContractRevision() *ContractRevision {
	if x != nil {
		return x.ContractRevision
	}
	return nil
}

type ClusterStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *ClusterStatusRequest) Reset() {
	*x = ClusterStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatusRequest) ProtoMessage() {}

func (x *ClusterStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatusRequest.ProtoReflect.Descriptor instead.
func (*ClusterStatusRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{14}
}

func (x *ClusterStatusRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ClusterStatusRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type ClusterStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId            int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId            int64  `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Phase                string `protobuf:"bytes,3,opt,name=phase,proto3" json:"phase,omitempty"`
	InfrastructureStatus bool   `protobuf:"varint,4,opt,name=infrastructure_status,json=infrastructureStatus,proto3" json:"infrastructure_status,omitempty"`
	ControlPlaneStatus   bool   `protobuf:"varint,5,opt,name=control_plane_status,json=controlPlaneStatus,proto3" json:"control_plane_status,omitempty"`
}

func (x *ClusterStatusResponse) Reset() {
	*x = ClusterStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatusResponse) ProtoMessage() {}

func (x *ClusterStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatusResponse.ProtoReflect.Descriptor instead.
func (*ClusterStatusResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{15}
}

func (x *ClusterStatusResponse) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ClusterStatusResponse) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterStatusResponse) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *ClusterStatusResponse) GetInfrastructureStatus() bool {
	if x != nil {
		return x.InfrastructureStatus
	}
	return false
}

func (x *ClusterStatusResponse) GetControlPlaneStatus() bool {
	if x != nil {
		return x.ControlPlaneStatus
	}
	return false
}

type DeleteClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractRevision *ContractRevision `protobuf:"bytes,1,opt,name=contract_revision,json=contractRevision,proto3" json:"contract_revision,omitempty"`
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteClusterRequest) GetContractRevision() *ContractRevision {
	if x != nil {
		return x.ContractRevision
	}
	return nil
}

type DeleteClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *DeleteClusterResponse) Reset() {
	*x = DeleteClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterResponse) ProtoMessage() {}

func (x *DeleteClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteClusterResponse) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteClusterResponse) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type ListRepositoriesForRegistryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RegistryUri string `protobuf:"bytes,2,opt,name=registry_uri,json=registryUri,proto3" json:"registry_uri,omitempty"`
}

func (x *ListRepositoriesForRegistryRequest) Reset() {
	*x = ListRepositoriesForRegistryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepositoriesForRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoriesForRegistryRequest) ProtoMessage() {}

func (x *ListRepositoriesForRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoriesForRegistryRequest.ProtoReflect.Descriptor instead.
func (*ListRepositoriesForRegistryRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{18}
}

func (x *ListRepositoriesForRegistryRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListRepositoriesForRegistryRequest) GetRegistryUri() string {
	if x != nil {
		return x.RegistryUri
	}
	return ""
}

type ListRepositoriesForRegistryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repositories []*Repository `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
}

func (x *ListRepositoriesForRegistryResponse) Reset() {
	*x = ListRepositoriesForRegistryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepositoriesForRegistryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoriesForRegistryResponse) ProtoMessage() {}

func (x *ListRepositoriesForRegistryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoriesForRegistryResponse.ProtoReflect.Descriptor instead.
func (*ListRepositoriesForRegistryResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{19}
}

func (x *ListRepositoriesForRegistryResponse) GetRepositories() []*Repository {
	if x != nil {
		return x.Repositories
	}
	return nil
}

type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uri  string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *Repository) Reset() {
	*x = Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{20}
}

func (x *Repository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Repository) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type ListImagesForRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RegistryUri string `protobuf:"bytes,2,opt,name=registry_uri,json=registryUri,proto3" json:"registry_uri,omitempty"`
	RepoName    string `protobuf:"bytes,3,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
}

func (x *ListImagesForRepositoryRequest) Reset() {
	*x = ListImagesForRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImagesForRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImagesForRepositoryRequest) ProtoMessage() {}

func (x *ListImagesForRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImagesForRepositoryRequest.ProtoReflect.Descriptor instead.
func (*ListImagesForRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{21}
}

func (x *ListImagesForRepositoryRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListImagesForRepositoryRequest) GetRegistryUri() string {
	if x != nil {
		return x.RegistryUri
	}
	return ""
}

func (x *ListImagesForRepositoryRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

type ListImagesForRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images []*Image `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *ListImagesForRepositoryResponse) Reset() {
	*x = ListImagesForRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImagesForRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImagesForRepositoryResponse) ProtoMessage() {}

func (x *ListImagesForRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImagesForRepositoryResponse.ProtoReflect.Descriptor instead.
func (*ListImagesForRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{22}
}

func (x *ListImagesForRepositoryResponse) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryName string                 `protobuf:"bytes,1,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
	Tag            string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Digest         string                 `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{23}
}

func (x *Image) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *Image) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Image) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *Image) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// ImageInfo describes everything related to a cloud-agnostic Docker image
type ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uri the uri of an image. A valid image pull will use this uri suffixed by a tag
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// artifacts refers to the instances of an image in an image repository, each sharing the same uri
	Artifacts []*ImageArtifact `protobuf:"bytes,2,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
}

func (x *ImageInfo) Reset() {
	*x = ImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfo) ProtoMessage() {}

func (x *ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfo.ProtoReflect.Descriptor instead.
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{24}
}

func (x *ImageInfo) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *ImageInfo) GetArtifacts() []*ImageArtifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

type ImageArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tag is the tag associated with the artifact
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// updated_at is the time at which the artifact was created or updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ImageArtifact) Reset() {
	*x = ImageArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageArtifact) ProtoMessage() {}

func (x *ImageArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageArtifact.ProtoReflect.Descriptor instead.
func (*ImageArtifact) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{25}
}

func (x *ImageArtifact) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ImageArtifact) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type TokenForRegistryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RegistryUri string `protobuf:"bytes,2,opt,name=registry_uri,json=registryUri,proto3" json:"registry_uri,omitempty"`
}

func (x *TokenForRegistryRequest) Reset() {
	*x = TokenForRegistryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenForRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenForRegistryRequest) ProtoMessage() {}

func (x *TokenForRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenForRegistryRequest.ProtoReflect.Descriptor instead.
func (*TokenForRegistryRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{26}
}

func (x *TokenForRegistryRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *TokenForRegistryRequest) GetRegistryUri() string {
	if x != nil {
		return x.RegistryUri
	}
	return ""
}

type TokenForRegistryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Expiry *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *TokenForRegistryResponse) Reset() {
	*x = TokenForRegistryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenForRegistryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenForRegistryResponse) ProtoMessage() {}

func (x *TokenForRegistryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenForRegistryResponse.ProtoReflect.Descriptor instead.
func (*TokenForRegistryResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{27}
}

func (x *TokenForRegistryResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TokenForRegistryResponse) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

type ReadContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractRevision *ContractRevision `protobuf:"bytes,1,opt,name=contract_revision,json=contractRevision,proto3" json:"contract_revision,omitempty"`
}

func (x *ReadContractRequest) Reset() {
	*x = ReadContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadContractRequest) ProtoMessage() {}

func (x *ReadContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadContractRequest.ProtoReflect.Descriptor instead.
func (*ReadContractRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{28}
}

func (x *ReadContractRequest) GetContractRevision() *ContractRevision {
	if x != nil {
		return x.ContractRevision
	}
	return nil
}

type ReadContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base64Contract string `protobuf:"bytes,1,opt,name=base64_contract,json=base64Contract,proto3" json:"base64_contract,omitempty"`
}

func (x *ReadContractResponse) Reset() {
	*x = ReadContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadContractResponse) ProtoMessage() {}

func (x *ReadContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadContractResponse.ProtoReflect.Descriptor instead.
func (*ReadContractResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{29}
}

func (x *ReadContractResponse) GetBase64Contract() string {
	if x != nil {
		return x.Base64Contract
	}
	return ""
}

type ValidatePorterAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app will be installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetId string `protobuf:"bytes,2,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// commit_sha is the current commit sha to be built and applied
	CommitSha string `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	// app is the definition of the PorterApp to be applied
	App *PorterApp `protobuf:"bytes,4,opt,name=app,proto3" json:"app,omitempty"`
	// deletions is an object containing the names of fields to be deleted from the app
	Deletions *Deletions `protobuf:"bytes,5,opt,name=deletions,proto3" json:"deletions,omitempty"`
	// app_overrides contains environment specific overrides if they exist, applied depending on the deployment target
	AppOverrides *PorterApp `protobuf:"bytes,6,opt,name=app_overrides,json=appOverrides,proto3" json:"app_overrides,omitempty"`
	// base_deployment_target_id is used to find a revision of the app in the base deployment target, which hydrates the preview app template
	// deprecated: use the base deployment target directly on the template instead
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	BaseDeploymentTargetId string `protobuf:"bytes,7,opt,name=base_deployment_target_id,json=baseDeploymentTargetId,proto3" json:"base_deployment_target_id,omitempty"`
	// deployment_target_name is the name of the deployment target where the app will be installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetName string `protobuf:"bytes,8,opt,name=deployment_target_name,json=deploymentTargetName,proto3" json:"deployment_target_name,omitempty"`
}

func (x *ValidatePorterAppRequest) Reset() {
	*x = ValidatePorterAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatePorterAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatePorterAppRequest) ProtoMessage() {}

func (x *ValidatePorterAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatePorterAppRequest.ProtoReflect.Descriptor instead.
func (*ValidatePorterAppRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{30}
}

func (x *ValidatePorterAppRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ValidatePorterAppRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *ValidatePorterAppRequest) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *ValidatePorterAppRequest) GetApp() *PorterApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *ValidatePorterAppRequest) GetDeletions() *Deletions {
	if x != nil {
		return x.Deletions
	}
	return nil
}

func (x *ValidatePorterAppRequest) GetAppOverrides() *PorterApp {
	if x != nil {
		return x.AppOverrides
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *ValidatePorterAppRequest) GetBaseDeploymentTargetId() string {
	if x != nil {
		return x.BaseDeploymentTargetId
	}
	return ""
}

func (x *ValidatePorterAppRequest) GetDeploymentTargetName() string {
	if x != nil {
		return x.DeploymentTargetName
	}
	return ""
}

type ValidatePorterAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App *PorterApp `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *ValidatePorterAppResponse) Reset() {
	*x = ValidatePorterAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatePorterAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatePorterAppResponse) ProtoMessage() {}

func (x *ValidatePorterAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatePorterAppResponse.ProtoReflect.Descriptor instead.
func (*ValidatePorterAppResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{31}
}

func (x *ValidatePorterAppResponse) GetApp() *PorterApp {
	if x != nil {
		return x.App
	}
	return nil
}

type ApplyPorterAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app will be installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetId string `protobuf:"bytes,2,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// app is the definition of the PorterApp to be applied
	App *PorterApp `protobuf:"bytes,3,opt,name=app,proto3" json:"app,omitempty"`
	// porter_app_revision_id is the id of the PorterAppRevision to be applied.  This is used by the CLI to provide updates to an existing app revision. If provided, app must be empty.
	PorterAppRevisionId string `protobuf:"bytes,4,opt,name=porter_app_revision_id,json=porterAppRevisionId,proto3" json:"porter_app_revision_id,omitempty"`
	// force_build is a flag that forces the app to rebuild, regardless of the existing tag. This is used on initial apply by the CLI.
	ForceBuild bool `protobuf:"varint,5,opt,name=force_build,json=forceBuild,proto3" json:"force_build,omitempty"`
	// app_env is the current set of environment variables for the upcoming app revision
	AppEnv *EnvGroupVariables `protobuf:"bytes,6,opt,name=app_env,json=appEnv,proto3" json:"app_env,omitempty"`
	// is_hard_env_update is a flag that indicates whether the app environment should be fully overwritten, or if the new app env variables should be merged with the existing
	IsHardEnvUpdate bool `protobuf:"varint,7,opt,name=is_hard_env_update,json=isHardEnvUpdate,proto3" json:"is_hard_env_update,omitempty"`
	// deployment_target_name is the name of the deployment target where the app will be installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetName string `protobuf:"bytes,8,opt,name=deployment_target_name,json=deploymentTargetName,proto3" json:"deployment_target_name,omitempty"`
}

func (x *ApplyPorterAppRequest) Reset() {
	*x = ApplyPorterAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyPorterAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyPorterAppRequest) ProtoMessage() {}

func (x *ApplyPorterAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyPorterAppRequest.ProtoReflect.Descriptor instead.
func (*ApplyPorterAppRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{32}
}

func (x *ApplyPorterAppRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ApplyPorterAppRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *ApplyPorterAppRequest) GetApp() *PorterApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *ApplyPorterAppRequest) GetPorterAppRevisionId() string {
	if x != nil {
		return x.PorterAppRevisionId
	}
	return ""
}

func (x *ApplyPorterAppRequest) GetForceBuild() bool {
	if x != nil {
		return x.ForceBuild
	}
	return false
}

func (x *ApplyPorterAppRequest) GetAppEnv() *EnvGroupVariables {
	if x != nil {
		return x.AppEnv
	}
	return nil
}

func (x *ApplyPorterAppRequest) GetIsHardEnvUpdate() bool {
	if x != nil {
		return x.IsHardEnvUpdate
	}
	return false
}

func (x *ApplyPorterAppRequest) GetDeploymentTargetName() string {
	if x != nil {
		return x.DeploymentTargetName
	}
	return ""
}

type ApplyPorterAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PorterAppRevisionId string `protobuf:"bytes,1,opt,name=porter_app_revision_id,json=porterAppRevisionId,proto3" json:"porter_app_revision_id,omitempty"`
	// cli_action is the action that the CLI should take after applying the PorterApp (at the time of writing, either build the image or track whether a predeploy job has completed)
	CliAction EnumCLIAction `protobuf:"varint,2,opt,name=cli_action,json=cliAction,proto3,enum=porter.v1.EnumCLIAction" json:"cli_action,omitempty"`
}

func (x *ApplyPorterAppResponse) Reset() {
	*x = ApplyPorterAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyPorterAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyPorterAppResponse) ProtoMessage() {}

func (x *ApplyPorterAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyPorterAppResponse.ProtoReflect.Descriptor instead.
func (*ApplyPorterAppResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{33}
}

func (x *ApplyPorterAppResponse) GetPorterAppRevisionId() string {
	if x != nil {
		return x.PorterAppRevisionId
	}
	return ""
}

func (x *ApplyPorterAppResponse) GetCliAction() EnumCLIAction {
	if x != nil {
		return x.CliAction
	}
	return EnumCLIAction_ENUM_CLI_ACTION_UNSPECIFIED
}

type UpdateRevisionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_revision_id is the id of the PorterAppRevision
	AppRevisionId string `protobuf:"bytes,2,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
	// revision_status is the new status of the revision
	RevisionStatus EnumRevisionStatus `protobuf:"varint,3,opt,name=revision_status,json=revisionStatus,proto3,enum=porter.v1.EnumRevisionStatus" json:"revision_status,omitempty"`
}

func (x *UpdateRevisionStatusRequest) Reset() {
	*x = UpdateRevisionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRevisionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRevisionStatusRequest) ProtoMessage() {}

func (x *UpdateRevisionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRevisionStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateRevisionStatusRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateRevisionStatusRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateRevisionStatusRequest) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

func (x *UpdateRevisionStatusRequest) GetRevisionStatus() EnumRevisionStatus {
	if x != nil {
		return x.RevisionStatus
	}
	return EnumRevisionStatus_ENUM_REVISION_STATUS_UNSPECIFIED
}

type UpdateRevisionStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRevisionStatusResponse) Reset() {
	*x = UpdateRevisionStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRevisionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRevisionStatusResponse) ProtoMessage() {}

func (x *UpdateRevisionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRevisionStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateRevisionStatusResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{35}
}

type RollbackRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_id is the id of the PorterApp to roll back
	AppId int64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetId string `protobuf:"bytes,3,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// app_revision_id is the id of the PorterAppRevision
	AppRevisionId string `protobuf:"bytes,4,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
	// deployment_target_name is the name of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetName string `protobuf:"bytes,5,opt,name=deployment_target_name,json=deploymentTargetName,proto3" json:"deployment_target_name,omitempty"`
}

func (x *RollbackRevisionRequest) Reset() {
	*x = RollbackRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackRevisionRequest) ProtoMessage() {}

func (x *RollbackRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackRevisionRequest.ProtoReflect.Descriptor instead.
func (*RollbackRevisionRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{36}
}

func (x *RollbackRevisionRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *RollbackRevisionRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *RollbackRevisionRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *RollbackRevisionRequest) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

func (x *RollbackRevisionRequest) GetDeploymentTargetName() string {
	if x != nil {
		return x.DeploymentTargetName
	}
	return ""
}

type RollbackRevisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// target_revision_number is the revision number of the revision that was rolled back to
	TargetRevisionNumber int32 `protobuf:"varint,1,opt,name=target_revision_number,json=targetRevisionNumber,proto3" json:"target_revision_number,omitempty"`
	// app_revision_id is the id of the newly created PorterAppRevision
	AppRevisionId string `protobuf:"bytes,2,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
}

func (x *RollbackRevisionResponse) Reset() {
	*x = RollbackRevisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackRevisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackRevisionResponse) ProtoMessage() {}

func (x *RollbackRevisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackRevisionResponse.ProtoReflect.Descriptor instead.
func (*RollbackRevisionResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{37}
}

func (x *RollbackRevisionResponse) GetTargetRevisionNumber() int32 {
	if x != nil {
		return x.TargetRevisionNumber
	}
	return 0
}

func (x *RollbackRevisionResponse) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

// DeletePorterAppRequest is the request object when deleting a porter app from a given project
type DeletePorterAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project that the PorterApp belongs to
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_name is the name of the porter app to be deleted
	AppName string `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *DeletePorterAppRequest) Reset() {
	*x = DeletePorterAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePorterAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePorterAppRequest) ProtoMessage() {}

func (x *DeletePorterAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePorterAppRequest.ProtoReflect.Descriptor instead.
func (*DeletePorterAppRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{38}
}

func (x *DeletePorterAppRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeletePorterAppRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

// DeletePorterAppResponse is the response object when deleting a porter app from a given project
type DeletePorterAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_id is the id of the PorterApp that was deleted
	AppId int64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *DeletePorterAppResponse) Reset() {
	*x = DeletePorterAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePorterAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePorterAppResponse) ProtoMessage() {}

func (x *DeletePorterAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePorterAppResponse.ProtoReflect.Descriptor instead.
func (*DeletePorterAppResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{39}
}

func (x *DeletePorterAppResponse) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

// DeleteAppDeploymentRequest is the request object when removing a porter app from a given deployment target
type DeleteAppDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetId string `protobuf:"bytes,2,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// app_name is the name of the porter app to be uninstalled
	AppName string `protobuf:"bytes,3,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// deployment_target_name is the name of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetName string `protobuf:"bytes,4,opt,name=deployment_target_name,json=deploymentTargetName,proto3" json:"deployment_target_name,omitempty"`
}

func (x *DeleteAppDeploymentRequest) Reset() {
	*x = DeleteAppDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppDeploymentRequest) ProtoMessage() {}

func (x *DeleteAppDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppDeploymentRequest.ProtoReflect.Descriptor instead.
func (*DeleteAppDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteAppDeploymentRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteAppDeploymentRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *DeleteAppDeploymentRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *DeleteAppDeploymentRequest) GetDeploymentTargetName() string {
	if x != nil {
		return x.DeploymentTargetName
	}
	return ""
}

// DeleteAppDeploymentResponse is the response object when removing a porter app from a given deployment target
type DeleteAppDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAppDeploymentResponse) Reset() {
	*x = DeleteAppDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppDeploymentResponse) ProtoMessage() {}

func (x *DeleteAppDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppDeploymentResponse.ProtoReflect.Descriptor instead.
func (*DeleteAppDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{41}
}

// DeleteDeploymentTargetRequest is the request object when removing a deployment target from a given cluster
type DeleteDeploymentTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_id is the id of the deployment target to be deleted. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetId string `protobuf:"bytes,2,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// deployment_target_name is the name of the deployment target to be deleted. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetName string `protobuf:"bytes,3,opt,name=deployment_target_name,json=deploymentTargetName,proto3" json:"deployment_target_name,omitempty"`
}

func (x *DeleteDeploymentTargetRequest) Reset() {
	*x = DeleteDeploymentTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeploymentTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeploymentTargetRequest) ProtoMessage() {}

func (x *DeleteDeploymentTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeploymentTargetRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeploymentTargetRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteDeploymentTargetRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteDeploymentTargetRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *DeleteDeploymentTargetRequest) GetDeploymentTargetName() string {
	if x != nil {
		return x.DeploymentTargetName
	}
	return ""
}

// DeleteDeploymentTargetResponse is the response object when removing a deployment target from a given cluster
type DeleteDeploymentTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDeploymentTargetResponse) Reset() {
	*x = DeleteDeploymentTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeploymentTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeploymentTargetResponse) ProtoMessage() {}

func (x *DeleteDeploymentTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeploymentTargetResponse.ProtoReflect.Descriptor instead.
func (*DeleteDeploymentTargetResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{43}
}

type CurrentAppRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_id is the id of the PorterApp that is currently installed
	AppId int64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetId string `protobuf:"bytes,3,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// deployment_target_name is the name of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetName string `protobuf:"bytes,4,opt,name=deployment_target_name,json=deploymentTargetName,proto3" json:"deployment_target_name,omitempty"`
}

func (x *CurrentAppRevisionRequest) Reset() {
	*x = CurrentAppRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentAppRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentAppRevisionRequest) ProtoMessage() {}

func (x *CurrentAppRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentAppRevisionRequest.ProtoReflect.Descriptor instead.
func (*CurrentAppRevisionRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{44}
}

func (x *CurrentAppRevisionRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CurrentAppRevisionRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *CurrentAppRevisionRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *CurrentAppRevisionRequest) GetDeploymentTargetName() string {
	if x != nil {
		return x.DeploymentTargetName
	}
	return ""
}

type AppRevision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app is the definition of the PorterApp that is currently installed
	App *PorterApp `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	// status is the status of the revision
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// revision_number is the revision number respective to the application and deployment target
	RevisionNumber uint64 `protobuf:"varint,3,opt,name=revision_number,json=revisionNumber,proto3" json:"revision_number,omitempty"`
	// created_at is the time the revision was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// updated_at is the time the revision was last updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// id is the id of the revision
	Id string `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	// deployment_target_id is the id of the deployment target where the revision occurs
	DeploymentTargetId string `protobuf:"bytes,7,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
}

func (x *AppRevision) Reset() {
	*x = AppRevision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppRevision) ProtoMessage() {}

func (x *AppRevision) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppRevision.ProtoReflect.Descriptor instead.
func (*AppRevision) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{45}
}

func (x *AppRevision) GetApp() *PorterApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *AppRevision) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AppRevision) GetRevisionNumber() uint64 {
	if x != nil {
		return x.RevisionNumber
	}
	return 0
}

func (x *AppRevision) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AppRevision) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AppRevision) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppRevision) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

// AppRevisionMetadata is the metadata for a given app revision. It is a lightweight version of the AppRevision object
// used to send messages via nats
type AppRevisionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project that the revision belongs to
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// id is the id of the revision
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AppRevisionMetadata) Reset() {
	*x = AppRevisionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppRevisionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppRevisionMetadata) ProtoMessage() {}

func (x *AppRevisionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppRevisionMetadata.ProtoReflect.Descriptor instead.
func (*AppRevisionMetadata) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{46}
}

func (x *AppRevisionMetadata) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AppRevisionMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CurrentAppRevisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// revision is the currently deployed app revision for a given porter_app and deployment_target
	AppRevision *AppRevision `protobuf:"bytes,1,opt,name=app_revision,json=appRevision,proto3" json:"app_revision,omitempty"`
}

func (x *CurrentAppRevisionResponse) Reset() {
	*x = CurrentAppRevisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentAppRevisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentAppRevisionResponse) ProtoMessage() {}

func (x *CurrentAppRevisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentAppRevisionResponse.ProtoReflect.Descriptor instead.
func (*CurrentAppRevisionResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{47}
}

func (x *CurrentAppRevisionResponse) GetAppRevision() *AppRevision {
	if x != nil {
		return x.AppRevision
	}
	return nil
}

type ListAppRevisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_id is the id of the PorterApp that is currently installed
	AppId int64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetId string `protobuf:"bytes,3,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// deployment_target_name is the name of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetName string `protobuf:"bytes,4,opt,name=deployment_target_name,json=deploymentTargetName,proto3" json:"deployment_target_name,omitempty"`
}

func (x *ListAppRevisionsRequest) Reset() {
	*x = ListAppRevisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAppRevisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAppRevisionsRequest) ProtoMessage() {}

func (x *ListAppRevisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAppRevisionsRequest.ProtoReflect.Descriptor instead.
func (*ListAppRevisionsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{48}
}

func (x *ListAppRevisionsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListAppRevisionsRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *ListAppRevisionsRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *ListAppRevisionsRequest) GetDeploymentTargetName() string {
	if x != nil {
		return x.DeploymentTargetName
	}
	return ""
}

type ListAppRevisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_revisions is the list of app revisions for the given app and deployment target
	AppRevisions []*AppRevision `protobuf:"bytes,1,rep,name=app_revisions,json=appRevisions,proto3" json:"app_revisions,omitempty"`
}

func (x *ListAppRevisionsResponse) Reset() {
	*x = ListAppRevisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAppRevisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAppRevisionsResponse) ProtoMessage() {}

func (x *ListAppRevisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAppRevisionsResponse.ProtoReflect.Descriptor instead.
func (*ListAppRevisionsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{49}
}

func (x *ListAppRevisionsResponse) GetAppRevisions() []*AppRevision {
	if x != nil {
		return x.AppRevisions
	}
	return nil
}

type LatestAppRevisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_name is the name of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetName string `protobuf:"bytes,2,opt,name=deployment_target_name,json=deploymentTargetName,proto3" json:"deployment_target_name,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetId string `protobuf:"bytes,3,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
}

func (x *LatestAppRevisionsRequest) Reset() {
	*x = LatestAppRevisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestAppRevisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestAppRevisionsRequest) ProtoMessage() {}

func (x *LatestAppRevisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestAppRevisionsRequest.ProtoReflect.Descriptor instead.
func (*LatestAppRevisionsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{50}
}

func (x *LatestAppRevisionsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *LatestAppRevisionsRequest) GetDeploymentTargetName() string {
	if x != nil {
		return x.DeploymentTargetName
	}
	return ""
}

func (x *LatestAppRevisionsRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

type LatestAppRevisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_revisions is the list of app revisions for the given deployment target
	AppRevisions []*AppRevision `protobuf:"bytes,1,rep,name=app_revisions,json=appRevisions,proto3" json:"app_revisions,omitempty"`
}

func (x *LatestAppRevisionsResponse) Reset() {
	*x = LatestAppRevisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestAppRevisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestAppRevisionsResponse) ProtoMessage() {}

func (x *LatestAppRevisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestAppRevisionsResponse.ProtoReflect.Descriptor instead.
func (*LatestAppRevisionsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{51}
}

func (x *LatestAppRevisionsResponse) GetAppRevisions() []*AppRevision {
	if x != nil {
		return x.AppRevisions
	}
	return nil
}

type GetAppRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_revision_id is the id of the PorterAppRevision to return
	AppRevisionId string `protobuf:"bytes,2,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
}

func (x *GetAppRevisionRequest) Reset() {
	*x = GetAppRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppRevisionRequest) ProtoMessage() {}

func (x *GetAppRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppRevisionRequest.ProtoReflect.Descriptor instead.
func (*GetAppRevisionRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{52}
}

func (x *GetAppRevisionRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetAppRevisionRequest) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

type GetAppRevisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_revision is the PorterAppRevision that was requested
	AppRevision *AppRevision `protobuf:"bytes,1,opt,name=app_revision,json=appRevision,proto3" json:"app_revision,omitempty"`
}

func (x *GetAppRevisionResponse) Reset() {
	*x = GetAppRevisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppRevisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppRevisionResponse) ProtoMessage() {}

func (x *GetAppRevisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppRevisionResponse.ProtoReflect.Descriptor instead.
func (*GetAppRevisionResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{53}
}

func (x *GetAppRevisionResponse) GetAppRevision() *AppRevision {
	if x != nil {
		return x.AppRevision
	}
	return nil
}

type PredeployStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_revision_id is the revision id of the PorterApp which should have its predeploy status checked
	AppRevisionId string `protobuf:"bytes,2,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
}

func (x *PredeployStatusRequest) Reset() {
	*x = PredeployStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredeployStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredeployStatusRequest) ProtoMessage() {}

func (x *PredeployStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredeployStatusRequest.ProtoReflect.Descriptor instead.
func (*PredeployStatusRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{54}
}

func (x *PredeployStatusRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PredeployStatusRequest) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

type PredeployStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// predeploy_status is the status of the predeploy job
	PredeployStatus EnumPredeployStatus `protobuf:"varint,1,opt,name=predeploy_status,json=predeployStatus,proto3,enum=porter.v1.EnumPredeployStatus" json:"predeploy_status,omitempty"`
}

func (x *PredeployStatusResponse) Reset() {
	*x = PredeployStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredeployStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredeployStatusResponse) ProtoMessage() {}

func (x *PredeployStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredeployStatusResponse.ProtoReflect.Descriptor instead.
func (*PredeployStatusResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{55}
}

func (x *PredeployStatusResponse) GetPredeployStatus() EnumPredeployStatus {
	if x != nil {
		return x.PredeployStatus
	}
	return EnumPredeployStatus_ENUM_PREDEPLOY_STATUS_UNSPECIFIED
}

type DeploymentTargetDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DeploymentTargetId string `protobuf:"bytes,2,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
}

func (x *DeploymentTargetDetailsRequest) Reset() {
	*x = DeploymentTargetDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentTargetDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentTargetDetailsRequest) ProtoMessage() {}

func (x *DeploymentTargetDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentTargetDetailsRequest.ProtoReflect.Descriptor instead.
func (*DeploymentTargetDetailsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{56}
}

func (x *DeploymentTargetDetailsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeploymentTargetDetailsRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

type DeploymentTargetDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// namespace is the namespace that the deployment target points to
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// cluster_id is the id of the cluster that the deployment target points to
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// is_preview indicates whether this is a preview deployment target or not
	IsPreview bool `protobuf:"varint,3,opt,name=is_preview,json=isPreview,proto3" json:"is_preview,omitempty"`
	// deployment_target_name is the name of the deployment target where the app is installed
	DeploymentTargetName string `protobuf:"bytes,4,opt,name=deployment_target_name,json=deploymentTargetName,proto3" json:"deployment_target_name,omitempty"`
}

func (x *DeploymentTargetDetailsResponse) Reset() {
	*x = DeploymentTargetDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentTargetDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentTargetDetailsResponse) ProtoMessage() {}

func (x *DeploymentTargetDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentTargetDetailsResponse.ProtoReflect.Descriptor instead.
func (*DeploymentTargetDetailsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{57}
}

func (x *DeploymentTargetDetailsResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeploymentTargetDetailsResponse) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *DeploymentTargetDetailsResponse) GetIsPreview() bool {
	if x != nil {
		return x.IsPreview
	}
	return false
}

func (x *DeploymentTargetDetailsResponse) GetDeploymentTargetName() string {
	if x != nil {
		return x.DeploymentTargetName
	}
	return ""
}

// CreateDeploymentTargetRequest is the request object for CreateDeploymentTarget
type CreateDeploymentTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// name is the name of the deployment target
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// namespace is the namespace that the deployment target points to
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// cluster_id is the id of the cluster that the deployment target points to
	ClusterId int64 `protobuf:"varint,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// is_preview indicates whether this is a preview deployment target or not
	IsPreview bool `protobuf:"varint,5,opt,name=is_preview,json=isPreview,proto3" json:"is_preview,omitempty"`
}

func (x *CreateDeploymentTargetRequest) Reset() {
	*x = CreateDeploymentTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeploymentTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeploymentTargetRequest) ProtoMessage() {}

func (x *CreateDeploymentTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeploymentTargetRequest.ProtoReflect.Descriptor instead.
func (*CreateDeploymentTargetRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{58}
}

func (x *CreateDeploymentTargetRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateDeploymentTargetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDeploymentTargetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateDeploymentTargetRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *CreateDeploymentTargetRequest) GetIsPreview() bool {
	if x != nil {
		return x.IsPreview
	}
	return false
}

// CreateDeploymentTargetResponse is the response object for CreateDeploymentTarget
type CreateDeploymentTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentTargetId string `protobuf:"bytes,1,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
}

func (x *CreateDeploymentTargetResponse) Reset() {
	*x = CreateDeploymentTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeploymentTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeploymentTargetResponse) ProtoMessage() {}

func (x *CreateDeploymentTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeploymentTargetResponse.ProtoReflect.Descriptor instead.
func (*CreateDeploymentTargetResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{59}
}

func (x *CreateDeploymentTargetResponse) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

type SeedAppRevisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId   int64  `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ReleaseName string `protobuf:"bytes,3,opt,name=release_name,json=releaseName,proto3" json:"release_name,omitempty"`
	// source_namespace is the namespace where the app to be migrated is currently installed
	SourceNamespace string `protobuf:"bytes,4,opt,name=source_namespace,json=sourceNamespace,proto3" json:"source_namespace,omitempty"`
	// target_namespace is the namespace where the app will be installed. This will determine where the env groups are seeded.
	TargetNamespace string `protobuf:"bytes,5,opt,name=target_namespace,json=targetNamespace,proto3" json:"target_namespace,omitempty"`
}

func (x *SeedAppRevisionsRequest) Reset() {
	*x = SeedAppRevisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedAppRevisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedAppRevisionsRequest) ProtoMessage() {}

func (x *SeedAppRevisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeedAppRevisionsRequest.ProtoReflect.Descriptor instead.
func (*SeedAppRevisionsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{60}
}

func (x *SeedAppRevisionsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SeedAppRevisionsRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *SeedAppRevisionsRequest) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *SeedAppRevisionsRequest) GetSourceNamespace() string {
	if x != nil {
		return x.SourceNamespace
	}
	return ""
}

func (x *SeedAppRevisionsRequest) GetTargetNamespace() string {
	if x != nil {
		return x.TargetNamespace
	}
	return ""
}

type SeedAppRevisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SeedAppRevisionsResponse) Reset() {
	*x = SeedAppRevisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedAppRevisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedAppRevisionsResponse) ProtoMessage() {}

func (x *SeedAppRevisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeedAppRevisionsResponse.ProtoReflect.Descriptor instead.
func (*SeedAppRevisionsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{61}
}

// EnvGroupVariablesRequest is the request object when retrieving the variables for a given EnvGroup
type EnvGroupVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetId string    `protobuf:"bytes,2,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	EnvGroup           *EnvGroup `protobuf:"bytes,3,opt,name=env_group,json=envGroup,proto3" json:"env_group,omitempty"`
	// deployment_target_name is the name of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetName string `protobuf:"bytes,4,opt,name=deployment_target_name,json=deploymentTargetName,proto3" json:"deployment_target_name,omitempty"`
}

func (x *EnvGroupVariablesRequest) Reset() {
	*x = EnvGroupVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvGroupVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvGroupVariablesRequest) ProtoMessage() {}

func (x *EnvGroupVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvGroupVariablesRequest.ProtoReflect.Descriptor instead.
func (*EnvGroupVariablesRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{62}
}

func (x *EnvGroupVariablesRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *EnvGroupVariablesRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *EnvGroupVariablesRequest) GetEnvGroup() *EnvGroup {
	if x != nil {
		return x.EnvGroup
	}
	return nil
}

func (x *EnvGroupVariablesRequest) GetDeploymentTargetName() string {
	if x != nil {
		return x.DeploymentTargetName
	}
	return ""
}

// EnvGroupVariablesResponse is the response object when retrieving the variables for a given EnvGroup
type EnvGroupVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvGroupVariables *EnvGroupVariables `protobuf:"bytes,1,opt,name=env_group_variables,json=envGroupVariables,proto3" json:"env_group_variables,omitempty"`
}

func (x *EnvGroupVariablesResponse) Reset() {
	*x = EnvGroupVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvGroupVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvGroupVariablesResponse) ProtoMessage() {}

func (x *EnvGroupVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvGroupVariablesResponse.ProtoReflect.Descriptor instead.
func (*EnvGroupVariablesResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{63}
}

func (x *EnvGroupVariablesResponse) GetEnvGroupVariables() *EnvGroupVariables {
	if x != nil {
		return x.EnvGroupVariables
	}
	return nil
}

// LatestEnvGroupWithVariablesRequest is the request object when retrieving the latest EnvGroup and its variables for a given deployment target
type LatestEnvGroupWithVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetId string `protobuf:"bytes,2,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	EnvGroupName       string `protobuf:"bytes,3,opt,name=env_group_name,json=envGroupName,proto3" json:"env_group_name,omitempty"`
	// deployment_target_name is the name of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetName string `protobuf:"bytes,4,opt,name=deployment_target_name,json=deploymentTargetName,proto3" json:"deployment_target_name,omitempty"`
}

func (x *LatestEnvGroupWithVariablesRequest) Reset() {
	*x = LatestEnvGroupWithVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestEnvGroupWithVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestEnvGroupWithVariablesRequest) ProtoMessage() {}

func (x *LatestEnvGroupWithVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestEnvGroupWithVariablesRequest.ProtoReflect.Descriptor instead.
func (*LatestEnvGroupWithVariablesRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{64}
}

func (x *LatestEnvGroupWithVariablesRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *LatestEnvGroupWithVariablesRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *LatestEnvGroupWithVariablesRequest) GetEnvGroupName() string {
	if x != nil {
		return x.EnvGroupName
	}
	return ""
}

func (x *LatestEnvGroupWithVariablesRequest) GetDeploymentTargetName() string {
	if x != nil {
		return x.DeploymentTargetName
	}
	return ""
}

// LatestEnvGroupWithVariablesResponse is the response object when retrieving the latest EnvGroup and its variables for a given deployment target
type LatestEnvGroupWithVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvGroup          *EnvGroup          `protobuf:"bytes,1,opt,name=env_group,json=envGroup,proto3" json:"env_group,omitempty"`
	EnvGroupVariables *EnvGroupVariables `protobuf:"bytes,2,opt,name=env_group_variables,json=envGroupVariables,proto3" json:"env_group_variables,omitempty"`
}

func (x *LatestEnvGroupWithVariablesResponse) Reset() {
	*x = LatestEnvGroupWithVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestEnvGroupWithVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestEnvGroupWithVariablesResponse) ProtoMessage() {}

func (x *LatestEnvGroupWithVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestEnvGroupWithVariablesResponse.ProtoReflect.Descriptor instead.
func (*LatestEnvGroupWithVariablesResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{65}
}

func (x *LatestEnvGroupWithVariablesResponse) GetEnvGroup() *EnvGroup {
	if x != nil {
		return x.EnvGroup
	}
	return nil
}

func (x *LatestEnvGroupWithVariablesResponse) GetEnvGroupVariables() *EnvGroupVariables {
	if x != nil {
		return x.EnvGroupVariables
	}
	return nil
}

type UpdateAppImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	AppName   string `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetId string `protobuf:"bytes,3,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	RepositoryUrl      string `protobuf:"bytes,4,opt,name=repository_url,json=repositoryUrl,proto3" json:"repository_url,omitempty"`
	Tag                string `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	// deployment_target_name is the name of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetName string `protobuf:"bytes,6,opt,name=deployment_target_name,json=deploymentTargetName,proto3" json:"deployment_target_name,omitempty"`
}

func (x *UpdateAppImageRequest) Reset() {
	*x = UpdateAppImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppImageRequest) ProtoMessage() {}

func (x *UpdateAppImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppImageRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppImageRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{66}
}

func (x *UpdateAppImageRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateAppImageRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *UpdateAppImageRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *UpdateAppImageRequest) GetRepositoryUrl() string {
	if x != nil {
		return x.RepositoryUrl
	}
	return ""
}

func (x *UpdateAppImageRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *UpdateAppImageRequest) GetDeploymentTargetName() string {
	if x != nil {
		return x.DeploymentTargetName
	}
	return ""
}

type UpdateAppImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryUrl string `protobuf:"bytes,1,opt,name=repository_url,json=repositoryUrl,proto3" json:"repository_url,omitempty"`
	Tag           string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *UpdateAppImageResponse) Reset() {
	*x = UpdateAppImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppImageResponse) ProtoMessage() {}

func (x *UpdateAppImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppImageResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppImageResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{67}
}

func (x *UpdateAppImageResponse) GetRepositoryUrl() string {
	if x != nil {
		return x.RepositoryUrl
	}
	return ""
}

func (x *UpdateAppImageResponse) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// UpdateAppsLinkedToEnvGroupRequest is the request object for UpdateAppsLinkedToEnvGroup
type UpdateAppsLinkedToEnvGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId    int64  `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	EnvGroupName string `protobuf:"bytes,3,opt,name=env_group_name,json=envGroupName,proto3" json:"env_group_name,omitempty"`
}

func (x *UpdateAppsLinkedToEnvGroupRequest) Reset() {
	*x = UpdateAppsLinkedToEnvGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppsLinkedToEnvGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppsLinkedToEnvGroupRequest) ProtoMessage() {}

func (x *UpdateAppsLinkedToEnvGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppsLinkedToEnvGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppsLinkedToEnvGroupRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{68}
}

func (x *UpdateAppsLinkedToEnvGroupRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateAppsLinkedToEnvGroupRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *UpdateAppsLinkedToEnvGroupRequest) GetEnvGroupName() string {
	if x != nil {
		return x.EnvGroupName
	}
	return ""
}

// UpdateAppsLinkedToEnvGroupResponse is the response object for UpdateAppsLinkedToEnvGroup
type UpdateAppsLinkedToEnvGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAppsLinkedToEnvGroupResponse) Reset() {
	*x = UpdateAppsLinkedToEnvGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppsLinkedToEnvGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppsLinkedToEnvGroupResponse) ProtoMessage() {}

func (x *UpdateAppsLinkedToEnvGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppsLinkedToEnvGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppsLinkedToEnvGroupResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{69}
}

// AppHelmValuesRequest is the request object when retrieving the helm values for a given app
type AppHelmValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	AppId     int64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetId string `protobuf:"bytes,3,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// with_defaults indicates whether to merge the default Helm values with the explicitly provided values
	WithDefaults bool `protobuf:"varint,4,opt,name=with_defaults,json=withDefaults,proto3" json:"with_defaults,omitempty"`
	// deployment_target_name is the name of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetName string `protobuf:"bytes,5,opt,name=deployment_target_name,json=deploymentTargetName,proto3" json:"deployment_target_name,omitempty"`
}

func (x *AppHelmValuesRequest) Reset() {
	*x = AppHelmValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppHelmValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppHelmValuesRequest) ProtoMessage() {}

func (x *AppHelmValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppHelmValuesRequest.ProtoReflect.Descriptor instead.
func (*AppHelmValuesRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{70}
}

func (x *AppHelmValuesRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AppHelmValuesRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *AppHelmValuesRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *AppHelmValuesRequest) GetWithDefaults() bool {
	if x != nil {
		return x.WithDefaults
	}
	return false
}

func (x *AppHelmValuesRequest) GetDeploymentTargetName() string {
	if x != nil {
		return x.DeploymentTargetName
	}
	return ""
}

// AppHelmValuesResponse is the response object when retrieving the helm values for a given app
type AppHelmValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is base64-encoded, stringified json of the latest helm values for the app
	B64Values string `protobuf:"bytes,1,opt,name=b64_values,json=b64Values,proto3" json:"b64_values,omitempty"`
}

func (x *AppHelmValuesResponse) Reset() {
	*x = AppHelmValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppHelmValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppHelmValuesResponse) ProtoMessage() {}

func (x *AppHelmValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppHelmValuesResponse.ProtoReflect.Descriptor instead.
func (*AppHelmValuesResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{71}
}

func (x *AppHelmValuesResponse) GetB64Values() string {
	if x != nil {
		return x.B64Values
	}
	return ""
}

// ManualServiceRunRequest is the request object for ManualServiceRun
type ManualServiceRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	AppName   string `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetId string `protobuf:"bytes,3,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	ServiceName        string `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Command is the command to run on the service.  If not specified, the run command for the service will be used, as defined in the latest app revision.
	Command *string `protobuf:"bytes,5,opt,name=command,proto3,oneof" json:"command,omitempty"`
	// deployment_target_name is the name of the deployment target where the app is installed. One of deployment_target_id or deployment_target_name must be provided, with deployment_target_id taking precedence.
	DeploymentTargetName string `protobuf:"bytes,6,opt,name=deployment_target_name,json=deploymentTargetName,proto3" json:"deployment_target_name,omitempty"`
}

func (x *ManualServiceRunRequest) Reset() {
	*x = ManualServiceRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualServiceRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualServiceRunRequest) ProtoMessage() {}

func (x *ManualServiceRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualServiceRunRequest.ProtoReflect.Descriptor instead.
func (*ManualServiceRunRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{72}
}

func (x *ManualServiceRunRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ManualServiceRunRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *ManualServiceRunRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *ManualServiceRunRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ManualServiceRunRequest) GetCommand() string {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return ""
}

func (x *ManualServiceRunRequest) GetDeploymentTargetName() string {
	if x != nil {
		return x.DeploymentTargetName
	}
	return ""
}

// ManualServiceRunResponse is the response object for ManualServiceRun
type ManualServiceRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ManualServiceRunResponse) Reset() {
	*x = ManualServiceRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualServiceRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualServiceRunResponse) ProtoMessage() {}

func (x *ManualServiceRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualServiceRunResponse.ProtoReflect.Descriptor instead.
func (*ManualServiceRunResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{73}
}

// ImagesRequest is the request object for listing images
type ImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ImagesRequest) Reset() {
	*x = ImagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagesRequest) ProtoMessage() {}

func (x *ImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagesRequest.ProtoReflect.Descriptor instead.
func (*ImagesRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{74}
}

func (x *ImagesRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// ImagesResponse is the response object for listing images
type ImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images []*ImageInfo `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *ImagesResponse) Reset() {
	*x = ImagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagesResponse) ProtoMessage() {}

func (x *ImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagesResponse.ProtoReflect.Descriptor instead.
func (*ImagesResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{75}
}

func (x *ImagesResponse) GetImages() []*ImageInfo {
	if x != nil {
		return x.Images
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type EKSBearerTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *EKSBearerTokenRequest) Reset() {
	*x = EKSBearerTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EKSBearerTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EKSBearerTokenRequest) ProtoMessage() {}

func (x *EKSBearerTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EKSBearerTokenRequest.ProtoReflect.Descriptor instead.
func (*EKSBearerTokenRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{76}
}

func (x *EKSBearerTokenRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *EKSBearerTokenRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type EKSBearerTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *EKSBearerTokenResponse) Reset() {
	*x = EKSBearerTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EKSBearerTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EKSBearerTokenResponse) ProtoMessage() {}

func (x *EKSBearerTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EKSBearerTokenResponse.ProtoReflect.Descriptor instead.
func (*EKSBearerTokenResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{77}
}

func (x *EKSBearerTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type CertificateAuthorityDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *CertificateAuthorityDataRequest) Reset() {
	*x = CertificateAuthorityDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateAuthorityDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateAuthorityDataRequest) ProtoMessage() {}

func (x *CertificateAuthorityDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateAuthorityDataRequest.ProtoReflect.Descriptor instead.
func (*CertificateAuthorityDataRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{78}
}

func (x *CertificateAuthorityDataRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CertificateAuthorityDataRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type CertificateAuthorityDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateAuthorityData string `protobuf:"bytes,1,opt,name=certificate_authority_data,json=certificateAuthorityData,proto3" json:"certificate_authority_data,omitempty"`
}

func (x *CertificateAuthorityDataResponse) Reset() {
	*x = CertificateAuthorityDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateAuthorityDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateAuthorityDataResponse) ProtoMessage() {}

func (x *CertificateAuthorityDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateAuthorityDataResponse.ProtoReflect.Descriptor instead.
func (*CertificateAuthorityDataResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{79}
}

func (x *CertificateAuthorityDataResponse) GetCertificateAuthorityData() string {
	if x != nil {
		return x.CertificateAuthorityData
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type AssumeRoleChainTargetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *AssumeRoleChainTargetsRequest) Reset() {
	*x = AssumeRoleChainTargetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssumeRoleChainTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssumeRoleChainTargetsRequest) ProtoMessage() {}

func (x *AssumeRoleChainTargetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssumeRoleChainTargetsRequest.ProtoReflect.Descriptor instead.
func (*AssumeRoleChainTargetsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{80}
}

func (x *AssumeRoleChainTargetsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type AssumeRoleChainTargetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainLinks []*AssumeRoleChainLink `protobuf:"bytes,1,rep,name=chain_links,json=chainLinks,proto3" json:"chain_links,omitempty"`
}

func (x *AssumeRoleChainTargetsResponse) Reset() {
	*x = AssumeRoleChainTargetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssumeRoleChainTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssumeRoleChainTargetsResponse) ProtoMessage() {}

func (x *AssumeRoleChainTargetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssumeRoleChainTargetsResponse.ProtoReflect.Descriptor instead.
func (*AssumeRoleChainTargetsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{81}
}

func (x *AssumeRoleChainTargetsResponse) GetChainLinks() []*AssumeRoleChainLink {
	if x != nil {
		return x.ChainLinks
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type ECRTokenForRegistryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Region       string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	AwsAccountId string `protobuf:"bytes,3,opt,name=aws_account_id,json=awsAccountId,proto3" json:"aws_account_id,omitempty"`
}

func (x *ECRTokenForRegistryRequest) Reset() {
	*x = ECRTokenForRegistryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECRTokenForRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRTokenForRegistryRequest) ProtoMessage() {}

func (x *ECRTokenForRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRTokenForRegistryRequest.ProtoReflect.Descriptor instead.
func (*ECRTokenForRegistryRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{82}
}

func (x *ECRTokenForRegistryRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ECRTokenForRegistryRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ECRTokenForRegistryRequest) GetAwsAccountId() string {
	if x != nil {
		return x.AwsAccountId
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type ECRTokenForRegistryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Expiry *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *ECRTokenForRegistryResponse) Reset() {
	*x = ECRTokenForRegistryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECRTokenForRegistryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRTokenForRegistryResponse) ProtoMessage() {}

func (x *ECRTokenForRegistryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRTokenForRegistryResponse.ProtoReflect.Descriptor instead.
func (*ECRTokenForRegistryResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{83}
}

func (x *ECRTokenForRegistryResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ECRTokenForRegistryResponse) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type AssumeRoleCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwsAccountId string `protobuf:"bytes,1,opt,name=aws_account_id,json=awsAccountId,proto3" json:"aws_account_id,omitempty"`
	ProjectId    int64  `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *AssumeRoleCredentialsRequest) Reset() {
	*x = AssumeRoleCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssumeRoleCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssumeRoleCredentialsRequest) ProtoMessage() {}

func (x *AssumeRoleCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssumeRoleCredentialsRequest.ProtoReflect.Descriptor instead.
func (*AssumeRoleCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{84}
}

func (x *AssumeRoleCredentialsRequest) GetAwsAccountId() string {
	if x != nil {
		return x.AwsAccountId
	}
	return ""
}

func (x *AssumeRoleCredentialsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type AssumeRoleCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwsAccessId     string `protobuf:"bytes,1,opt,name=aws_access_id,json=awsAccessId,proto3" json:"aws_access_id,omitempty"`
	AwsSecretKey    string `protobuf:"bytes,2,opt,name=aws_secret_key,json=awsSecretKey,proto3" json:"aws_secret_key,omitempty"`
	AwsSessionToken string `protobuf:"bytes,3,opt,name=aws_session_token,json=awsSessionToken,proto3" json:"aws_session_token,omitempty"`
}

func (x *AssumeRoleCredentialsResponse) Reset() {
	*x = AssumeRoleCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssumeRoleCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssumeRoleCredentialsResponse) ProtoMessage() {}

func (x *AssumeRoleCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssumeRoleCredentialsResponse.ProtoReflect.Descriptor instead.
func (*AssumeRoleCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{85}
}

func (x *AssumeRoleCredentialsResponse) GetAwsAccessId() string {
	if x != nil {
		return x.AwsAccessId
	}
	return ""
}

func (x *AssumeRoleCredentialsResponse) GetAwsSecretKey() string {
	if x != nil {
		return x.AwsSecretKey
	}
	return ""
}

func (x *AssumeRoleCredentialsResponse) GetAwsSessionToken() string {
	if x != nil {
		return x.AwsSessionToken
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type DockerConfigFileForRegistryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RegistryUri string `protobuf:"bytes,2,opt,name=registry_uri,json=registryUri,proto3" json:"registry_uri,omitempty"`
}

func (x *DockerConfigFileForRegistryRequest) Reset() {
	*x = DockerConfigFileForRegistryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerConfigFileForRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerConfigFileForRegistryRequest) ProtoMessage() {}

func (x *DockerConfigFileForRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerConfigFileForRegistryRequest.ProtoReflect.Descriptor instead.
func (*DockerConfigFileForRegistryRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{86}
}

func (x *DockerConfigFileForRegistryRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DockerConfigFileForRegistryRequest) GetRegistryUri() string {
	if x != nil {
		return x.RegistryUri
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type DockerConfigFileForRegistryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DockerConfigFile []byte `protobuf:"bytes,1,opt,name=docker_config_file,json=dockerConfigFile,proto3" json:"docker_config_file,omitempty"`
}

func (x *DockerConfigFileForRegistryResponse) Reset() {
	*x = DockerConfigFileForRegistryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerConfigFileForRegistryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerConfigFileForRegistryResponse) ProtoMessage() {}

func (x *DockerConfigFileForRegistryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerConfigFileForRegistryResponse.ProtoReflect.Descriptor instead.
func (*DockerConfigFileForRegistryResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{87}
}

func (x *DockerConfigFileForRegistryResponse) GetDockerConfigFile() []byte {
	if x != nil {
		return x.DockerConfigFile
	}
	return nil
}

// ClusterNetworkSettingsRequest is the request object for fetching cloud provider network settings for a cluster
type ClusterNetworkSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *ClusterNetworkSettingsRequest) Reset() {
	*x = ClusterNetworkSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNetworkSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNetworkSettingsRequest) ProtoMessage() {}

func (x *ClusterNetworkSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNetworkSettingsRequest.ProtoReflect.Descriptor instead.
func (*ClusterNetworkSettingsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{88}
}

func (x *ClusterNetworkSettingsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ClusterNetworkSettingsRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

// ClusterNetworkSettingsResponse is the response object containing cloud provider network settings for a cluster
type ClusterNetworkSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// region is the cloud provider region in which the cluster is located
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// subnet_ids contains a string list of cloud provider subnets associated with the cluster
	SubnetIds []string `protobuf:"bytes,2,rep,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
	// cloud_provider the given cloud provider for the cluster being queried
	CloudProvider EnumCloudProvider `protobuf:"varint,3,opt,name=cloud_provider,json=cloudProvider,proto3,enum=porter.v1.EnumCloudProvider" json:"cloud_provider,omitempty"`
	// cloud_provider_network contains the relevant cluster network config for the cloud provider on which the cluster exists
	//
	// Types that are assignable to CloudProviderNetwork:
	//
	//	*ClusterNetworkSettingsResponse_EksCloudProviderNetwork
	CloudProviderNetwork isClusterNetworkSettingsResponse_CloudProviderNetwork `protobuf_oneof:"cloud_provider_network"`
}

func (x *ClusterNetworkSettingsResponse) Reset() {
	*x = ClusterNetworkSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNetworkSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNetworkSettingsResponse) ProtoMessage() {}

func (x *ClusterNetworkSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNetworkSettingsResponse.ProtoReflect.Descriptor instead.
func (*ClusterNetworkSettingsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{89}
}

func (x *ClusterNetworkSettingsResponse) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ClusterNetworkSettingsResponse) GetSubnetIds() []string {
	if x != nil {
		return x.SubnetIds
	}
	return nil
}

func (x *ClusterNetworkSettingsResponse) GetCloudProvider() EnumCloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return EnumCloudProvider_ENUM_CLOUD_PROVIDER_UNSPECIFIED
}

func (m *ClusterNetworkSettingsResponse) GetCloudProviderNetwork() isClusterNetworkSettingsResponse_CloudProviderNetwork {
	if m != nil {
		return m.CloudProviderNetwork
	}
	return nil
}

func (x *ClusterNetworkSettingsResponse) GetEksCloudProviderNetwork() *AWSVpc {
	if x, ok := x.GetCloudProviderNetwork().(*ClusterNetworkSettingsResponse_EksCloudProviderNetwork); ok {
		return x.EksCloudProviderNetwork
	}
	return nil
}

type isClusterNetworkSettingsResponse_CloudProviderNetwork interface {
	isClusterNetworkSettingsResponse_CloudProviderNetwork()
}

type ClusterNetworkSettingsResponse_EksCloudProviderNetwork struct {
	// eks_cloud_provider_network is the aws vpc for the cluster
	EksCloudProviderNetwork *AWSVpc `protobuf:"bytes,4,opt,name=eks_cloud_provider_network,json=eksCloudProviderNetwork,proto3,oneof"`
}

func (*ClusterNetworkSettingsResponse_EksCloudProviderNetwork) isClusterNetworkSettingsResponse_CloudProviderNetwork() {
}

var File_porter_v1_cluster_control_plane_proto protoreflect.FileDescriptor

var file_porter_v1_cluster_control_plane_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x77, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6b, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xbe, 0x03, 0x0a, 0x14, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x1d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x49,
	0x64, 0x12, 0x45, 0x0a, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x67, 0x6b, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x4b, 0x45, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x12, 0x67, 0x6b, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x65,
	0x6b, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4b, 0x53, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x12, 0x65, 0x6b, 0x73, 0x50,
	0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x12,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x3f, 0x0a, 0x15, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xbd, 0x03, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x1d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x1a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x49, 0x64,
	0x12, 0x55, 0x0a, 0x14, 0x67, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x4b, 0x45, 0x50, 0x72,
	0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x12, 0x67, 0x6b, 0x65, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x65, 0x6b, 0x73, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x4b, 0x53, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x12, 0x65, 0x6b, 0x73, 0x50,
	0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42,
	0x12, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x1a, 0x54, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x61, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a, 0x02, 0x18,
	0x01, 0x22, 0x21, 0x0a, 0x1b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x3a, 0x02, 0x18, 0x01, 0x22, 0xa8, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x72, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x3a, 0x02, 0x18, 0x01, 0x22,
	0x61, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x6e, 0x3a, 0x02,
	0x18, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x1b, 0x53, 0x61, 0x76, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x3a, 0x02,
	0x18, 0x01, 0x22, 0x78, 0x0a, 0x1c, 0x53, 0x61, 0x76, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x5b, 0x0a, 0x1b,
	0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x1c, 0x4b, 0x75, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x75, 0x62,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x48, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x22, 0x62, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd2,
	0x01, 0x0a, 0x15, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x15,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x60, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x22,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x55, 0x72, 0x69, 0x22, 0x60, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x7f, 0x0a, 0x1e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x72, 0x69, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x1f, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x3a, 0x02, 0x18, 0x01, 0x22, 0x55, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x0d, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5b, 0x0a, 0x17, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x55, 0x72, 0x69, 0x22, 0x64, 0x0a, 0x18, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46,
	0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x5f, 0x0a, 0x13,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x0a,
	0x14, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x96,
	0x03, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x26, 0x0a, 0x03, 0x61,
	0x70, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x03,
	0x61, 0x70, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x12, 0x3d, 0x0a, 0x19, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x62, 0x61, 0x73, 0x65, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x19, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0x80, 0x03, 0x0a,
	0x15, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12,
	0x33, 0x0a, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x65, 0x6e, 0x76,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x06, 0x61, 0x70, 0x70, 0x45, 0x6e, 0x76, 0x12, 0x2b, 0x0a, 0x12,
	0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x48, 0x61, 0x72, 0x64,
	0x45, 0x6e, 0x76, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x86, 0x01, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x43, 0x4c, 0x49, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63,
	0x6c, 0x69, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xac, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x46, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x17, 0x52, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x70, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x18, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x70, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x1a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x19, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xae, 0x02, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x44, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x1a, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xb7, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x19, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x1a, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x70, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x17, 0x50, 0x72, 0x65,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x50,
	0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x71, 0x0a, 0x1e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x52, 0x0a, 0x1e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0xd0, 0x01,
	0x0a, 0x17, 0x53, 0x65, 0x65, 0x64, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x65, 0x64, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x01, 0x0a,
	0x18, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x65, 0x6e,
	0x76, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x08, 0x65, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x34, 0x0a, 0x16,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x69, 0x0a, 0x19, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x13, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x11, 0x65, 0x6e, 0x76, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xd1, 0x01,
	0x0a, 0x22, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xa5, 0x01, 0x0a, 0x23, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x65, 0x6e, 0x76,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x08, 0x65, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4c, 0x0a, 0x13, 0x65,
	0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x11, 0x65, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xf2, 0x01, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x51,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x22, 0x87, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x73,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54,
	0x6f, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xd9, 0x01, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x48, 0x65, 0x6c, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a,
	0x15, 0x41, 0x70, 0x70, 0x48, 0x65, 0x6c, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x36, 0x34, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x17, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x22, 0x1a, 0x0a, 0x18, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x0a,
	0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x3e, 0x0a,
	0x0e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x59, 0x0a,
	0x15, 0x45, 0x4b, 0x53, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x32, 0x0a, 0x16, 0x45, 0x4b, 0x53, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x63, 0x0a, 0x1f,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x02, 0x18,
	0x01, 0x22, 0x64, 0x0a, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x42, 0x0a, 0x1d, 0x41, 0x73, 0x73, 0x75, 0x6d,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x65, 0x0a, 0x1e, 0x41,
	0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x3a, 0x02,
	0x18, 0x01, 0x22, 0x7d, 0x0a, 0x1a, 0x45, 0x43, 0x52, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x02, 0x18,
	0x01, 0x22, 0x6b, 0x0a, 0x1b, 0x45, 0x43, 0x52, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x67,
	0x0a, 0x1c, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x1d, 0x41, 0x73, 0x73, 0x75,
	0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x77, 0x73,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x77, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a,
	0x02, 0x18, 0x01, 0x22, 0x6a, 0x0a, 0x22, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x72, 0x69, 0x3a, 0x02, 0x18, 0x01, 0x22,
	0x57, 0x0a, 0x23, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x5d, 0x0a, 0x1d, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x1e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x1a, 0x65, 0x6b, 0x73, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x63, 0x48, 0x00, 0x52,
	0x17, 0x65, 0x6b, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x18, 0x0a, 0x16, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2a, 0xab, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x45, 0x50,
	0x4c, 0x4f, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x50, 0x52, 0x45, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x10, 0x03,
	0x2a, 0xf9, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x51,
	0x55, 0x4f, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x4e, 0x55, 0x4d, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41,
	0x53, 0x45, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x56, 0x50, 0x43, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45,
	0x41, 0x53, 0x45, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x56, 0x43, 0x50, 0x55, 0x10, 0x02, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x43,
	0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x45, 0x49, 0x50, 0x10, 0x03, 0x12,
	0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x49, 0x4e,
	0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x4e, 0x41, 0x54, 0x10, 0x04,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x49,
	0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x47, 0x43, 0x50, 0x10, 0x05, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x43, 0x52,
	0x45, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x06, 0x2a, 0x8a, 0x01, 0x0a,
	0x0d, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x4c, 0x49, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x4c, 0x49,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x50, 0x52,
	0x45, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x03, 0x2a, 0xb4, 0x01, 0x0a, 0x12, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x20, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x52,
	0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
	0x52, 0x45, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x32, 0xe1, 0x22, 0x0a, 0x1a, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x54, 0x0a, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x30, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x69, 0x0a, 0x13, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x50,
	0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x57, 0x0a, 0x0e, 0x50, 0x72,
	0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x20, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x27, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x88, 0x02, 0x01, 0x12, 0x6c, 0x0a, 0x14, 0x53, 0x61, 0x76, 0x65, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x26, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88,
	0x02, 0x01, 0x12, 0x69, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x54, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46,
	0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x12, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x10, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x12, 0x21, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63,
	0x0a, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5a, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x17,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6f, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5d, 0x0a, 0x10, 0x53, 0x65, 0x65, 0x64, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x65, 0x64, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x65, 0x64, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x60, 0x0a, 0x11, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7e, 0x0a, 0x1b, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x2d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54,
	0x6f, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x73,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x73, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x48,
	0x65, 0x6c, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x65, 0x6c, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x65, 0x6c, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x10, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x75, 0x6e, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a,
	0x16, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f,
	0x0a, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x81, 0x01, 0x0a, 0x1b, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12,
	0x2d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x88, 0x02, 0x01, 0x12, 0x69, 0x0a, 0x13, 0x45, 0x43, 0x52, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46,
	0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x43, 0x52, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46,
	0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x43,
	0x52, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x6f,
	0x0a, 0x15, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12,
	0x72, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x88, 0x02, 0x01, 0x12, 0x78, 0x0a, 0x18, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2a, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x5a, 0x0a,
	0x0e, 0x45, 0x4b, 0x53, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4b, 0x53, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4b,
	0x53, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x2d, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x75, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x88, 0x02, 0x01, 0x42, 0xb3, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x18, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x09,
	0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x09, 0x50, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a,
	0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_porter_v1_cluster_control_plane_proto_rawDescOnce sync.Once
	file_porter_v1_cluster_control_plane_proto_rawDescData = file_porter_v1_cluster_control_plane_proto_rawDesc
)

func file_porter_v1_cluster_control_plane_proto_rawDescGZIP() []byte {
	file_porter_v1_cluster_control_plane_proto_rawDescOnce.Do(func() {
		file_porter_v1_cluster_control_plane_proto_rawDescData = protoimpl.X.CompressGZIP(file_porter_v1_cluster_control_plane_proto_rawDescData)
	})
	return file_porter_v1_cluster_control_plane_proto_rawDescData
}

var file_porter_v1_cluster_control_plane_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_porter_v1_cluster_control_plane_proto_msgTypes = make([]protoimpl.MessageInfo, 91)
var file_porter_v1_cluster_control_plane_proto_goTypes = []interface{}{
	(EnumPredeployStatus)(0),                       // 0: porter.v1.EnumPredeployStatus
	(EnumQuotaIncrease)(0),                         // 1: porter.v1.EnumQuotaIncrease
	(EnumCLIAction)(0),                             // 2: porter.v1.EnumCLIAction
	(EnumRevisionStatus)(0),                        // 3: porter.v1.EnumRevisionStatus
	(*QuotaIncreaseRequest)(nil),                   // 4: porter.v1.QuotaIncreaseRequest
	(*QuotaIncreaseResponse)(nil),                  // 5: porter.v1.QuotaIncreaseResponse
	(*PreflightCheckRequest)(nil),                  // 6: porter.v1.PreflightCheckRequest
	(*PreflightCheckResponse)(nil),                 // 7: porter.v1.PreflightCheckResponse
	(*QuotaPreflightCheckRequest)(nil),             // 8: porter.v1.QuotaPreflightCheckRequest
	(*QuotaPreflightCheckResponse)(nil),            // 9: porter.v1.QuotaPreflightCheckResponse
	(*CreateAssumeRoleChainRequest)(nil),           // 10: porter.v1.CreateAssumeRoleChainRequest
	(*CreateAssumeRoleChainResponse)(nil),          // 11: porter.v1.CreateAssumeRoleChainResponse
	(*SaveAzureCredentialsRequest)(nil),            // 12: porter.v1.SaveAzureCredentialsRequest
	(*SaveAzureCredentialsResponse)(nil),           // 13: porter.v1.SaveAzureCredentialsResponse
	(*KubeConfigForClusterRequest)(nil),            // 14: porter.v1.KubeConfigForClusterRequest
	(*KubeConfigForClusterResponse)(nil),           // 15: porter.v1.KubeConfigForClusterResponse
	(*UpdateContractRequest)(nil),                  // 16: porter.v1.UpdateContractRequest
	(*UpdateContractResponse)(nil),                 // 17: porter.v1.UpdateContractResponse
	(*ClusterStatusRequest)(nil),                   // 18: porter.v1.ClusterStatusRequest
	(*ClusterStatusResponse)(nil),                  // 19: porter.v1.ClusterStatusResponse
	(*DeleteClusterRequest)(nil),                   // 20: porter.v1.DeleteClusterRequest
	(*DeleteClusterResponse)(nil),                  // 21: porter.v1.DeleteClusterResponse
	(*ListRepositoriesForRegistryRequest)(nil),     // 22: porter.v1.ListRepositoriesForRegistryRequest
	(*ListRepositoriesForRegistryResponse)(nil),    // 23: porter.v1.ListRepositoriesForRegistryResponse
	(*Repository)(nil),                             // 24: porter.v1.Repository
	(*ListImagesForRepositoryRequest)(nil),         // 25: porter.v1.ListImagesForRepositoryRequest
	(*ListImagesForRepositoryResponse)(nil),        // 26: porter.v1.ListImagesForRepositoryResponse
	(*Image)(nil),                                  // 27: porter.v1.Image
	(*ImageInfo)(nil),                              // 28: porter.v1.ImageInfo
	(*ImageArtifact)(nil),                          // 29: porter.v1.ImageArtifact
	(*TokenForRegistryRequest)(nil),                // 30: porter.v1.TokenForRegistryRequest
	(*TokenForRegistryResponse)(nil),               // 31: porter.v1.TokenForRegistryResponse
	(*ReadContractRequest)(nil),                    // 32: porter.v1.ReadContractRequest
	(*ReadContractResponse)(nil),                   // 33: porter.v1.ReadContractResponse
	(*ValidatePorterAppRequest)(nil),               // 34: porter.v1.ValidatePorterAppRequest
	(*ValidatePorterAppResponse)(nil),              // 35: porter.v1.ValidatePorterAppResponse
	(*ApplyPorterAppRequest)(nil),                  // 36: porter.v1.ApplyPorterAppRequest
	(*ApplyPorterAppResponse)(nil),                 // 37: porter.v1.ApplyPorterAppResponse
	(*UpdateRevisionStatusRequest)(nil),            // 38: porter.v1.UpdateRevisionStatusRequest
	(*UpdateRevisionStatusResponse)(nil),           // 39: porter.v1.UpdateRevisionStatusResponse
	(*RollbackRevisionRequest)(nil),                // 40: porter.v1.RollbackRevisionRequest
	(*RollbackRevisionResponse)(nil),               // 41: porter.v1.RollbackRevisionResponse
	(*DeletePorterAppRequest)(nil),                 // 42: porter.v1.DeletePorterAppRequest
	(*DeletePorterAppResponse)(nil),                // 43: porter.v1.DeletePorterAppResponse
	(*DeleteAppDeploymentRequest)(nil),             // 44: porter.v1.DeleteAppDeploymentRequest
	(*DeleteAppDeploymentResponse)(nil),            // 45: porter.v1.DeleteAppDeploymentResponse
	(*DeleteDeploymentTargetRequest)(nil),          // 46: porter.v1.DeleteDeploymentTargetRequest
	(*DeleteDeploymentTargetResponse)(nil),         // 47: porter.v1.DeleteDeploymentTargetResponse
	(*CurrentAppRevisionRequest)(nil),              // 48: porter.v1.CurrentAppRevisionRequest
	(*AppRevision)(nil),                            // 49: porter.v1.AppRevision
	(*AppRevisionMetadata)(nil),                    // 50: porter.v1.AppRevisionMetadata
	(*CurrentAppRevisionResponse)(nil),             // 51: porter.v1.CurrentAppRevisionResponse
	(*ListAppRevisionsRequest)(nil),                // 52: porter.v1.ListAppRevisionsRequest
	(*ListAppRevisionsResponse)(nil),               // 53: porter.v1.ListAppRevisionsResponse
	(*LatestAppRevisionsRequest)(nil),              // 54: porter.v1.LatestAppRevisionsRequest
	(*LatestAppRevisionsResponse)(nil),             // 55: porter.v1.LatestAppRevisionsResponse
	(*GetAppRevisionRequest)(nil),                  // 56: porter.v1.GetAppRevisionRequest
	(*GetAppRevisionResponse)(nil),                 // 57: porter.v1.GetAppRevisionResponse
	(*PredeployStatusRequest)(nil),                 // 58: porter.v1.PredeployStatusRequest
	(*PredeployStatusResponse)(nil),                // 59: porter.v1.PredeployStatusResponse
	(*DeploymentTargetDetailsRequest)(nil),         // 60: porter.v1.DeploymentTargetDetailsRequest
	(*DeploymentTargetDetailsResponse)(nil),        // 61: porter.v1.DeploymentTargetDetailsResponse
	(*CreateDeploymentTargetRequest)(nil),          // 62: porter.v1.CreateDeploymentTargetRequest
	(*CreateDeploymentTargetResponse)(nil),         // 63: porter.v1.CreateDeploymentTargetResponse
	(*SeedAppRevisionsRequest)(nil),                // 64: porter.v1.SeedAppRevisionsRequest
	(*SeedAppRevisionsResponse)(nil),               // 65: porter.v1.SeedAppRevisionsResponse
	(*EnvGroupVariablesRequest)(nil),               // 66: porter.v1.EnvGroupVariablesRequest
	(*EnvGroupVariablesResponse)(nil),              // 67: porter.v1.EnvGroupVariablesResponse
	(*LatestEnvGroupWithVariablesRequest)(nil),     // 68: porter.v1.LatestEnvGroupWithVariablesRequest
	(*LatestEnvGroupWithVariablesResponse)(nil),    // 69: porter.v1.LatestEnvGroupWithVariablesResponse
	(*UpdateAppImageRequest)(nil),                  // 70: porter.v1.UpdateAppImageRequest
	(*UpdateAppImageResponse)(nil),                 // 71: porter.v1.UpdateAppImageResponse
	(*UpdateAppsLinkedToEnvGroupRequest)(nil),      // 72: porter.v1.UpdateAppsLinkedToEnvGroupRequest
	(*UpdateAppsLinkedToEnvGroupResponse)(nil),     // 73: porter.v1.UpdateAppsLinkedToEnvGroupResponse
	(*AppHelmValuesRequest)(nil),                   // 74: porter.v1.AppHelmValuesRequest
	(*AppHelmValuesResponse)(nil),                  // 75: porter.v1.AppHelmValuesResponse
	(*ManualServiceRunRequest)(nil),                // 76: porter.v1.ManualServiceRunRequest
	(*ManualServiceRunResponse)(nil),               // 77: porter.v1.ManualServiceRunResponse
	(*ImagesRequest)(nil),                          // 78: porter.v1.ImagesRequest
	(*ImagesResponse)(nil),                         // 79: porter.v1.ImagesResponse
	(*EKSBearerTokenRequest)(nil),                  // 80: porter.v1.EKSBearerTokenRequest
	(*EKSBearerTokenResponse)(nil),                 // 81: porter.v1.EKSBearerTokenResponse
	(*CertificateAuthorityDataRequest)(nil),        // 82: porter.v1.CertificateAuthorityDataRequest
	(*CertificateAuthorityDataResponse)(nil),       // 83: porter.v1.CertificateAuthorityDataResponse
	(*AssumeRoleChainTargetsRequest)(nil),          // 84: porter.v1.AssumeRoleChainTargetsRequest
	(*AssumeRoleChainTargetsResponse)(nil),         // 85: porter.v1.AssumeRoleChainTargetsResponse
	(*ECRTokenForRegistryRequest)(nil),             // 86: porter.v1.ECRTokenForRegistryRequest
	(*ECRTokenForRegistryResponse)(nil),            // 87: porter.v1.ECRTokenForRegistryResponse
	(*AssumeRoleCredentialsRequest)(nil),           // 88: porter.v1.AssumeRoleCredentialsRequest
	(*AssumeRoleCredentialsResponse)(nil),          // 89: porter.v1.AssumeRoleCredentialsResponse
	(*DockerConfigFileForRegistryRequest)(nil),     // 90: porter.v1.DockerConfigFileForRegistryRequest
	(*DockerConfigFileForRegistryResponse)(nil),    // 91: porter.v1.DockerConfigFileForRegistryResponse
	(*ClusterNetworkSettingsRequest)(nil),          // 92: porter.v1.ClusterNetworkSettingsRequest
	(*ClusterNetworkSettingsResponse)(nil),         // 93: porter.v1.ClusterNetworkSettingsResponse
	nil,                                            // 94: porter.v1.PreflightCheckResponse.PreflightChecksEntry
	(EnumCloudProvider)(0),                         // 95: porter.v1.EnumCloudProvider
	(*GKEPreflightValues)(nil),                     // 96: porter.v1.GKEPreflightValues
	(*EKSPreflightValues)(nil),                     // 97: porter.v1.EKSPreflightValues
	(*Error)(nil),                                  // 98: porter.v1.Error
	(*Contract)(nil),                               // 99: porter.v1.Contract
	(*ContractRevision)(nil),                       // 100: porter.v1.ContractRevision
	(*timestamppb.Timestamp)(nil),                  // 101: google.protobuf.Timestamp
	(*PorterApp)(nil),                              // 102: porter.v1.PorterApp
	(*Deletions)(nil),                              // 103: porter.v1.Deletions
	(*EnvGroupVariables)(nil),                      // 104: porter.v1.EnvGroupVariables
	(*EnvGroup)(nil),                               // 105: porter.v1.EnvGroup
	(*AssumeRoleChainLink)(nil),                    // 106: porter.v1.AssumeRoleChainLink
	(*AWSVpc)(nil),                                 // 107: porter.v1.AWSVpc
	(*UpdateCloudProviderCredentialsRequest)(nil),  // 108: porter.v1.UpdateCloudProviderCredentialsRequest
	(*UpdateCloudProviderCredentialsResponse)(nil), // 109: porter.v1.UpdateCloudProviderCredentialsResponse
}
var file_porter_v1_cluster_control_plane_proto_depIdxs = []int32{
	95,  // 0: porter.v1.QuotaIncreaseRequest.cloud_provider:type_name -> porter.v1.EnumCloudProvider
	1,   // 1: porter.v1.QuotaIncreaseRequest.quota_increases:type_name -> porter.v1.EnumQuotaIncrease
	96,  // 2: porter.v1.QuotaIncreaseRequest.gke_preflight_values:type_name -> porter.v1.GKEPreflightValues
	97,  // 3: porter.v1.QuotaIncreaseRequest.eks_preflight_values:type_name -> porter.v1.EKSPreflightValues
	98,  // 4: porter.v1.QuotaIncreaseResponse.error:type_name -> porter.v1.Error
	95,  // 5: porter.v1.PreflightCheckRequest.cloud_provider:type_name -> porter.v1.EnumCloudProvider
	96,  // 6: porter.v1.PreflightCheckRequest.gke_preflight_values:type_name -> porter.v1.GKEPreflightValues
	97,  // 7: porter.v1.PreflightCheckRequest.eks_preflight_values:type_name -> porter.v1.EKSPreflightValues
	99,  // 8: porter.v1.PreflightCheckRequest.contract:type_name -> porter.v1.Contract
	94,  // 9: porter.v1.PreflightCheckResponse.preflight_checks:type_name -> porter.v1.PreflightCheckResponse.PreflightChecksEntry
	99,  // 10: porter.v1.UpdateContractRequest.contract:type_name -> porter.v1.Contract
	100, // 11: porter.v1.UpdateContractResponse.contract_revision:type_name -> porter.v1.ContractRevision
	100, // 12: porter.v1.DeleteClusterRequest.contract_revision:type_name -> porter.v1.ContractRevision
	24,  // 13: porter.v1.ListRepositoriesForRegistryResponse.repositories:type_name -> porter.v1.Repository
	27,  // 14: porter.v1.ListImagesForRepositoryResponse.images:type_name -> porter.v1.Image
	101, // 15: porter.v1.Image.updated_at:type_name -> google.protobuf.Timestamp
	29,  // 16: porter.v1.ImageInfo.artifacts:type_name -> porter.v1.ImageArtifact
	101, // 17: porter.v1.ImageArtifact.updated_at:type_name -> google.protobuf.Timestamp
	101, // 18: porter.v1.TokenForRegistryResponse.expiry:type_name -> google.protobuf.Timestamp
	100, // 19: porter.v1.ReadContractRequest.contract_revision:type_name -> porter.v1.ContractRevision
	102, // 20: porter.v1.ValidatePorterAppRequest.app:type_name -> porter.v1.PorterApp
	103, // 21: porter.v1.ValidatePorterAppRequest.deletions:type_name -> porter.v1.Deletions
	102, // 22: porter.v1.ValidatePorterAppRequest.app_overrides:type_name -> porter.v1.PorterApp
	102, // 23: porter.v1.ValidatePorterAppResponse.app:type_name -> porter.v1.PorterApp
	102, // 24: porter.v1.ApplyPorterAppRequest.app:type_name -> porter.v1.PorterApp
	104, // 25: porter.v1.ApplyPorterAppRequest.app_env:type_name -> porter.v1.EnvGroupVariables
	2,   // 26: porter.v1.ApplyPorterAppResponse.cli_action:type_name -> porter.v1.EnumCLIAction
	3,   // 27: porter.v1.UpdateRevisionStatusRequest.revision_status:type_name -> porter.v1.EnumRevisionStatus
	102, // 28: porter.v1.AppRevision.app:type_name -> porter.v1.PorterApp
	101, // 29: porter.v1.AppRevision.created_at:type_name -> google.protobuf.Timestamp
	101, // 30: porter.v1.AppRevision.updated_at:type_name -> google.protobuf.Timestamp
	49,  // 31: porter.v1.CurrentAppRevisionResponse.app_revision:type_name -> porter.v1.AppRevision
	49,  // 32: porter.v1.ListAppRevisionsResponse.app_revisions:type_name -> porter.v1.AppRevision
	49,  // 33: porter.v1.LatestAppRevisionsResponse.app_revisions:type_name -> porter.v1.AppRevision
	49,  // 34: porter.v1.GetAppRevisionResponse.app_revision:type_name -> porter.v1.AppRevision
	0,   // 35: porter.v1.PredeployStatusResponse.predeploy_status:type_name -> porter.v1.EnumPredeployStatus
	105, // 36: porter.v1.EnvGroupVariablesRequest.env_group:type_name -> porter.v1.EnvGroup
	104, // 37: porter.v1.EnvGroupVariablesResponse.env_group_variables:type_name -> porter.v1.EnvGroupVariables
	105, // 38: porter.v1.LatestEnvGroupWithVariablesResponse.env_group:type_name -> porter.v1.EnvGroup
	104, // 39: porter.v1.LatestEnvGroupWithVariablesResponse.env_group_variables:type_name -> porter.v1.EnvGroupVariables
	28,  // 40: porter.v1.ImagesResponse.images:type_name -> porter.v1.ImageInfo
	106, // 41: porter.v1.AssumeRoleChainTargetsResponse.chain_links:type_name -> porter.v1.AssumeRoleChainLink
	101, // 42: porter.v1.ECRTokenForRegistryResponse.expiry:type_name -> google.protobuf.Timestamp
	95,  // 43: porter.v1.ClusterNetworkSettingsResponse.cloud_provider:type_name -> porter.v1.EnumCloudProvider
	107, // 44: porter.v1.ClusterNetworkSettingsResponse.eks_cloud_provider_network:type_name -> porter.v1.AWSVpc
	98,  // 45: porter.v1.PreflightCheckResponse.PreflightChecksEntry.value:type_name -> porter.v1.Error
	4,   // 46: porter.v1.ClusterControlPlaneService.QuotaIncrease:input_type -> porter.v1.QuotaIncreaseRequest
	108, // 47: porter.v1.ClusterControlPlaneService.UpdateCloudProviderCredentials:input_type -> porter.v1.UpdateCloudProviderCredentialsRequest
	8,   // 48: porter.v1.ClusterControlPlaneService.QuotaPreflightCheck:input_type -> porter.v1.QuotaPreflightCheckRequest
	6,   // 49: porter.v1.ClusterControlPlaneService.PreflightCheck:input_type -> porter.v1.PreflightCheckRequest
	10,  // 50: porter.v1.ClusterControlPlaneService.CreateAssumeRoleChain:input_type -> porter.v1.CreateAssumeRoleChainRequest
	12,  // 51: porter.v1.ClusterControlPlaneService.SaveAzureCredentials:input_type -> porter.v1.SaveAzureCredentialsRequest
	14,  // 52: porter.v1.ClusterControlPlaneService.KubeConfigForCluster:input_type -> porter.v1.KubeConfigForClusterRequest
	16,  // 53: porter.v1.ClusterControlPlaneService.UpdateContract:input_type -> porter.v1.UpdateContractRequest
	32,  // 54: porter.v1.ClusterControlPlaneService.ReadContract:input_type -> porter.v1.ReadContractRequest
	18,  // 55: porter.v1.ClusterControlPlaneService.ClusterStatus:input_type -> porter.v1.ClusterStatusRequest
	20,  // 56: porter.v1.ClusterControlPlaneService.DeleteCluster:input_type -> porter.v1.DeleteClusterRequest
	30,  // 57: porter.v1.ClusterControlPlaneService.TokenForRegistry:input_type -> porter.v1.TokenForRegistryRequest
	34,  // 58: porter.v1.ClusterControlPlaneService.ValidatePorterApp:input_type -> porter.v1.ValidatePorterAppRequest
	36,  // 59: porter.v1.ClusterControlPlaneService.ApplyPorterApp:input_type -> porter.v1.ApplyPorterAppRequest
	40,  // 60: porter.v1.ClusterControlPlaneService.RollbackRevision:input_type -> porter.v1.RollbackRevisionRequest
	38,  // 61: porter.v1.ClusterControlPlaneService.UpdateRevisionStatus:input_type -> porter.v1.UpdateRevisionStatusRequest
	42,  // 62: porter.v1.ClusterControlPlaneService.DeletePorterApp:input_type -> porter.v1.DeletePorterAppRequest
	44,  // 63: porter.v1.ClusterControlPlaneService.DeleteAppDeployment:input_type -> porter.v1.DeleteAppDeploymentRequest
	46,  // 64: porter.v1.ClusterControlPlaneService.DeleteDeploymentTarget:input_type -> porter.v1.DeleteDeploymentTargetRequest
	48,  // 65: porter.v1.ClusterControlPlaneService.CurrentAppRevision:input_type -> porter.v1.CurrentAppRevisionRequest
	52,  // 66: porter.v1.ClusterControlPlaneService.ListAppRevisions:input_type -> porter.v1.ListAppRevisionsRequest
	54,  // 67: porter.v1.ClusterControlPlaneService.LatestAppRevisions:input_type -> porter.v1.LatestAppRevisionsRequest
	56,  // 68: porter.v1.ClusterControlPlaneService.GetAppRevision:input_type -> porter.v1.GetAppRevisionRequest
	58,  // 69: porter.v1.ClusterControlPlaneService.PredeployStatus:input_type -> porter.v1.PredeployStatusRequest
	60,  // 70: porter.v1.ClusterControlPlaneService.DeploymentTargetDetails:input_type -> porter.v1.DeploymentTargetDetailsRequest
	62,  // 71: porter.v1.ClusterControlPlaneService.CreateDeploymentTarget:input_type -> porter.v1.CreateDeploymentTargetRequest
	64,  // 72: porter.v1.ClusterControlPlaneService.SeedAppRevisions:input_type -> porter.v1.SeedAppRevisionsRequest
	66,  // 73: porter.v1.ClusterControlPlaneService.EnvGroupVariables:input_type -> porter.v1.EnvGroupVariablesRequest
	68,  // 74: porter.v1.ClusterControlPlaneService.LatestEnvGroupWithVariables:input_type -> porter.v1.LatestEnvGroupWithVariablesRequest
	70,  // 75: porter.v1.ClusterControlPlaneService.UpdateAppImage:input_type -> porter.v1.UpdateAppImageRequest
	72,  // 76: porter.v1.ClusterControlPlaneService.UpdateAppsLinkedToEnvGroup:input_type -> porter.v1.UpdateAppsLinkedToEnvGroupRequest
	74,  // 77: porter.v1.ClusterControlPlaneService.AppHelmValues:input_type -> porter.v1.AppHelmValuesRequest
	76,  // 78: porter.v1.ClusterControlPlaneService.ManualServiceRun:input_type -> porter.v1.ManualServiceRunRequest
	92,  // 79: porter.v1.ClusterControlPlaneService.ClusterNetworkSettings:input_type -> porter.v1.ClusterNetworkSettingsRequest
	78,  // 80: porter.v1.ClusterControlPlaneService.Images:input_type -> porter.v1.ImagesRequest
	90,  // 81: porter.v1.ClusterControlPlaneService.DockerConfigFileForRegistry:input_type -> porter.v1.DockerConfigFileForRegistryRequest
	86,  // 82: porter.v1.ClusterControlPlaneService.ECRTokenForRegistry:input_type -> porter.v1.ECRTokenForRegistryRequest
	88,  // 83: porter.v1.ClusterControlPlaneService.AssumeRoleCredentials:input_type -> porter.v1.AssumeRoleCredentialsRequest
	84,  // 84: porter.v1.ClusterControlPlaneService.AssumeRoleChainTargets:input_type -> porter.v1.AssumeRoleChainTargetsRequest
	82,  // 85: porter.v1.ClusterControlPlaneService.CertificateAuthorityData:input_type -> porter.v1.CertificateAuthorityDataRequest
	80,  // 86: porter.v1.ClusterControlPlaneService.EKSBearerToken:input_type -> porter.v1.EKSBearerTokenRequest
	22,  // 87: porter.v1.ClusterControlPlaneService.ListRepositoriesForRegistry:input_type -> porter.v1.ListRepositoriesForRegistryRequest
	25,  // 88: porter.v1.ClusterControlPlaneService.ListImagesForRepository:input_type -> porter.v1.ListImagesForRepositoryRequest
	5,   // 89: porter.v1.ClusterControlPlaneService.QuotaIncrease:output_type -> porter.v1.QuotaIncreaseResponse
	109, // 90: porter.v1.ClusterControlPlaneService.UpdateCloudProviderCredentials:output_type -> porter.v1.UpdateCloudProviderCredentialsResponse
	9,   // 91: porter.v1.ClusterControlPlaneService.QuotaPreflightCheck:output_type -> porter.v1.QuotaPreflightCheckResponse
	7,   // 92: porter.v1.ClusterControlPlaneService.PreflightCheck:output_type -> porter.v1.PreflightCheckResponse
	11,  // 93: porter.v1.ClusterControlPlaneService.CreateAssumeRoleChain:output_type -> porter.v1.CreateAssumeRoleChainResponse
	13,  // 94: porter.v1.ClusterControlPlaneService.SaveAzureCredentials:output_type -> porter.v1.SaveAzureCredentialsResponse
	15,  // 95: porter.v1.ClusterControlPlaneService.KubeConfigForCluster:output_type -> porter.v1.KubeConfigForClusterResponse
	17,  // 96: porter.v1.ClusterControlPlaneService.UpdateContract:output_type -> porter.v1.UpdateContractResponse
	33,  // 97: porter.v1.ClusterControlPlaneService.ReadContract:output_type -> porter.v1.ReadContractResponse
	19,  // 98: porter.v1.ClusterControlPlaneService.ClusterStatus:output_type -> porter.v1.ClusterStatusResponse
	21,  // 99: porter.v1.ClusterControlPlaneService.DeleteCluster:output_type -> porter.v1.DeleteClusterResponse
	31,  // 100: porter.v1.ClusterControlPlaneService.TokenForRegistry:output_type -> porter.v1.TokenForRegistryResponse
	35,  // 101: porter.v1.ClusterControlPlaneService.ValidatePorterApp:output_type -> porter.v1.ValidatePorterAppResponse
	37,  // 102: porter.v1.ClusterControlPlaneService.ApplyPorterApp:output_type -> porter.v1.ApplyPorterAppResponse
	41,  // 103: porter.v1.ClusterControlPlaneService.RollbackRevision:output_type -> porter.v1.RollbackRevisionResponse
	39,  // 104: porter.v1.ClusterControlPlaneService.UpdateRevisionStatus:output_type -> porter.v1.UpdateRevisionStatusResponse
	43,  // 105: porter.v1.ClusterControlPlaneService.DeletePorterApp:output_type -> porter.v1.DeletePorterAppResponse
	45,  // 106: porter.v1.ClusterControlPlaneService.DeleteAppDeployment:output_type -> porter.v1.DeleteAppDeploymentResponse
	47,  // 107: porter.v1.ClusterControlPlaneService.DeleteDeploymentTarget:output_type -> porter.v1.DeleteDeploymentTargetResponse
	51,  // 108: porter.v1.ClusterControlPlaneService.CurrentAppRevision:output_type -> porter.v1.CurrentAppRevisionResponse
	53,  // 109: porter.v1.ClusterControlPlaneService.ListAppRevisions:output_type -> porter.v1.ListAppRevisionsResponse
	55,  // 110: porter.v1.ClusterControlPlaneService.LatestAppRevisions:output_type -> porter.v1.LatestAppRevisionsResponse
	57,  // 111: porter.v1.ClusterControlPlaneService.GetAppRevision:output_type -> porter.v1.GetAppRevisionResponse
	59,  // 112: porter.v1.ClusterControlPlaneService.PredeployStatus:output_type -> porter.v1.PredeployStatusResponse
	61,  // 113: porter.v1.ClusterControlPlaneService.DeploymentTargetDetails:output_type -> porter.v1.DeploymentTargetDetailsResponse
	63,  // 114: porter.v1.ClusterControlPlaneService.CreateDeploymentTarget:output_type -> porter.v1.CreateDeploymentTargetResponse
	65,  // 115: porter.v1.ClusterControlPlaneService.SeedAppRevisions:output_type -> porter.v1.SeedAppRevisionsResponse
	67,  // 116: porter.v1.ClusterControlPlaneService.EnvGroupVariables:output_type -> porter.v1.EnvGroupVariablesResponse
	69,  // 117: porter.v1.ClusterControlPlaneService.LatestEnvGroupWithVariables:output_type -> porter.v1.LatestEnvGroupWithVariablesResponse
	71,  // 118: porter.v1.ClusterControlPlaneService.UpdateAppImage:output_type -> porter.v1.UpdateAppImageResponse
	73,  // 119: porter.v1.ClusterControlPlaneService.UpdateAppsLinkedToEnvGroup:output_type -> porter.v1.UpdateAppsLinkedToEnvGroupResponse
	75,  // 120: porter.v1.ClusterControlPlaneService.AppHelmValues:output_type -> porter.v1.AppHelmValuesResponse
	77,  // 121: porter.v1.ClusterControlPlaneService.ManualServiceRun:output_type -> porter.v1.ManualServiceRunResponse
	93,  // 122: porter.v1.ClusterControlPlaneService.ClusterNetworkSettings:output_type -> porter.v1.ClusterNetworkSettingsResponse
	79,  // 123: porter.v1.ClusterControlPlaneService.Images:output_type -> porter.v1.ImagesResponse
	91,  // 124: porter.v1.ClusterControlPlaneService.DockerConfigFileForRegistry:output_type -> porter.v1.DockerConfigFileForRegistryResponse
	87,  // 125: porter.v1.ClusterControlPlaneService.ECRTokenForRegistry:output_type -> porter.v1.ECRTokenForRegistryResponse
	89,  // 126: porter.v1.ClusterControlPlaneService.AssumeRoleCredentials:output_type -> porter.v1.AssumeRoleCredentialsResponse
	85,  // 127: porter.v1.ClusterControlPlaneService.AssumeRoleChainTargets:output_type -> porter.v1.AssumeRoleChainTargetsResponse
	83,  // 128: porter.v1.ClusterControlPlaneService.CertificateAuthorityData:output_type -> porter.v1.CertificateAuthorityDataResponse
	81,  // 129: porter.v1.ClusterControlPlaneService.EKSBearerToken:output_type -> porter.v1.EKSBearerTokenResponse
	23,  // 130: porter.v1.ClusterControlPlaneService.ListRepositoriesForRegistry:output_type -> porter.v1.ListRepositoriesForRegistryResponse
	26,  // 131: porter.v1.ClusterControlPlaneService.ListImagesForRepository:output_type -> porter.v1.ListImagesForRepositoryResponse
	89,  // [89:132] is the sub-list for method output_type
	46,  // [46:89] is the sub-list for method input_type
	46,  // [46:46] is the sub-list for extension type_name
	46,  // [46:46] is the sub-list for extension extendee
	0,   // [0:46] is the sub-list for field type_name
}

func init() { file_porter_v1_cluster_control_plane_proto_init() }
func file_porter_v1_cluster_control_plane_proto_init() {
	if File_porter_v1_cluster_control_plane_proto != nil {
		return
	}
	file_porter_v1_aws_assume_role_proto_init()
	file_porter_v1_cloud_provider_credentials_proto_init()
	file_porter_v1_cluster_proto_init()
	file_porter_v1_contract_proto_init()
	file_porter_v1_eks_proto_init()
	file_porter_v1_errors_proto_init()
	file_porter_v1_gke_proto_init()
	file_porter_v1_porter_app_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_porter_v1_cluster_control_plane_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaIncreaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaIncreaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreflightCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreflightCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaPreflightCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaPreflightCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAssumeRoleChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAssumeRoleChainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveAzureCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveAzureCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeConfigForClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeConfigForClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepositoriesForRegistryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepositoriesForRegistryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImagesForRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImagesForRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenForRegistryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenForRegistryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatePorterAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatePorterAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyPorterAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyPorterAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRevisionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRevisionStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackRevisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePorterAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePorterAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeploymentTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeploymentTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentAppRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppRevision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppRevisionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentAppRevisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAppRevisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAppRevisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestAppRevisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestAppRevisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppRevisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredeployStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredeployStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentTargetDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentTargetDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeploymentTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeploymentTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedAppRevisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedAppRevisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvGroupVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvGroupVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestEnvGroupWithVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestEnvGroupWithVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppsLinkedToEnvGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppsLinkedToEnvGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppHelmValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppHelmValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualServiceRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualServiceRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EKSBearerTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EKSBearerTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateAuthorityDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateAuthorityDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssumeRoleChainTargetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssumeRoleChainTargetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECRTokenForRegistryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECRTokenForRegistryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssumeRoleCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssumeRoleCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerConfigFileForRegistryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerConfigFileForRegistryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNetworkSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNetworkSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_porter_v1_cluster_control_plane_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*QuotaIncreaseRequest_GkePreflightValues)(nil),
		(*QuotaIncreaseRequest_EksPreflightValues)(nil),
	}
	file_porter_v1_cluster_control_plane_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*PreflightCheckRequest_GkePreflightValues)(nil),
		(*PreflightCheckRequest_EksPreflightValues)(nil),
	}
	file_porter_v1_cluster_control_plane_proto_msgTypes[72].OneofWrappers = []interface{}{}
	file_porter_v1_cluster_control_plane_proto_msgTypes[89].OneofWrappers = []interface{}{
		(*ClusterNetworkSettingsResponse_EksCloudProviderNetwork)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_porter_v1_cluster_control_plane_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   91,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_porter_v1_cluster_control_plane_proto_goTypes,
		DependencyIndexes: file_porter_v1_cluster_control_plane_proto_depIdxs,
		EnumInfos:         file_porter_v1_cluster_control_plane_proto_enumTypes,
		MessageInfos:      file_porter_v1_cluster_control_plane_proto_msgTypes,
	}.Build()
	File_porter_v1_cluster_control_plane_proto = out.File
	file_porter_v1_cluster_control_plane_proto_rawDesc = nil
	file_porter_v1_cluster_control_plane_proto_goTypes = nil
	file_porter_v1_cluster_control_plane_proto_depIdxs = nil
}
