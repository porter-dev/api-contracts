// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: porter/v1/cluster_control_plane.proto

package porterv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EnumUpdateTrigger describes the action that triggered a porter app revision update
type EnumUpdateTrigger int32

const (
	EnumUpdateTrigger_ENUM_UPDATE_TRIGGER_UNSPECIFIED EnumUpdateTrigger = 0
	// ENUM_UPDATE_TRIGGER_ROLLBACK signifies the update was triggered by a rollback
	EnumUpdateTrigger_ENUM_UPDATE_TRIGGER_ROLLBACK EnumUpdateTrigger = 1
)

// Enum value maps for EnumUpdateTrigger.
var (
	EnumUpdateTrigger_name = map[int32]string{
		0: "ENUM_UPDATE_TRIGGER_UNSPECIFIED",
		1: "ENUM_UPDATE_TRIGGER_ROLLBACK",
	}
	EnumUpdateTrigger_value = map[string]int32{
		"ENUM_UPDATE_TRIGGER_UNSPECIFIED": 0,
		"ENUM_UPDATE_TRIGGER_ROLLBACK":    1,
	}
)

func (x EnumUpdateTrigger) Enum() *EnumUpdateTrigger {
	p := new(EnumUpdateTrigger)
	*p = x
	return p
}

func (x EnumUpdateTrigger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumUpdateTrigger) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_cluster_control_plane_proto_enumTypes[0].Descriptor()
}

func (EnumUpdateTrigger) Type() protoreflect.EnumType {
	return &file_porter_v1_cluster_control_plane_proto_enumTypes[0]
}

func (x EnumUpdateTrigger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumUpdateTrigger.Descriptor instead.
func (EnumUpdateTrigger) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{0}
}

type EnumPredeployStatus int32

const (
	EnumPredeployStatus_ENUM_PREDEPLOY_STATUS_UNSPECIFIED EnumPredeployStatus = 0
	// ENUM_PREDEPLOY_STATUS_IN_PROGRESS signifies the predeploy is still in progress.
	EnumPredeployStatus_ENUM_PREDEPLOY_STATUS_IN_PROGRESS EnumPredeployStatus = 1
	// ENUM_PREDEPLOY_STATUS_FAILED signifies the predeploy job failed.
	EnumPredeployStatus_ENUM_PREDEPLOY_STATUS_FAILED EnumPredeployStatus = 2
	// ENUM_PREDEPLOY_STATUS_SUCCESSFUL signifies the predeploy job was successful.
	EnumPredeployStatus_ENUM_PREDEPLOY_STATUS_SUCCESSFUL EnumPredeployStatus = 3
)

// Enum value maps for EnumPredeployStatus.
var (
	EnumPredeployStatus_name = map[int32]string{
		0: "ENUM_PREDEPLOY_STATUS_UNSPECIFIED",
		1: "ENUM_PREDEPLOY_STATUS_IN_PROGRESS",
		2: "ENUM_PREDEPLOY_STATUS_FAILED",
		3: "ENUM_PREDEPLOY_STATUS_SUCCESSFUL",
	}
	EnumPredeployStatus_value = map[string]int32{
		"ENUM_PREDEPLOY_STATUS_UNSPECIFIED": 0,
		"ENUM_PREDEPLOY_STATUS_IN_PROGRESS": 1,
		"ENUM_PREDEPLOY_STATUS_FAILED":      2,
		"ENUM_PREDEPLOY_STATUS_SUCCESSFUL":  3,
	}
)

func (x EnumPredeployStatus) Enum() *EnumPredeployStatus {
	p := new(EnumPredeployStatus)
	*p = x
	return p
}

func (x EnumPredeployStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumPredeployStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_cluster_control_plane_proto_enumTypes[1].Descriptor()
}

func (EnumPredeployStatus) Type() protoreflect.EnumType {
	return &file_porter_v1_cluster_control_plane_proto_enumTypes[1]
}

func (x EnumPredeployStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumPredeployStatus.Descriptor instead.
func (EnumPredeployStatus) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{1}
}

type EnumQuotaIncrease int32

const (
	EnumQuotaIncrease_ENUM_QUOTA_INCREASE_UNSPECIFIED EnumQuotaIncrease = 0
	// ENUM_QUOTA_INCREASE_AWS_VPC signifies the quota increase is for AWS VPC
	EnumQuotaIncrease_ENUM_QUOTA_INCREASE_AWS_VPC EnumQuotaIncrease = 1
	// ENUM_QUOTA_INCREASE_AWS_VCPU signifies the quota increase is for AWS VCPU
	EnumQuotaIncrease_ENUM_QUOTA_INCREASE_AWS_VCPU EnumQuotaIncrease = 2
	// ENUM_QUOTA_INCREASE_AWS_EIP signifies the quota increase is for AWS EIP
	EnumQuotaIncrease_ENUM_QUOTA_INCREASE_AWS_EIP EnumQuotaIncrease = 3
	// ENUM_QUOTA_INCREASE_AWS_NAT signifies the quota increase is for AWS NAT
	EnumQuotaIncrease_ENUM_QUOTA_INCREASE_AWS_NAT EnumQuotaIncrease = 4
	// ENUM_QUOTA_INCREASE_GCP signifies the quota increase is for GCP
	EnumQuotaIncrease_ENUM_QUOTA_INCREASE_GCP EnumQuotaIncrease = 5
	// ENUM_QUOTA_INCREASE_AZURE signifies the quota increase is for Azure
	EnumQuotaIncrease_ENUM_QUOTA_INCREASE_AZURE EnumQuotaIncrease = 6
)

// Enum value maps for EnumQuotaIncrease.
var (
	EnumQuotaIncrease_name = map[int32]string{
		0: "ENUM_QUOTA_INCREASE_UNSPECIFIED",
		1: "ENUM_QUOTA_INCREASE_AWS_VPC",
		2: "ENUM_QUOTA_INCREASE_AWS_VCPU",
		3: "ENUM_QUOTA_INCREASE_AWS_EIP",
		4: "ENUM_QUOTA_INCREASE_AWS_NAT",
		5: "ENUM_QUOTA_INCREASE_GCP",
		6: "ENUM_QUOTA_INCREASE_AZURE",
	}
	EnumQuotaIncrease_value = map[string]int32{
		"ENUM_QUOTA_INCREASE_UNSPECIFIED": 0,
		"ENUM_QUOTA_INCREASE_AWS_VPC":     1,
		"ENUM_QUOTA_INCREASE_AWS_VCPU":    2,
		"ENUM_QUOTA_INCREASE_AWS_EIP":     3,
		"ENUM_QUOTA_INCREASE_AWS_NAT":     4,
		"ENUM_QUOTA_INCREASE_GCP":         5,
		"ENUM_QUOTA_INCREASE_AZURE":       6,
	}
)

func (x EnumQuotaIncrease) Enum() *EnumQuotaIncrease {
	p := new(EnumQuotaIncrease)
	*p = x
	return p
}

func (x EnumQuotaIncrease) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumQuotaIncrease) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_cluster_control_plane_proto_enumTypes[2].Descriptor()
}

func (EnumQuotaIncrease) Type() protoreflect.EnumType {
	return &file_porter_v1_cluster_control_plane_proto_enumTypes[2]
}

func (x EnumQuotaIncrease) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumQuotaIncrease.Descriptor instead.
func (EnumQuotaIncrease) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{2}
}

type EnumCLIAction int32

const (
	EnumCLIAction_ENUM_CLI_ACTION_UNSPECIFIED EnumCLIAction = 0
	// ENUM_CLI_ACTION_NONE signals the CLI to do nothing after applying the PorterApp.
	EnumCLIAction_ENUM_CLI_ACTION_NONE EnumCLIAction = 1
	// ENUM_CLI_ACTION_BUILD signals the CLI to build the image and call ApplyPorterApp again after a successful build.
	EnumCLIAction_ENUM_CLI_ACTION_BUILD EnumCLIAction = 2
	// ENUM_CLI_ACTION_TRACK_PREDEPLOY signals the CLI to track the progress of the predeploy job and call ApplyPorterApp again after a successful run.
	EnumCLIAction_ENUM_CLI_ACTION_TRACK_PREDEPLOY EnumCLIAction = 3
)

// Enum value maps for EnumCLIAction.
var (
	EnumCLIAction_name = map[int32]string{
		0: "ENUM_CLI_ACTION_UNSPECIFIED",
		1: "ENUM_CLI_ACTION_NONE",
		2: "ENUM_CLI_ACTION_BUILD",
		3: "ENUM_CLI_ACTION_TRACK_PREDEPLOY",
	}
	EnumCLIAction_value = map[string]int32{
		"ENUM_CLI_ACTION_UNSPECIFIED":     0,
		"ENUM_CLI_ACTION_NONE":            1,
		"ENUM_CLI_ACTION_BUILD":           2,
		"ENUM_CLI_ACTION_TRACK_PREDEPLOY": 3,
	}
)

func (x EnumCLIAction) Enum() *EnumCLIAction {
	p := new(EnumCLIAction)
	*p = x
	return p
}

func (x EnumCLIAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumCLIAction) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_cluster_control_plane_proto_enumTypes[3].Descriptor()
}

func (EnumCLIAction) Type() protoreflect.EnumType {
	return &file_porter_v1_cluster_control_plane_proto_enumTypes[3]
}

func (x EnumCLIAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumCLIAction.Descriptor instead.
func (EnumCLIAction) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{3}
}

type EnumRevisionStatus int32

const (
	EnumRevisionStatus_ENUM_REVISION_STATUS_UNSPECIFIED EnumRevisionStatus = 0
	// ENUM_REVISION_STATUS_PREDEPLOY signifies the predeploy job failed.
	EnumRevisionStatus_ENUM_REVISION_STATUS_PREDEPLOY_FAILED EnumRevisionStatus = 1
	// ENUM_REVISION_STATUS_DEPLOY_FAILED signifies the deploy job failed.
	EnumRevisionStatus_ENUM_REVISION_STATUS_DEPLOY_FAILED EnumRevisionStatus = 2
	// ENUM_REVISION_STATUS_BUILD_FAILED signifies the build failed.
	EnumRevisionStatus_ENUM_REVISION_STATUS_BUILD_FAILED EnumRevisionStatus = 3
	// ENUM_REVISION_STATUS_BUILD_SUCCESSFUL signifies the build was successful.
	EnumRevisionStatus_ENUM_REVISION_STATUS_BUILD_SUCCESSFUL EnumRevisionStatus = 4
)

// Enum value maps for EnumRevisionStatus.
var (
	EnumRevisionStatus_name = map[int32]string{
		0: "ENUM_REVISION_STATUS_UNSPECIFIED",
		1: "ENUM_REVISION_STATUS_PREDEPLOY_FAILED",
		2: "ENUM_REVISION_STATUS_DEPLOY_FAILED",
		3: "ENUM_REVISION_STATUS_BUILD_FAILED",
		4: "ENUM_REVISION_STATUS_BUILD_SUCCESSFUL",
	}
	EnumRevisionStatus_value = map[string]int32{
		"ENUM_REVISION_STATUS_UNSPECIFIED":      0,
		"ENUM_REVISION_STATUS_PREDEPLOY_FAILED": 1,
		"ENUM_REVISION_STATUS_DEPLOY_FAILED":    2,
		"ENUM_REVISION_STATUS_BUILD_FAILED":     3,
		"ENUM_REVISION_STATUS_BUILD_SUCCESSFUL": 4,
	}
)

func (x EnumRevisionStatus) Enum() *EnumRevisionStatus {
	p := new(EnumRevisionStatus)
	*p = x
	return p
}

func (x EnumRevisionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumRevisionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_cluster_control_plane_proto_enumTypes[4].Descriptor()
}

func (EnumRevisionStatus) Type() protoreflect.EnumType {
	return &file_porter_v1_cluster_control_plane_proto_enumTypes[4]
}

func (x EnumRevisionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumRevisionStatus.Descriptor instead.
func (EnumRevisionStatus) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{4}
}

type EnumServiceDeploymentStatus int32

const (
	EnumServiceDeploymentStatus_ENUM_SERVICE_DEPLOYMENT_STATUS_UNSPECIFIED EnumServiceDeploymentStatus = 0
	EnumServiceDeploymentStatus_ENUM_SERVICE_DEPLOYMENT_STATUS_PROGRESSING EnumServiceDeploymentStatus = 1
	EnumServiceDeploymentStatus_ENUM_SERVICE_DEPLOYMENT_STATUS_SUCCESS     EnumServiceDeploymentStatus = 2
	EnumServiceDeploymentStatus_ENUM_SERVICE_DEPLOYMENT_STATUS_FAILED      EnumServiceDeploymentStatus = 3
)

// Enum value maps for EnumServiceDeploymentStatus.
var (
	EnumServiceDeploymentStatus_name = map[int32]string{
		0: "ENUM_SERVICE_DEPLOYMENT_STATUS_UNSPECIFIED",
		1: "ENUM_SERVICE_DEPLOYMENT_STATUS_PROGRESSING",
		2: "ENUM_SERVICE_DEPLOYMENT_STATUS_SUCCESS",
		3: "ENUM_SERVICE_DEPLOYMENT_STATUS_FAILED",
	}
	EnumServiceDeploymentStatus_value = map[string]int32{
		"ENUM_SERVICE_DEPLOYMENT_STATUS_UNSPECIFIED": 0,
		"ENUM_SERVICE_DEPLOYMENT_STATUS_PROGRESSING": 1,
		"ENUM_SERVICE_DEPLOYMENT_STATUS_SUCCESS":     2,
		"ENUM_SERVICE_DEPLOYMENT_STATUS_FAILED":      3,
	}
)

func (x EnumServiceDeploymentStatus) Enum() *EnumServiceDeploymentStatus {
	p := new(EnumServiceDeploymentStatus)
	*p = x
	return p
}

func (x EnumServiceDeploymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumServiceDeploymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_cluster_control_plane_proto_enumTypes[5].Descriptor()
}

func (EnumServiceDeploymentStatus) Type() protoreflect.EnumType {
	return &file_porter_v1_cluster_control_plane_proto_enumTypes[5]
}

func (x EnumServiceDeploymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumServiceDeploymentStatus.Descriptor instead.
func (EnumServiceDeploymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{5}
}

type EnumPatchCloudContractOperation int32

const (
	EnumPatchCloudContractOperation_ENUM_PATCH_CLOUD_CONTRACT_OPERATION_UNSPECIFIED EnumPatchCloudContractOperation = 0
	EnumPatchCloudContractOperation_ENUM_PATCH_CLOUD_CONTRACT_OPERATION_UPDATE      EnumPatchCloudContractOperation = 1
	EnumPatchCloudContractOperation_ENUM_PATCH_CLOUD_CONTRACT_OPERATION_DELETE      EnumPatchCloudContractOperation = 2
)

// Enum value maps for EnumPatchCloudContractOperation.
var (
	EnumPatchCloudContractOperation_name = map[int32]string{
		0: "ENUM_PATCH_CLOUD_CONTRACT_OPERATION_UNSPECIFIED",
		1: "ENUM_PATCH_CLOUD_CONTRACT_OPERATION_UPDATE",
		2: "ENUM_PATCH_CLOUD_CONTRACT_OPERATION_DELETE",
	}
	EnumPatchCloudContractOperation_value = map[string]int32{
		"ENUM_PATCH_CLOUD_CONTRACT_OPERATION_UNSPECIFIED": 0,
		"ENUM_PATCH_CLOUD_CONTRACT_OPERATION_UPDATE":      1,
		"ENUM_PATCH_CLOUD_CONTRACT_OPERATION_DELETE":      2,
	}
)

func (x EnumPatchCloudContractOperation) Enum() *EnumPatchCloudContractOperation {
	p := new(EnumPatchCloudContractOperation)
	*p = x
	return p
}

func (x EnumPatchCloudContractOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumPatchCloudContractOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_cluster_control_plane_proto_enumTypes[6].Descriptor()
}

func (EnumPatchCloudContractOperation) Type() protoreflect.EnumType {
	return &file_porter_v1_cluster_control_plane_proto_enumTypes[6]
}

func (x EnumPatchCloudContractOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumPatchCloudContractOperation.Descriptor instead.
func (EnumPatchCloudContractOperation) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{6}
}

type EnumPatchCloudContractType int32

const (
	EnumPatchCloudContractType_ENUM_PATCH_CLOUD_CONTRACT_TYPE_UNSPECIFIED EnumPatchCloudContractType = 0
	EnumPatchCloudContractType_ENUM_PATCH_CLOUD_CONTRACT_TYPE_DATASTORE   EnumPatchCloudContractType = 1
)

// Enum value maps for EnumPatchCloudContractType.
var (
	EnumPatchCloudContractType_name = map[int32]string{
		0: "ENUM_PATCH_CLOUD_CONTRACT_TYPE_UNSPECIFIED",
		1: "ENUM_PATCH_CLOUD_CONTRACT_TYPE_DATASTORE",
	}
	EnumPatchCloudContractType_value = map[string]int32{
		"ENUM_PATCH_CLOUD_CONTRACT_TYPE_UNSPECIFIED": 0,
		"ENUM_PATCH_CLOUD_CONTRACT_TYPE_DATASTORE":   1,
	}
)

func (x EnumPatchCloudContractType) Enum() *EnumPatchCloudContractType {
	p := new(EnumPatchCloudContractType)
	*p = x
	return p
}

func (x EnumPatchCloudContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumPatchCloudContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_cluster_control_plane_proto_enumTypes[7].Descriptor()
}

func (EnumPatchCloudContractType) Type() protoreflect.EnumType {
	return &file_porter_v1_cluster_control_plane_proto_enumTypes[7]
}

func (x EnumPatchCloudContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumPatchCloudContractType.Descriptor instead.
func (EnumPatchCloudContractType) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{7}
}

// EnumDatastore represents the datastore type
type EnumDatastore int32

const (
	// ENUM_DATASTORE_UNSPECIFIED is an enum representing an unknown datastore
	// and is used as a sentinel value when interacting with datastore types
	EnumDatastore_ENUM_DATASTORE_UNSPECIFIED EnumDatastore = 0
	// ENUM_DATASTORE_RDS_POSTGRESQL is an enum representing an rds postgresql instance
	EnumDatastore_ENUM_DATASTORE_RDS_POSTGRESQL EnumDatastore = 1
	// ENUM_DATASTORE_RDS_AURORA_POSTGRESQL is an enum representing an rds postgresql aurora cluster
	EnumDatastore_ENUM_DATASTORE_RDS_AURORA_POSTGRESQL EnumDatastore = 2
	// ENUM_DATASTORE_ELASTICACHE_REDIS is an enum representing an elasticache redis replication group
	EnumDatastore_ENUM_DATASTORE_ELASTICACHE_REDIS EnumDatastore = 3
	// ENUM_DATASTORE_ELASTICACHE_MEMCACHED is an enum representing an elasticache memcached replication group
	EnumDatastore_ENUM_DATASTORE_ELASTICACHE_MEMCACHED EnumDatastore = 4
	// ENUM_DATASTORE_RDS_MYSQL is an enum representing an rds mysql instance
	EnumDatastore_ENUM_DATASTORE_RDS_MYSQL EnumDatastore = 5
)

// Enum value maps for EnumDatastore.
var (
	EnumDatastore_name = map[int32]string{
		0: "ENUM_DATASTORE_UNSPECIFIED",
		1: "ENUM_DATASTORE_RDS_POSTGRESQL",
		2: "ENUM_DATASTORE_RDS_AURORA_POSTGRESQL",
		3: "ENUM_DATASTORE_ELASTICACHE_REDIS",
		4: "ENUM_DATASTORE_ELASTICACHE_MEMCACHED",
		5: "ENUM_DATASTORE_RDS_MYSQL",
	}
	EnumDatastore_value = map[string]int32{
		"ENUM_DATASTORE_UNSPECIFIED":           0,
		"ENUM_DATASTORE_RDS_POSTGRESQL":        1,
		"ENUM_DATASTORE_RDS_AURORA_POSTGRESQL": 2,
		"ENUM_DATASTORE_ELASTICACHE_REDIS":     3,
		"ENUM_DATASTORE_ELASTICACHE_MEMCACHED": 4,
		"ENUM_DATASTORE_RDS_MYSQL":             5,
	}
)

func (x EnumDatastore) Enum() *EnumDatastore {
	p := new(EnumDatastore)
	*p = x
	return p
}

func (x EnumDatastore) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumDatastore) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_cluster_control_plane_proto_enumTypes[8].Descriptor()
}

func (EnumDatastore) Type() protoreflect.EnumType {
	return &file_porter_v1_cluster_control_plane_proto_enumTypes[8]
}

func (x EnumDatastore) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumDatastore.Descriptor instead.
func (EnumDatastore) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{8}
}

type MachineTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId                  int64             `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CloudProvider              EnumCloudProvider `protobuf:"varint,2,opt,name=cloud_provider,json=cloudProvider,proto3,enum=porter.v1.EnumCloudProvider" json:"cloud_provider,omitempty"`
	CloudProviderCredentialsId string            `protobuf:"bytes,3,opt,name=cloud_provider_credentials_id,json=cloudProviderCredentialsId,proto3" json:"cloud_provider_credentials_id,omitempty"`
	Region                     string            `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *MachineTypesRequest) Reset() {
	*x = MachineTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineTypesRequest) ProtoMessage() {}

func (x *MachineTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineTypesRequest.ProtoReflect.Descriptor instead.
func (*MachineTypesRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{0}
}

func (x *MachineTypesRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *MachineTypesRequest) GetCloudProvider() EnumCloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return EnumCloudProvider_ENUM_CLOUD_PROVIDER_UNSPECIFIED
}

func (x *MachineTypesRequest) GetCloudProviderCredentialsId() string {
	if x != nil {
		return x.CloudProviderCredentialsId
	}
	return ""
}

func (x *MachineTypesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type MachineTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineTypes []*MachineType `protobuf:"bytes,1,rep,name=machine_types,json=machineTypes,proto3" json:"machine_types,omitempty"`
	// unsupported_machine_types is a list of machine types that are not supported by Porter, but are available to the user.
	// This field is included to ease debugging.
	UnsupportedMachineTypes []*MachineType `protobuf:"bytes,2,rep,name=unsupported_machine_types,json=unsupportedMachineTypes,proto3" json:"unsupported_machine_types,omitempty"`
}

func (x *MachineTypesResponse) Reset() {
	*x = MachineTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineTypesResponse) ProtoMessage() {}

func (x *MachineTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineTypesResponse.ProtoReflect.Descriptor instead.
func (*MachineTypesResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{1}
}

func (x *MachineTypesResponse) GetMachineTypes() []*MachineType {
	if x != nil {
		return x.MachineTypes
	}
	return nil
}

func (x *MachineTypesResponse) GetUnsupportedMachineTypes() []*MachineType {
	if x != nil {
		return x.UnsupportedMachineTypes
	}
	return nil
}

type QuotaIncreaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cloud_provider the given cloud provider will use to make quota increases
	CloudProvider EnumCloudProvider `protobuf:"varint,2,opt,name=cloud_provider,json=cloudProvider,proto3,enum=porter.v1.EnumCloudProvider" json:"cloud_provider,omitempty"`
	// cloud_provider_credentials_id [REQUIRED] is the Porter credentials that will be used for provisioning a cluster.
	// These must be stored within Porter, prior to cluster creation. For AWS this refers to the last link in an assume role chain
	CloudProviderCredentialsId string `protobuf:"bytes,3,opt,name=cloud_provider_credentials_id,json=cloudProviderCredentialsId,proto3" json:"cloud_provider_credentials_id,omitempty"`
	// quota_increases list of quota increases to be requsted
	QuotaIncreases []EnumQuotaIncrease `protobuf:"varint,4,rep,packed,name=quota_increases,json=quotaIncreases,proto3,enum=porter.v1.EnumQuotaIncrease" json:"quota_increases,omitempty"`
	// Types that are assignable to PreflightValues:
	//
	//	*QuotaIncreaseRequest_GkePreflightValues
	//	*QuotaIncreaseRequest_EksPreflightValues
	PreflightValues isQuotaIncreaseRequest_PreflightValues `protobuf_oneof:"preflight_values"`
}

func (x *QuotaIncreaseRequest) Reset() {
	*x = QuotaIncreaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaIncreaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaIncreaseRequest) ProtoMessage() {}

func (x *QuotaIncreaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaIncreaseRequest.ProtoReflect.Descriptor instead.
func (*QuotaIncreaseRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{2}
}

func (x *QuotaIncreaseRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *QuotaIncreaseRequest) GetCloudProvider() EnumCloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return EnumCloudProvider_ENUM_CLOUD_PROVIDER_UNSPECIFIED
}

func (x *QuotaIncreaseRequest) GetCloudProviderCredentialsId() string {
	if x != nil {
		return x.CloudProviderCredentialsId
	}
	return ""
}

func (x *QuotaIncreaseRequest) GetQuotaIncreases() []EnumQuotaIncrease {
	if x != nil {
		return x.QuotaIncreases
	}
	return nil
}

func (m *QuotaIncreaseRequest) GetPreflightValues() isQuotaIncreaseRequest_PreflightValues {
	if m != nil {
		return m.PreflightValues
	}
	return nil
}

func (x *QuotaIncreaseRequest) GetGkePreflightValues() *GKEPreflightValues {
	if x, ok := x.GetPreflightValues().(*QuotaIncreaseRequest_GkePreflightValues); ok {
		return x.GkePreflightValues
	}
	return nil
}

func (x *QuotaIncreaseRequest) GetEksPreflightValues() *EKSPreflightValues {
	if x, ok := x.GetPreflightValues().(*QuotaIncreaseRequest_EksPreflightValues); ok {
		return x.EksPreflightValues
	}
	return nil
}

type isQuotaIncreaseRequest_PreflightValues interface {
	isQuotaIncreaseRequest_PreflightValues()
}

type QuotaIncreaseRequest_GkePreflightValues struct {
	// gke_preflight_values the values that GKE will use to perform quota increases
	GkePreflightValues *GKEPreflightValues `protobuf:"bytes,5,opt,name=gke_preflight_values,json=gkePreflightValues,proto3,oneof"`
}

type QuotaIncreaseRequest_EksPreflightValues struct {
	// eks_preflight_values the values that AWS will use to perform quota increases
	EksPreflightValues *EKSPreflightValues `protobuf:"bytes,6,opt,name=eks_preflight_values,json=eksPreflightValues,proto3,oneof"` //AKS aks_kind = 6;
}

func (*QuotaIncreaseRequest_GkePreflightValues) isQuotaIncreaseRequest_PreflightValues() {}

func (*QuotaIncreaseRequest_EksPreflightValues) isQuotaIncreaseRequest_PreflightValues() {}

type QuotaIncreaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// error if any of quota increases failed
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *QuotaIncreaseResponse) Reset() {
	*x = QuotaIncreaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaIncreaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaIncreaseResponse) ProtoMessage() {}

func (x *QuotaIncreaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaIncreaseResponse.ProtoReflect.Descriptor instead.
func (*QuotaIncreaseResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{3}
}

func (x *QuotaIncreaseResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Deprecated: use CloudContractPreflightCheckRequest instead
//
// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type PreflightCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: use contract instead
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cloud_provider [REQUIRED] represents the provider that we will provisioning the cluster in
	// Deprecated: use contract instead
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	CloudProvider EnumCloudProvider `protobuf:"varint,2,opt,name=cloud_provider,json=cloudProvider,proto3,enum=porter.v1.EnumCloudProvider" json:"cloud_provider,omitempty"`
	// cloud_provider_credentials_id [REQUIRED] is the Porter credentials that will be used for provisioning a cluster.
	// These must be stored within Porter, prior to cluster creation. For AWS this refers to the last link in an assume role chain
	// Deprecated: use contract instead
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	CloudProviderCredentialsId string `protobuf:"bytes,3,opt,name=cloud_provider_credentials_id,json=cloudProviderCredentialsId,proto3" json:"cloud_provider_credentials_id,omitempty"`
	// Types that are assignable to PreflightValues:
	//
	//	*PreflightCheckRequest_GkePreflightValues
	//	*PreflightCheckRequest_EksPreflightValues
	PreflightValues isPreflightCheckRequest_PreflightValues `protobuf_oneof:"preflight_values"`
	Contract        *Contract                               `protobuf:"bytes,6,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *PreflightCheckRequest) Reset() {
	*x = PreflightCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreflightCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreflightCheckRequest) ProtoMessage() {}

func (x *PreflightCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreflightCheckRequest.ProtoReflect.Descriptor instead.
func (*PreflightCheckRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{4}
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *PreflightCheckRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *PreflightCheckRequest) GetCloudProvider() EnumCloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return EnumCloudProvider_ENUM_CLOUD_PROVIDER_UNSPECIFIED
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *PreflightCheckRequest) GetCloudProviderCredentialsId() string {
	if x != nil {
		return x.CloudProviderCredentialsId
	}
	return ""
}

func (m *PreflightCheckRequest) GetPreflightValues() isPreflightCheckRequest_PreflightValues {
	if m != nil {
		return m.PreflightValues
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *PreflightCheckRequest) GetGkePreflightValues() *GKEPreflightValues {
	if x, ok := x.GetPreflightValues().(*PreflightCheckRequest_GkePreflightValues); ok {
		return x.GkePreflightValues
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *PreflightCheckRequest) GetEksPreflightValues() *EKSPreflightValues {
	if x, ok := x.GetPreflightValues().(*PreflightCheckRequest_EksPreflightValues); ok {
		return x.EksPreflightValues
	}
	return nil
}

func (x *PreflightCheckRequest) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

type isPreflightCheckRequest_PreflightValues interface {
	isPreflightCheckRequest_PreflightValues()
}

type PreflightCheckRequest_GkePreflightValues struct {
	// gke_preflight_values the values that GKE will use to perform preflight checks
	// Deprecated: use contract instead
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	GkePreflightValues *GKEPreflightValues `protobuf:"bytes,4,opt,name=gke_preflight_values,json=gkePreflightValues,proto3,oneof"`
}

type PreflightCheckRequest_EksPreflightValues struct {
	// eks_preflight_values the values that AWS will use to perform preflight checks
	// Deprecated: use contract instead
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	EksPreflightValues *EKSPreflightValues `protobuf:"bytes,5,opt,name=eks_preflight_values,json=eksPreflightValues,proto3,oneof"`
}

func (*PreflightCheckRequest_GkePreflightValues) isPreflightCheckRequest_PreflightValues() {}

func (*PreflightCheckRequest_EksPreflightValues) isPreflightCheckRequest_PreflightValues() {}

// Deprecated: use CloudContractPreflightCheckResponse instead
//
// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type PreflightCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// preflight_checks keys are name of preflight check and error will be if the preflight checks fails, nil if it passes
	PreflightChecks map[string]*Error `protobuf:"bytes,1,rep,name=preflight_checks,json=preflightChecks,proto3" json:"preflight_checks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PreflightCheckResponse) Reset() {
	*x = PreflightCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreflightCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreflightCheckResponse) ProtoMessage() {}

func (x *PreflightCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreflightCheckResponse.ProtoReflect.Descriptor instead.
func (*PreflightCheckResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{5}
}

func (x *PreflightCheckResponse) GetPreflightChecks() map[string]*Error {
	if x != nil {
		return x.PreflightChecks
	}
	return nil
}

// CloudContractPreflightCheckRequest is the request object for running preflight checks on a cloud contract
type CloudContractPreflightCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contract is the contract to run preflight checks on
	Contract *Contract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *CloudContractPreflightCheckRequest) Reset() {
	*x = CloudContractPreflightCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudContractPreflightCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudContractPreflightCheckRequest) ProtoMessage() {}

func (x *CloudContractPreflightCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudContractPreflightCheckRequest.ProtoReflect.Descriptor instead.
func (*CloudContractPreflightCheckRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{6}
}

func (x *CloudContractPreflightCheckRequest) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

// CloudContractPreflightCheckResponse is the response object for running preflight checks on a cloud contract
type CloudContractPreflightCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// preflight_checks is a list the failing preflight checks for the contract
	FailingPreflightChecks []*CloudContractPreflightCheck `protobuf:"bytes,1,rep,name=failing_preflight_checks,json=failingPreflightChecks,proto3" json:"failing_preflight_checks,omitempty"`
}

func (x *CloudContractPreflightCheckResponse) Reset() {
	*x = CloudContractPreflightCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudContractPreflightCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudContractPreflightCheckResponse) ProtoMessage() {}

func (x *CloudContractPreflightCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudContractPreflightCheckResponse.ProtoReflect.Descriptor instead.
func (*CloudContractPreflightCheckResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{7}
}

func (x *CloudContractPreflightCheckResponse) GetFailingPreflightChecks() []*CloudContractPreflightCheck {
	if x != nil {
		return x.FailingPreflightChecks
	}
	return nil
}

// CloudContractPreflightCheck represents a failing preflight check for a cloud contract
type CloudContractPreflightCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is the type of the preflight check
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// message is a message accompanying the check
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// metadata is a map of unstructured metadata about the preflight check failure
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CloudContractPreflightCheck) Reset() {
	*x = CloudContractPreflightCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudContractPreflightCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudContractPreflightCheck) ProtoMessage() {}

func (x *CloudContractPreflightCheck) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudContractPreflightCheck.ProtoReflect.Descriptor instead.
func (*CloudContractPreflightCheck) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{8}
}

func (x *CloudContractPreflightCheck) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CloudContractPreflightCheck) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CloudContractPreflightCheck) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type QuotaPreflightCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TargetArn  string `protobuf:"bytes,2,opt,name=target_arn,json=targetArn,proto3" json:"target_arn,omitempty"`
	ExternalId string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Region     string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *QuotaPreflightCheckRequest) Reset() {
	*x = QuotaPreflightCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaPreflightCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaPreflightCheckRequest) ProtoMessage() {}

func (x *QuotaPreflightCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaPreflightCheckRequest.ProtoReflect.Descriptor instead.
func (*QuotaPreflightCheckRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{9}
}

func (x *QuotaPreflightCheckRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *QuotaPreflightCheckRequest) GetTargetArn() string {
	if x != nil {
		return x.TargetArn
	}
	return ""
}

func (x *QuotaPreflightCheckRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *QuotaPreflightCheckRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type QuotaPreflightCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuotaPreflightCheckResponse) Reset() {
	*x = QuotaPreflightCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaPreflightCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaPreflightCheckResponse) ProtoMessage() {}

func (x *QuotaPreflightCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaPreflightCheckResponse.ProtoReflect.Descriptor instead.
func (*QuotaPreflightCheckResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type CreateAssumeRoleChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId          int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	SourceArn          string `protobuf:"bytes,2,opt,name=source_arn,json=sourceArn,proto3" json:"source_arn,omitempty"`
	TargetAccessId     string `protobuf:"bytes,3,opt,name=target_access_id,json=targetAccessId,proto3" json:"target_access_id,omitempty"`
	TargetSecretKey    string `protobuf:"bytes,4,opt,name=target_secret_key,json=targetSecretKey,proto3" json:"target_secret_key,omitempty"`
	TargetSessionToken string `protobuf:"bytes,5,opt,name=target_session_token,json=targetSessionToken,proto3" json:"target_session_token,omitempty"`
	TargetArn          string `protobuf:"bytes,6,opt,name=target_arn,json=targetArn,proto3" json:"target_arn,omitempty"`
	ExternalId         string `protobuf:"bytes,7,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (x *CreateAssumeRoleChainRequest) Reset() {
	*x = CreateAssumeRoleChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssumeRoleChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssumeRoleChainRequest) ProtoMessage() {}

func (x *CreateAssumeRoleChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssumeRoleChainRequest.ProtoReflect.Descriptor instead.
func (*CreateAssumeRoleChainRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{11}
}

func (x *CreateAssumeRoleChainRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateAssumeRoleChainRequest) GetSourceArn() string {
	if x != nil {
		return x.SourceArn
	}
	return ""
}

func (x *CreateAssumeRoleChainRequest) GetTargetAccessId() string {
	if x != nil {
		return x.TargetAccessId
	}
	return ""
}

func (x *CreateAssumeRoleChainRequest) GetTargetSecretKey() string {
	if x != nil {
		return x.TargetSecretKey
	}
	return ""
}

func (x *CreateAssumeRoleChainRequest) GetTargetSessionToken() string {
	if x != nil {
		return x.TargetSessionToken
	}
	return ""
}

func (x *CreateAssumeRoleChainRequest) GetTargetArn() string {
	if x != nil {
		return x.TargetArn
	}
	return ""
}

func (x *CreateAssumeRoleChainRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type CreateAssumeRoleChainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TargetArn string `protobuf:"bytes,2,opt,name=target_arn,json=targetArn,proto3" json:"target_arn,omitempty"`
}

func (x *CreateAssumeRoleChainResponse) Reset() {
	*x = CreateAssumeRoleChainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssumeRoleChainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssumeRoleChainResponse) ProtoMessage() {}

func (x *CreateAssumeRoleChainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssumeRoleChainResponse.ProtoReflect.Descriptor instead.
func (*CreateAssumeRoleChainResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{12}
}

func (x *CreateAssumeRoleChainResponse) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateAssumeRoleChainResponse) GetTargetArn() string {
	if x != nil {
		return x.TargetArn
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type SaveAzureCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId              int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClientId               string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	SubscriptionId         string `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	TenantId               string `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	ServicePrincipalSecret []byte `protobuf:"bytes,5,opt,name=service_principal_secret,json=servicePrincipalSecret,proto3" json:"service_principal_secret,omitempty"`
}

func (x *SaveAzureCredentialsRequest) Reset() {
	*x = SaveAzureCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveAzureCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAzureCredentialsRequest) ProtoMessage() {}

func (x *SaveAzureCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAzureCredentialsRequest.ProtoReflect.Descriptor instead.
func (*SaveAzureCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{13}
}

func (x *SaveAzureCredentialsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SaveAzureCredentialsRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SaveAzureCredentialsRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *SaveAzureCredentialsRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *SaveAzureCredentialsRequest) GetServicePrincipalSecret() []byte {
	if x != nil {
		return x.ServicePrincipalSecret
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type SaveAzureCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId             int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CredentialsIdentifier string `protobuf:"bytes,2,opt,name=credentials_identifier,json=credentialsIdentifier,proto3" json:"credentials_identifier,omitempty"`
}

func (x *SaveAzureCredentialsResponse) Reset() {
	*x = SaveAzureCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveAzureCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAzureCredentialsResponse) ProtoMessage() {}

func (x *SaveAzureCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAzureCredentialsResponse.ProtoReflect.Descriptor instead.
func (*SaveAzureCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{14}
}

func (x *SaveAzureCredentialsResponse) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SaveAzureCredentialsResponse) GetCredentialsIdentifier() string {
	if x != nil {
		return x.CredentialsIdentifier
	}
	return ""
}

type KubeConfigForClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *KubeConfigForClusterRequest) Reset() {
	*x = KubeConfigForClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeConfigForClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeConfigForClusterRequest) ProtoMessage() {}

func (x *KubeConfigForClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeConfigForClusterRequest.ProtoReflect.Descriptor instead.
func (*KubeConfigForClusterRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{15}
}

func (x *KubeConfigForClusterRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *KubeConfigForClusterRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type KubeConfigForClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KubeConfig string `protobuf:"bytes,1,opt,name=kube_config,json=kubeConfig,proto3" json:"kube_config,omitempty"`
}

func (x *KubeConfigForClusterResponse) Reset() {
	*x = KubeConfigForClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeConfigForClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeConfigForClusterResponse) ProtoMessage() {}

func (x *KubeConfigForClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeConfigForClusterResponse.ProtoReflect.Descriptor instead.
func (*KubeConfigForClusterResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{16}
}

func (x *KubeConfigForClusterResponse) GetKubeConfig() string {
	if x != nil {
		return x.KubeConfig
	}
	return ""
}

type UpdateContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract *Contract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *UpdateContractRequest) Reset() {
	*x = UpdateContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContractRequest) ProtoMessage() {}

func (x *UpdateContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContractRequest.ProtoReflect.Descriptor instead.
func (*UpdateContractRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateContractRequest) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

type UpdateContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractRevision *ContractRevision `protobuf:"bytes,1,opt,name=contract_revision,json=contractRevision,proto3" json:"contract_revision,omitempty"`
}

func (x *UpdateContractResponse) Reset() {
	*x = UpdateContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContractResponse) ProtoMessage() {}

func (x *UpdateContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContractResponse.ProtoReflect.Descriptor instead.
func (*UpdateContractResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateContractResponse) GetContractRevision() *ContractRevision {
	if x != nil {
		return x.ContractRevision
	}
	return nil
}

type ClusterStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *ClusterStatusRequest) Reset() {
	*x = ClusterStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatusRequest) ProtoMessage() {}

func (x *ClusterStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatusRequest.ProtoReflect.Descriptor instead.
func (*ClusterStatusRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{19}
}

func (x *ClusterStatusRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ClusterStatusRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type ClusterStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId            int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId            int64  `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Phase                string `protobuf:"bytes,3,opt,name=phase,proto3" json:"phase,omitempty"`
	InfrastructureStatus bool   `protobuf:"varint,4,opt,name=infrastructure_status,json=infrastructureStatus,proto3" json:"infrastructure_status,omitempty"`
	ControlPlaneStatus   bool   `protobuf:"varint,5,opt,name=control_plane_status,json=controlPlaneStatus,proto3" json:"control_plane_status,omitempty"`
}

func (x *ClusterStatusResponse) Reset() {
	*x = ClusterStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStatusResponse) ProtoMessage() {}

func (x *ClusterStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStatusResponse.ProtoReflect.Descriptor instead.
func (*ClusterStatusResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{20}
}

func (x *ClusterStatusResponse) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ClusterStatusResponse) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ClusterStatusResponse) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *ClusterStatusResponse) GetInfrastructureStatus() bool {
	if x != nil {
		return x.InfrastructureStatus
	}
	return false
}

func (x *ClusterStatusResponse) GetControlPlaneStatus() bool {
	if x != nil {
		return x.ControlPlaneStatus
	}
	return false
}

type DeleteClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractRevision *ContractRevision `protobuf:"bytes,1,opt,name=contract_revision,json=contractRevision,proto3" json:"contract_revision,omitempty"`
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteClusterRequest) GetContractRevision() *ContractRevision {
	if x != nil {
		return x.ContractRevision
	}
	return nil
}

type DeleteClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *DeleteClusterResponse) Reset() {
	*x = DeleteClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterResponse) ProtoMessage() {}

func (x *DeleteClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteClusterResponse) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteClusterResponse) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type ListRepositoriesForRegistryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RegistryUri string `protobuf:"bytes,2,opt,name=registry_uri,json=registryUri,proto3" json:"registry_uri,omitempty"`
}

func (x *ListRepositoriesForRegistryRequest) Reset() {
	*x = ListRepositoriesForRegistryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepositoriesForRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoriesForRegistryRequest) ProtoMessage() {}

func (x *ListRepositoriesForRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoriesForRegistryRequest.ProtoReflect.Descriptor instead.
func (*ListRepositoriesForRegistryRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{23}
}

func (x *ListRepositoriesForRegistryRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListRepositoriesForRegistryRequest) GetRegistryUri() string {
	if x != nil {
		return x.RegistryUri
	}
	return ""
}

type ListRepositoriesForRegistryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repositories []*Repository `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
}

func (x *ListRepositoriesForRegistryResponse) Reset() {
	*x = ListRepositoriesForRegistryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepositoriesForRegistryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoriesForRegistryResponse) ProtoMessage() {}

func (x *ListRepositoriesForRegistryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoriesForRegistryResponse.ProtoReflect.Descriptor instead.
func (*ListRepositoriesForRegistryResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{24}
}

func (x *ListRepositoriesForRegistryResponse) GetRepositories() []*Repository {
	if x != nil {
		return x.Repositories
	}
	return nil
}

type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uri  string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *Repository) Reset() {
	*x = Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{25}
}

func (x *Repository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Repository) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type ListImagesForRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RegistryUri string `protobuf:"bytes,2,opt,name=registry_uri,json=registryUri,proto3" json:"registry_uri,omitempty"`
	RepoName    string `protobuf:"bytes,3,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
}

func (x *ListImagesForRepositoryRequest) Reset() {
	*x = ListImagesForRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImagesForRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImagesForRepositoryRequest) ProtoMessage() {}

func (x *ListImagesForRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImagesForRepositoryRequest.ProtoReflect.Descriptor instead.
func (*ListImagesForRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{26}
}

func (x *ListImagesForRepositoryRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListImagesForRepositoryRequest) GetRegistryUri() string {
	if x != nil {
		return x.RegistryUri
	}
	return ""
}

func (x *ListImagesForRepositoryRequest) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

type ListImagesForRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images []*Image `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *ListImagesForRepositoryResponse) Reset() {
	*x = ListImagesForRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImagesForRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImagesForRepositoryResponse) ProtoMessage() {}

func (x *ListImagesForRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImagesForRepositoryResponse.ProtoReflect.Descriptor instead.
func (*ListImagesForRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{27}
}

func (x *ListImagesForRepositoryResponse) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryName string                 `protobuf:"bytes,1,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
	Tag            string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Digest         string                 `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{28}
}

func (x *Image) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *Image) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Image) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *Image) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// ImageInfo describes everything related to a cloud-agnostic Docker image
type ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uri the uri of an image. A valid image pull will use this uri suffixed by a tag
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// artifacts refers to the instances of an image in an image repository, each sharing the same uri
	Artifacts []*ImageArtifact `protobuf:"bytes,2,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
}

func (x *ImageInfo) Reset() {
	*x = ImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfo) ProtoMessage() {}

func (x *ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfo.ProtoReflect.Descriptor instead.
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{29}
}

func (x *ImageInfo) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *ImageInfo) GetArtifacts() []*ImageArtifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

type ImageArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tag is the tag associated with the artifact
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// updated_at is the time at which the artifact was created or updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ImageArtifact) Reset() {
	*x = ImageArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageArtifact) ProtoMessage() {}

func (x *ImageArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageArtifact.ProtoReflect.Descriptor instead.
func (*ImageArtifact) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{30}
}

func (x *ImageArtifact) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ImageArtifact) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type TokenForRegistryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RegistryUri string `protobuf:"bytes,2,opt,name=registry_uri,json=registryUri,proto3" json:"registry_uri,omitempty"`
	// app_name is optional and is used to scope the token name to a specific app
	AppName string `protobuf:"bytes,3,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *TokenForRegistryRequest) Reset() {
	*x = TokenForRegistryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenForRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenForRegistryRequest) ProtoMessage() {}

func (x *TokenForRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenForRegistryRequest.ProtoReflect.Descriptor instead.
func (*TokenForRegistryRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{31}
}

func (x *TokenForRegistryRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *TokenForRegistryRequest) GetRegistryUri() string {
	if x != nil {
		return x.RegistryUri
	}
	return ""
}

func (x *TokenForRegistryRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

type TokenForRegistryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Expiry *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *TokenForRegistryResponse) Reset() {
	*x = TokenForRegistryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenForRegistryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenForRegistryResponse) ProtoMessage() {}

func (x *TokenForRegistryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenForRegistryResponse.ProtoReflect.Descriptor instead.
func (*TokenForRegistryResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{32}
}

func (x *TokenForRegistryResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TokenForRegistryResponse) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

type ReadContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractRevision *ContractRevision `protobuf:"bytes,1,opt,name=contract_revision,json=contractRevision,proto3" json:"contract_revision,omitempty"`
}

func (x *ReadContractRequest) Reset() {
	*x = ReadContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadContractRequest) ProtoMessage() {}

func (x *ReadContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadContractRequest.ProtoReflect.Descriptor instead.
func (*ReadContractRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{33}
}

func (x *ReadContractRequest) GetContractRevision() *ContractRevision {
	if x != nil {
		return x.ContractRevision
	}
	return nil
}

type ReadContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base64Contract string `protobuf:"bytes,1,opt,name=base64_contract,json=base64Contract,proto3" json:"base64_contract,omitempty"`
}

func (x *ReadContractResponse) Reset() {
	*x = ReadContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadContractResponse) ProtoMessage() {}

func (x *ReadContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadContractResponse.ProtoReflect.Descriptor instead.
func (*ReadContractResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{34}
}

func (x *ReadContractResponse) GetBase64Contract() string {
	if x != nil {
		return x.Base64Contract
	}
	return ""
}

type ContractComplianceChecksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// vendor is the name of the vendor to run compliance checks for. Optional, if not provider no vendor checks will be run
	Vendor EnumComplianceVendor `protobuf:"varint,3,opt,name=vendor,proto3,enum=porter.v1.EnumComplianceVendor" json:"vendor,omitempty"`
	// profile is the name of the profile to run compliance checks for
	Profile EnumComplianceProfile `protobuf:"varint,4,opt,name=profile,proto3,enum=porter.v1.EnumComplianceProfile" json:"profile,omitempty"`
}

func (x *ContractComplianceChecksRequest) Reset() {
	*x = ContractComplianceChecksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractComplianceChecksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractComplianceChecksRequest) ProtoMessage() {}

func (x *ContractComplianceChecksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractComplianceChecksRequest.ProtoReflect.Descriptor instead.
func (*ContractComplianceChecksRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{35}
}

func (x *ContractComplianceChecksRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ContractComplianceChecksRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ContractComplianceChecksRequest) GetVendor() EnumComplianceVendor {
	if x != nil {
		return x.Vendor
	}
	return EnumComplianceVendor_ENUM_COMPLIANCE_VENDOR_UNSPECIFIED
}

func (x *ContractComplianceChecksRequest) GetProfile() EnumComplianceProfile {
	if x != nil {
		return x.Profile
	}
	return EnumComplianceProfile_ENUM_COMPLIANCE_PROFILE_UNSPECIFIED
}

type ContractComplianceChecksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// check_groups are the list of porter internal check groups that have been run against the contract
	CheckGroups []*ContractComplianceCheckGroup `protobuf:"bytes,1,rep,name=check_groups,json=checkGroups,proto3" json:"check_groups,omitempty"`
	// vendor_check are the results of any vendor specific checks, derived based on the status of the internal checks
	VendorChecks []*VendorComplianceCheck `protobuf:"bytes,2,rep,name=vendor_checks,json=vendorChecks,proto3" json:"vendor_checks,omitempty"`
}

func (x *ContractComplianceChecksResponse) Reset() {
	*x = ContractComplianceChecksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractComplianceChecksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractComplianceChecksResponse) ProtoMessage() {}

func (x *ContractComplianceChecksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractComplianceChecksResponse.ProtoReflect.Descriptor instead.
func (*ContractComplianceChecksResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{36}
}

func (x *ContractComplianceChecksResponse) GetCheckGroups() []*ContractComplianceCheckGroup {
	if x != nil {
		return x.CheckGroups
	}
	return nil
}

func (x *ContractComplianceChecksResponse) GetVendorChecks() []*VendorComplianceCheck {
	if x != nil {
		return x.VendorChecks
	}
	return nil
}

type ValidatePorterAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app will be installed. Deprecated: use deployment_target_identifier.
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DeploymentTargetId string `protobuf:"bytes,2,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// commit_sha is the current commit sha to be built and applied
	CommitSha string `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	// app is the definition of the PorterApp to be applied
	App *PorterApp `protobuf:"bytes,4,opt,name=app,proto3" json:"app,omitempty"`
	// deletions is an object containing the names of fields to be deleted from the app
	Deletions *Deletions `protobuf:"bytes,5,opt,name=deletions,proto3" json:"deletions,omitempty"`
	// app_overrides contains environment specific overrides if they exist, applied depending on the deployment target
	AppOverrides *PorterApp `protobuf:"bytes,6,opt,name=app_overrides,json=appOverrides,proto3" json:"app_overrides,omitempty"`
	// base_deployment_target_id is used to find a revision of the app in the base deployment target, which hydrates the preview app template
	// deprecated: use the base deployment target directly on the template instead
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	BaseDeploymentTargetId string `protobuf:"bytes,7,opt,name=base_deployment_target_id,json=baseDeploymentTargetId,proto3" json:"base_deployment_target_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target where the app will be installed
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,8,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
}

func (x *ValidatePorterAppRequest) Reset() {
	*x = ValidatePorterAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatePorterAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatePorterAppRequest) ProtoMessage() {}

func (x *ValidatePorterAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatePorterAppRequest.ProtoReflect.Descriptor instead.
func (*ValidatePorterAppRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{37}
}

func (x *ValidatePorterAppRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *ValidatePorterAppRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *ValidatePorterAppRequest) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *ValidatePorterAppRequest) GetApp() *PorterApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *ValidatePorterAppRequest) GetDeletions() *Deletions {
	if x != nil {
		return x.Deletions
	}
	return nil
}

func (x *ValidatePorterAppRequest) GetAppOverrides() *PorterApp {
	if x != nil {
		return x.AppOverrides
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *ValidatePorterAppRequest) GetBaseDeploymentTargetId() string {
	if x != nil {
		return x.BaseDeploymentTargetId
	}
	return ""
}

func (x *ValidatePorterAppRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

type ValidatePorterAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App *PorterApp `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *ValidatePorterAppResponse) Reset() {
	*x = ValidatePorterAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatePorterAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatePorterAppResponse) ProtoMessage() {}

func (x *ValidatePorterAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatePorterAppResponse.ProtoReflect.Descriptor instead.
func (*ValidatePorterAppResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{38}
}

func (x *ValidatePorterAppResponse) GetApp() *PorterApp {
	if x != nil {
		return x.App
	}
	return nil
}

type ApplyPorterAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app will be installed. Deprecated: use deployment_target_identifier.
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DeploymentTargetId string `protobuf:"bytes,2,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// app is the definition of the PorterApp to be applied
	App *PorterApp `protobuf:"bytes,3,opt,name=app,proto3" json:"app,omitempty"`
	// porter_app_revision_id is the id of the PorterAppRevision to be applied.  This is used by the CLI to provide updates to an existing app revision. If provided, app must be empty.
	PorterAppRevisionId string `protobuf:"bytes,4,opt,name=porter_app_revision_id,json=porterAppRevisionId,proto3" json:"porter_app_revision_id,omitempty"`
	// force_build is a flag that forces the app to rebuild, regardless of the existing tag. This is used on initial apply by the CLI.
	ForceBuild bool `protobuf:"varint,5,opt,name=force_build,json=forceBuild,proto3" json:"force_build,omitempty"`
	// app_env is the current set of environment variables for the upcoming app revision
	AppEnv *EnvGroupVariables `protobuf:"bytes,6,opt,name=app_env,json=appEnv,proto3" json:"app_env,omitempty"`
	// is_hard_env_update is a flag that indicates whether the app environment should be fully overwritten, or if the new app env variables should be merged with the existing
	IsHardEnvUpdate bool `protobuf:"varint,7,opt,name=is_hard_env_update,json=isHardEnvUpdate,proto3" json:"is_hard_env_update,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target where the app will be installed
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,8,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
}

func (x *ApplyPorterAppRequest) Reset() {
	*x = ApplyPorterAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyPorterAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyPorterAppRequest) ProtoMessage() {}

func (x *ApplyPorterAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyPorterAppRequest.ProtoReflect.Descriptor instead.
func (*ApplyPorterAppRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{39}
}

func (x *ApplyPorterAppRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *ApplyPorterAppRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *ApplyPorterAppRequest) GetApp() *PorterApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *ApplyPorterAppRequest) GetPorterAppRevisionId() string {
	if x != nil {
		return x.PorterAppRevisionId
	}
	return ""
}

func (x *ApplyPorterAppRequest) GetForceBuild() bool {
	if x != nil {
		return x.ForceBuild
	}
	return false
}

func (x *ApplyPorterAppRequest) GetAppEnv() *EnvGroupVariables {
	if x != nil {
		return x.AppEnv
	}
	return nil
}

func (x *ApplyPorterAppRequest) GetIsHardEnvUpdate() bool {
	if x != nil {
		return x.IsHardEnvUpdate
	}
	return false
}

func (x *ApplyPorterAppRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

type ApplyPorterAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PorterAppRevisionId string `protobuf:"bytes,1,opt,name=porter_app_revision_id,json=porterAppRevisionId,proto3" json:"porter_app_revision_id,omitempty"`
	// cli_action is the action that the CLI should take after applying the PorterApp (at the time of writing, either build the image or track whether a predeploy job has completed)
	CliAction EnumCLIAction `protobuf:"varint,2,opt,name=cli_action,json=cliAction,proto3,enum=porter.v1.EnumCLIAction" json:"cli_action,omitempty"`
}

func (x *ApplyPorterAppResponse) Reset() {
	*x = ApplyPorterAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyPorterAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyPorterAppResponse) ProtoMessage() {}

func (x *ApplyPorterAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyPorterAppResponse.ProtoReflect.Descriptor instead.
func (*ApplyPorterAppResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{40}
}

func (x *ApplyPorterAppResponse) GetPorterAppRevisionId() string {
	if x != nil {
		return x.PorterAppRevisionId
	}
	return ""
}

func (x *ApplyPorterAppResponse) GetCliAction() EnumCLIAction {
	if x != nil {
		return x.CliAction
	}
	return EnumCLIAction_ENUM_CLI_ACTION_UNSPECIFIED
}

type UpdateAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the app
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,2,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// app is the (potentially partial) definition of the PorterApp to be applied
	App *PorterApp `protobuf:"bytes,3,opt,name=app,proto3" json:"app,omitempty"`
	// app_revision_id is the id of the PorterAppRevision to be applied.  This is used by the CLI to provide updates to an existing app revision. If provided, app must be empty.
	AppRevisionId string `protobuf:"bytes,4,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
	// app_env is the current set of environment variables for the upcoming app revision
	AppEnv *EnvGroupVariables `protobuf:"bytes,5,opt,name=app_env,json=appEnv,proto3" json:"app_env,omitempty"`
	// deletions is an object containing the names of fields to be deleted from the app
	Deletions *Deletions `protobuf:"bytes,6,opt,name=deletions,proto3" json:"deletions,omitempty"`
	// app_overrides contains environment specific overrides if they exist, applied depending on the deployment target
	AppOverrides *PorterApp `protobuf:"bytes,7,opt,name=app_overrides,json=appOverrides,proto3" json:"app_overrides,omitempty"`
	// is_env_override is a flag that indicates whether the app environment should be fully overwritten, or if the new app env variables should be merged with the existing
	IsEnvOverride bool `protobuf:"varint,8,opt,name=is_env_override,json=isEnvOverride,proto3" json:"is_env_override,omitempty"`
	// is_predeploy_eligible is a flag that indicates whether the revision is ready for predeploy to run, usually after a successful build
	IsPredeployEligible bool `protobuf:"varint,9,opt,name=is_predeploy_eligible,json=isPredeployEligible,proto3" json:"is_predeploy_eligible,omitempty"`
	// commit_sha is the current commit sha to be built and applied. If provided, it is assumed that the app source has changed
	CommitSha string `protobuf:"bytes,10,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	// addons is a list of addons which should be deployed alongside the app
	Addons []*Addon `protobuf:"bytes,11,rep,name=addons,proto3" json:"addons,omitempty"`
	// addon_overrides contains environment specific overrides for addons if they exist, applied depending on the deployment target
	// if any addons are provided, these will be the only addons deployed alongside the app and the others will be ignored
	AddonOverrides []*Addon `protobuf:"bytes,12,rep,name=addon_overrides,json=addonOverrides,proto3" json:"addon_overrides,omitempty"`
	// exact is a flag that indicates whether the app should be updated to the exact state provided, or if it should be merged with the existing state
	Exact bool `protobuf:"varint,13,opt,name=exact,proto3" json:"exact,omitempty"`
	// b64_description is a base64-encoded user-generated description of the update
	B64Description string `protobuf:"bytes,14,opt,name=b64_description,json=b64Description,proto3" json:"b64_description,omitempty"`
	// app_env_overrides contains environment specific overrides if they exist, applied depending on the deployment target
	AppEnvOverrides *EnvGroupVariables `protobuf:"bytes,15,opt,name=app_env_overrides,json=appEnvOverrides,proto3" json:"app_env_overrides,omitempty"`
	// cluster_id is the id of the cluster to use if no deployment target identifier is provided
	ClusterId int64 `protobuf:"varint,16,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *UpdateAppRequest) Reset() {
	*x = UpdateAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppRequest) ProtoMessage() {}

func (x *UpdateAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateAppRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateAppRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *UpdateAppRequest) GetApp() *PorterApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *UpdateAppRequest) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

func (x *UpdateAppRequest) GetAppEnv() *EnvGroupVariables {
	if x != nil {
		return x.AppEnv
	}
	return nil
}

func (x *UpdateAppRequest) GetDeletions() *Deletions {
	if x != nil {
		return x.Deletions
	}
	return nil
}

func (x *UpdateAppRequest) GetAppOverrides() *PorterApp {
	if x != nil {
		return x.AppOverrides
	}
	return nil
}

func (x *UpdateAppRequest) GetIsEnvOverride() bool {
	if x != nil {
		return x.IsEnvOverride
	}
	return false
}

func (x *UpdateAppRequest) GetIsPredeployEligible() bool {
	if x != nil {
		return x.IsPredeployEligible
	}
	return false
}

func (x *UpdateAppRequest) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *UpdateAppRequest) GetAddons() []*Addon {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *UpdateAppRequest) GetAddonOverrides() []*Addon {
	if x != nil {
		return x.AddonOverrides
	}
	return nil
}

func (x *UpdateAppRequest) GetExact() bool {
	if x != nil {
		return x.Exact
	}
	return false
}

func (x *UpdateAppRequest) GetB64Description() string {
	if x != nil {
		return x.B64Description
	}
	return ""
}

func (x *UpdateAppRequest) GetAppEnvOverrides() *EnvGroupVariables {
	if x != nil {
		return x.AppEnvOverrides
	}
	return nil
}

func (x *UpdateAppRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type UpdateAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_revision_id is the id of the PorterAppRevision that was updated
	AppRevisionId string `protobuf:"bytes,1,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
	// cli_action is the action that the CLI should take after applying the PorterApp (at the time of writing, either build the image or track whether a predeploy job has completed)
	CliAction EnumCLIAction `protobuf:"varint,2,opt,name=cli_action,json=cliAction,proto3,enum=porter.v1.EnumCLIAction" json:"cli_action,omitempty"`
}

func (x *UpdateAppResponse) Reset() {
	*x = UpdateAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppResponse) ProtoMessage() {}

func (x *UpdateAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateAppResponse) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

func (x *UpdateAppResponse) GetCliAction() EnumCLIAction {
	if x != nil {
		return x.CliAction
	}
	return EnumCLIAction_ENUM_CLI_ACTION_UNSPECIFIED
}

type UpdateAddonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the addon.
	// If cluster_id is specified and deployment_target_identifier is not, then the default deployment target for the provided cluster will be used
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,3,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// addon specifies all the addon config that we will update
	Addon *Addon `protobuf:"bytes,4,opt,name=addon,proto3" json:"addon,omitempty"`
	// addon_env is the set of environment variables for the addon
	AddonEnv *EnvGroupVariables `protobuf:"bytes,5,opt,name=addon_env,json=addonEnv,proto3" json:"addon_env,omitempty"`
}

func (x *UpdateAddonRequest) Reset() {
	*x = UpdateAddonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddonRequest) ProtoMessage() {}

func (x *UpdateAddonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddonRequest.ProtoReflect.Descriptor instead.
func (*UpdateAddonRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateAddonRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateAddonRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *UpdateAddonRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *UpdateAddonRequest) GetAddon() *Addon {
	if x != nil {
		return x.Addon
	}
	return nil
}

func (x *UpdateAddonRequest) GetAddonEnv() *EnvGroupVariables {
	if x != nil {
		return x.AddonEnv
	}
	return nil
}

type UpdateAddonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAddonResponse) Reset() {
	*x = UpdateAddonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddonResponse) ProtoMessage() {}

func (x *UpdateAddonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddonResponse.ProtoReflect.Descriptor instead.
func (*UpdateAddonResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{44}
}

type DeleteAddonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the addon
	// If cluster_id is specified and deployment_target_identifier is not, then the default deployment target for the provided cluster will be used
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,3,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// addon_name specifies the addon we would like to delete in the deployment target
	AddonName string `protobuf:"bytes,4,opt,name=addon_name,json=addonName,proto3" json:"addon_name,omitempty"`
}

func (x *DeleteAddonRequest) Reset() {
	*x = DeleteAddonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddonRequest) ProtoMessage() {}

func (x *DeleteAddonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddonRequest.ProtoReflect.Descriptor instead.
func (*DeleteAddonRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{45}
}

func (x *DeleteAddonRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteAddonRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *DeleteAddonRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *DeleteAddonRequest) GetAddonName() string {
	if x != nil {
		return x.AddonName
	}
	return ""
}

type DeleteAddonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAddonResponse) Reset() {
	*x = DeleteAddonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddonResponse) ProtoMessage() {}

func (x *DeleteAddonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddonResponse.ProtoReflect.Descriptor instead.
func (*DeleteAddonResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{46}
}

type UpdateRevisionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_revision_id is the id of the PorterAppRevision
	AppRevisionId string `protobuf:"bytes,2,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
	// revision_status is the new status of the revision
	RevisionStatus EnumRevisionStatus `protobuf:"varint,3,opt,name=revision_status,json=revisionStatus,proto3,enum=porter.v1.EnumRevisionStatus" json:"revision_status,omitempty"`
}

func (x *UpdateRevisionStatusRequest) Reset() {
	*x = UpdateRevisionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRevisionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRevisionStatusRequest) ProtoMessage() {}

func (x *UpdateRevisionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRevisionStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateRevisionStatusRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateRevisionStatusRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateRevisionStatusRequest) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

func (x *UpdateRevisionStatusRequest) GetRevisionStatus() EnumRevisionStatus {
	if x != nil {
		return x.RevisionStatus
	}
	return EnumRevisionStatus_ENUM_REVISION_STATUS_UNSPECIFIED
}

type UpdateRevisionStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRevisionStatusResponse) Reset() {
	*x = UpdateRevisionStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRevisionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRevisionStatusResponse) ProtoMessage() {}

func (x *UpdateRevisionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRevisionStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateRevisionStatusResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{48}
}

type RollbackRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_id is the id of the PorterApp to roll back
	// deprecated: use app_name and deployment_target_identifier
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	AppId int64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. Deprecated: use deployment_target_identifier.
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DeploymentTargetId string `protobuf:"bytes,3,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// app_revision_id is the id of the PorterAppRevision
	AppRevisionId string `protobuf:"bytes,4,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the app
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,5,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// app_name is the name of the app to retrieve the helm values for
	// used in conjunction with deployment_target_identifier to get the correct app instance
	AppName string `protobuf:"bytes,6,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *RollbackRevisionRequest) Reset() {
	*x = RollbackRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackRevisionRequest) ProtoMessage() {}

func (x *RollbackRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackRevisionRequest.ProtoReflect.Descriptor instead.
func (*RollbackRevisionRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{49}
}

func (x *RollbackRevisionRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *RollbackRevisionRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *RollbackRevisionRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *RollbackRevisionRequest) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

func (x *RollbackRevisionRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *RollbackRevisionRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

type RollbackRevisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// target_revision_number is the revision number of the revision that was rolled back to
	TargetRevisionNumber int32 `protobuf:"varint,1,opt,name=target_revision_number,json=targetRevisionNumber,proto3" json:"target_revision_number,omitempty"`
	// app_revision_id is the id of the newly created PorterAppRevision
	AppRevisionId string `protobuf:"bytes,2,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
}

func (x *RollbackRevisionResponse) Reset() {
	*x = RollbackRevisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackRevisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackRevisionResponse) ProtoMessage() {}

func (x *RollbackRevisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackRevisionResponse.ProtoReflect.Descriptor instead.
func (*RollbackRevisionResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{50}
}

func (x *RollbackRevisionResponse) GetTargetRevisionNumber() int32 {
	if x != nil {
		return x.TargetRevisionNumber
	}
	return 0
}

func (x *RollbackRevisionResponse) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

// DeletePorterAppRequest is the request object when deleting a porter app from a given project
type DeletePorterAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project that the PorterApp belongs to
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_name is the name of the porter app to be deleted
	AppName string `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// cluster_id is the id of the cluster that the PorterApp belongs to
	ClusterId int64 `protobuf:"varint,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *DeletePorterAppRequest) Reset() {
	*x = DeletePorterAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePorterAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePorterAppRequest) ProtoMessage() {}

func (x *DeletePorterAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePorterAppRequest.ProtoReflect.Descriptor instead.
func (*DeletePorterAppRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{51}
}

func (x *DeletePorterAppRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeletePorterAppRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *DeletePorterAppRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

// DeletePorterAppResponse is the response object when deleting a porter app from a given project
type DeletePorterAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_id is the id of the PorterApp that was deleted
	AppId int64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *DeletePorterAppResponse) Reset() {
	*x = DeletePorterAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePorterAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePorterAppResponse) ProtoMessage() {}

func (x *DeletePorterAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePorterAppResponse.ProtoReflect.Descriptor instead.
func (*DeletePorterAppResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{52}
}

func (x *DeletePorterAppResponse) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

// DeleteAppDeploymentRequest is the request object when removing a porter app from a given deployment target
type DeleteAppDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. Deprecated: use deployment_target_identifier.
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DeploymentTargetId string `protobuf:"bytes,2,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// app_name is the name of the porter app to be uninstalled
	AppName string `protobuf:"bytes,3,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the app
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,4,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
}

func (x *DeleteAppDeploymentRequest) Reset() {
	*x = DeleteAppDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppDeploymentRequest) ProtoMessage() {}

func (x *DeleteAppDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppDeploymentRequest.ProtoReflect.Descriptor instead.
func (*DeleteAppDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{53}
}

func (x *DeleteAppDeploymentRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *DeleteAppDeploymentRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *DeleteAppDeploymentRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *DeleteAppDeploymentRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

// DeleteAppDeploymentResponse is the response object when removing a porter app from a given deployment target
type DeleteAppDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAppDeploymentResponse) Reset() {
	*x = DeleteAppDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppDeploymentResponse) ProtoMessage() {}

func (x *DeleteAppDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppDeploymentResponse.ProtoReflect.Descriptor instead.
func (*DeleteAppDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{54}
}

// DeleteDeploymentTargetRequest is the request object when removing a deployment target from a given cluster
type DeleteDeploymentTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_id is the id of the deployment target to be deleted. Deprecated: use deployment_target_identifier.
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DeploymentTargetId string `protobuf:"bytes,2,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the app
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,3,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
}

func (x *DeleteDeploymentTargetRequest) Reset() {
	*x = DeleteDeploymentTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeploymentTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeploymentTargetRequest) ProtoMessage() {}

func (x *DeleteDeploymentTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeploymentTargetRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeploymentTargetRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{55}
}

func (x *DeleteDeploymentTargetRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *DeleteDeploymentTargetRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *DeleteDeploymentTargetRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

// DeleteDeploymentTargetResponse is the response object when removing a deployment target from a given cluster
type DeleteDeploymentTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDeploymentTargetResponse) Reset() {
	*x = DeleteDeploymentTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeploymentTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeploymentTargetResponse) ProtoMessage() {}

func (x *DeleteDeploymentTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeploymentTargetResponse.ProtoReflect.Descriptor instead.
func (*DeleteDeploymentTargetResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{56}
}

type CurrentAppRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_id is the id of the PorterApp that is currently installed
	// Deprecated: use app_name and deployment_target_identifier instead
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	AppId int64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. Deprecated: use deployment_target_identifier.
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DeploymentTargetId string `protobuf:"bytes,3,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the app
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,4,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// app_name is the name of the app to retrieve the revision for
	// used in conjunction with deployment_target_identifier to get the correct app instance
	AppName string `protobuf:"bytes,5,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *CurrentAppRevisionRequest) Reset() {
	*x = CurrentAppRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentAppRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentAppRevisionRequest) ProtoMessage() {}

func (x *CurrentAppRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentAppRevisionRequest.ProtoReflect.Descriptor instead.
func (*CurrentAppRevisionRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{57}
}

func (x *CurrentAppRevisionRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *CurrentAppRevisionRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *CurrentAppRevisionRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *CurrentAppRevisionRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *CurrentAppRevisionRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

type AppRevision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app is the definition of the PorterApp that is currently installed
	App *PorterApp `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	// status is the status of the revision
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// revision_number is the revision number respective to the application and deployment target
	RevisionNumber uint64 `protobuf:"varint,3,opt,name=revision_number,json=revisionNumber,proto3" json:"revision_number,omitempty"`
	// created_at is the time the revision was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// updated_at is the time the revision was last updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// id is the id of the revision
	Id string `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	// deployment_target_id is the id of the deployment target where the revision occurs
	DeploymentTargetId string `protobuf:"bytes,7,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// app_instance_id is the id of the app instance
	AppInstanceId string `protobuf:"bytes,8,opt,name=app_instance_id,json=appInstanceId,proto3" json:"app_instance_id,omitempty"`
	// app_instance_name is the name of the app instance
	AppInstanceName string `protobuf:"bytes,9,opt,name=app_instance_name,json=appInstanceName,proto3" json:"app_instance_name,omitempty"`
	// porter_app_id is the id of the porter app
	PorterAppId int64 `protobuf:"varint,10,opt,name=porter_app_id,json=porterAppId,proto3" json:"porter_app_id,omitempty"`
	// b64_description is a base64-encoded user-generated description of the revision
	B64Description string `protobuf:"bytes,11,opt,name=b64_description,json=b64Description,proto3" json:"b64_description,omitempty"`
}

func (x *AppRevision) Reset() {
	*x = AppRevision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppRevision) ProtoMessage() {}

func (x *AppRevision) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppRevision.ProtoReflect.Descriptor instead.
func (*AppRevision) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{58}
}

func (x *AppRevision) GetApp() *PorterApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *AppRevision) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AppRevision) GetRevisionNumber() uint64 {
	if x != nil {
		return x.RevisionNumber
	}
	return 0
}

func (x *AppRevision) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AppRevision) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *AppRevision) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppRevision) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *AppRevision) GetAppInstanceId() string {
	if x != nil {
		return x.AppInstanceId
	}
	return ""
}

func (x *AppRevision) GetAppInstanceName() string {
	if x != nil {
		return x.AppInstanceName
	}
	return ""
}

func (x *AppRevision) GetPorterAppId() int64 {
	if x != nil {
		return x.PorterAppId
	}
	return 0
}

func (x *AppRevision) GetB64Description() string {
	if x != nil {
		return x.B64Description
	}
	return ""
}

// AppRevisionStatusRequest is used to query the status of an app revision
type AppRevisionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_revision_id is the id of the revision to query
	AppRevisionId string `protobuf:"bytes,2,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
}

func (x *AppRevisionStatusRequest) Reset() {
	*x = AppRevisionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppRevisionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppRevisionStatusRequest) ProtoMessage() {}

func (x *AppRevisionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppRevisionStatusRequest.ProtoReflect.Descriptor instead.
func (*AppRevisionStatusRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{59}
}

func (x *AppRevisionStatusRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AppRevisionStatusRequest) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

// AppRevisionStatusResponse is the response object from querying the status of an app revision
type AppRevisionStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// predeploy_started indicates whether the predeploy has started
	PredeployStarted bool `protobuf:"varint,1,opt,name=predeploy_started,json=predeployStarted,proto3" json:"predeploy_started,omitempty"`
	// predeploy_successful indicates whether the predeploy was successful
	PredeploySuccessful bool `protobuf:"varint,2,opt,name=predeploy_successful,json=predeploySuccessful,proto3" json:"predeploy_successful,omitempty"`
	// predeploy_failed indicates whether the predeploy failed
	PredeployFailed bool `protobuf:"varint,3,opt,name=predeploy_failed,json=predeployFailed,proto3" json:"predeploy_failed,omitempty"`
	// install_started indicates whether the install has started
	InstallStarted bool `protobuf:"varint,4,opt,name=install_started,json=installStarted,proto3" json:"install_started,omitempty"`
	// install_successful indicates whether the revision install has completed successfully
	InstallSuccessful bool `protobuf:"varint,5,opt,name=install_successful,json=installSuccessful,proto3" json:"install_successful,omitempty"`
	// install_failed indicates whether the revision install has failed
	InstallFailed bool `protobuf:"varint,6,opt,name=install_failed,json=installFailed,proto3" json:"install_failed,omitempty"`
	// deployment_started indicates whether the deployment has started
	DeploymentStarted bool `protobuf:"varint,7,opt,name=deployment_started,json=deploymentStarted,proto3" json:"deployment_started,omitempty"`
	// deployment_successful indicates whether the revision deployment has completed successfully
	DeploymentSuccessful bool `protobuf:"varint,8,opt,name=deployment_successful,json=deploymentSuccessful,proto3" json:"deployment_successful,omitempty"`
	// deployment_failed indicates whether the revision deployment has failed
	DeploymentFailed bool `protobuf:"varint,9,opt,name=deployment_failed,json=deploymentFailed,proto3" json:"deployment_failed,omitempty"`
	// is_in_terminal_status indicates whether the revision is in a terminal status (its status will not change)
	IsInTerminalStatus bool `protobuf:"varint,10,opt,name=is_in_terminal_status,json=isInTerminalStatus,proto3" json:"is_in_terminal_status,omitempty"`
	// status is the current status of the revision
	Status EnumAppRevisionStatus `protobuf:"varint,11,opt,name=status,proto3,enum=porter.v1.EnumAppRevisionStatus" json:"status,omitempty"`
}

func (x *AppRevisionStatusResponse) Reset() {
	*x = AppRevisionStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppRevisionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppRevisionStatusResponse) ProtoMessage() {}

func (x *AppRevisionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppRevisionStatusResponse.ProtoReflect.Descriptor instead.
func (*AppRevisionStatusResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{60}
}

func (x *AppRevisionStatusResponse) GetPredeployStarted() bool {
	if x != nil {
		return x.PredeployStarted
	}
	return false
}

func (x *AppRevisionStatusResponse) GetPredeploySuccessful() bool {
	if x != nil {
		return x.PredeploySuccessful
	}
	return false
}

func (x *AppRevisionStatusResponse) GetPredeployFailed() bool {
	if x != nil {
		return x.PredeployFailed
	}
	return false
}

func (x *AppRevisionStatusResponse) GetInstallStarted() bool {
	if x != nil {
		return x.InstallStarted
	}
	return false
}

func (x *AppRevisionStatusResponse) GetInstallSuccessful() bool {
	if x != nil {
		return x.InstallSuccessful
	}
	return false
}

func (x *AppRevisionStatusResponse) GetInstallFailed() bool {
	if x != nil {
		return x.InstallFailed
	}
	return false
}

func (x *AppRevisionStatusResponse) GetDeploymentStarted() bool {
	if x != nil {
		return x.DeploymentStarted
	}
	return false
}

func (x *AppRevisionStatusResponse) GetDeploymentSuccessful() bool {
	if x != nil {
		return x.DeploymentSuccessful
	}
	return false
}

func (x *AppRevisionStatusResponse) GetDeploymentFailed() bool {
	if x != nil {
		return x.DeploymentFailed
	}
	return false
}

func (x *AppRevisionStatusResponse) GetIsInTerminalStatus() bool {
	if x != nil {
		return x.IsInTerminalStatus
	}
	return false
}

func (x *AppRevisionStatusResponse) GetStatus() EnumAppRevisionStatus {
	if x != nil {
		return x.Status
	}
	return EnumAppRevisionStatus_ENUM_APP_REVISION_STATUS_UNSPECIFIED
}

// UpdateRevisionPayload is used to send messages via nats to update a revision
type UpdateRevisionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project that the revision belongs to
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// revision_id is the id of the revision
	RevisionId string `protobuf:"bytes,2,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// commit_sha is the commit_sha of a new build
	CommitSha string `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	// image is the image information for a new image
	Image *AppImage `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	// triggered_by specifies what triggered the update
	TriggeredBy EnumUpdateTrigger `protobuf:"varint,5,opt,name=triggered_by,json=triggeredBy,proto3,enum=porter.v1.EnumUpdateTrigger" json:"triggered_by,omitempty"`
	// prerequisite_addons is a list of addons that should be installed before proceeding with the update
	PrerequisiteAddons []*PrerequisiteAddon `protobuf:"bytes,6,rep,name=prerequisite_addons,json=prerequisiteAddons,proto3" json:"prerequisite_addons,omitempty"`
}

func (x *UpdateRevisionPayload) Reset() {
	*x = UpdateRevisionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRevisionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRevisionPayload) ProtoMessage() {}

func (x *UpdateRevisionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRevisionPayload.ProtoReflect.Descriptor instead.
func (*UpdateRevisionPayload) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateRevisionPayload) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateRevisionPayload) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

func (x *UpdateRevisionPayload) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *UpdateRevisionPayload) GetImage() *AppImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *UpdateRevisionPayload) GetTriggeredBy() EnumUpdateTrigger {
	if x != nil {
		return x.TriggeredBy
	}
	return EnumUpdateTrigger_ENUM_UPDATE_TRIGGER_UNSPECIFIED
}

func (x *UpdateRevisionPayload) GetPrerequisiteAddons() []*PrerequisiteAddon {
	if x != nil {
		return x.PrerequisiteAddons
	}
	return nil
}

// UpdateAddonPayload is used to send messages via nats to update an addon
type UpdateAddonPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project that the revision belongs to
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// commit_sha is the commit containing the latest values for the addon in the config repo
	CommitSha string `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
}

func (x *UpdateAddonPayload) Reset() {
	*x = UpdateAddonPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddonPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddonPayload) ProtoMessage() {}

func (x *UpdateAddonPayload) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddonPayload.ProtoReflect.Descriptor instead.
func (*UpdateAddonPayload) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateAddonPayload) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateAddonPayload) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

type RequireAppPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project the app belongs to
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_name is the name of the app
	AppName string `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// app_revision_id is the id of the app revision specifying this requirement, applied to the deployment target where the requirement is expected
	AppRevisionId string `protobuf:"bytes,3,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
	// source_deployment_target is the object that identifies the deployment target where the app definition is coming from
	// if not provided, this will be the default target for the same cluster as the target where the requirement is expected
	SourceDeploymentTarget *DeploymentTargetIdentifier `protobuf:"bytes,4,opt,name=source_deployment_target,json=sourceDeploymentTarget,proto3" json:"source_deployment_target,omitempty"`
}

func (x *RequireAppPayload) Reset() {
	*x = RequireAppPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequireAppPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequireAppPayload) ProtoMessage() {}

func (x *RequireAppPayload) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequireAppPayload.ProtoReflect.Descriptor instead.
func (*RequireAppPayload) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{63}
}

func (x *RequireAppPayload) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *RequireAppPayload) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *RequireAppPayload) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

func (x *RequireAppPayload) GetSourceDeploymentTarget() *DeploymentTargetIdentifier {
	if x != nil {
		return x.SourceDeploymentTarget
	}
	return nil
}

type CurrentAppRevisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// revision is the currently deployed app revision for a given porter_app and deployment_target
	AppRevision *AppRevision `protobuf:"bytes,1,opt,name=app_revision,json=appRevision,proto3" json:"app_revision,omitempty"`
}

func (x *CurrentAppRevisionResponse) Reset() {
	*x = CurrentAppRevisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentAppRevisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentAppRevisionResponse) ProtoMessage() {}

func (x *CurrentAppRevisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentAppRevisionResponse.ProtoReflect.Descriptor instead.
func (*CurrentAppRevisionResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{64}
}

func (x *CurrentAppRevisionResponse) GetAppRevision() *AppRevision {
	if x != nil {
		return x.AppRevision
	}
	return nil
}

type ListAppRevisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_id is the id of the PorterApp that is currently installed
	// Deprecated: use app_name and deployment_target_identifier instead
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	AppId int64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. Deprecated: use deployment_target_identifier.
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DeploymentTargetId string `protobuf:"bytes,3,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the app
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,4,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// app_name is the name of the app to retrieve the revisions for
	// used in conjunction with deployment_target_identifier to get the correct app instance
	AppName string `protobuf:"bytes,5,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *ListAppRevisionsRequest) Reset() {
	*x = ListAppRevisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAppRevisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAppRevisionsRequest) ProtoMessage() {}

func (x *ListAppRevisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAppRevisionsRequest.ProtoReflect.Descriptor instead.
func (*ListAppRevisionsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{65}
}

func (x *ListAppRevisionsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *ListAppRevisionsRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *ListAppRevisionsRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *ListAppRevisionsRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *ListAppRevisionsRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

type ListAppRevisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_revisions is the list of app revisions for the given app and deployment target
	AppRevisions []*AppRevision `protobuf:"bytes,1,rep,name=app_revisions,json=appRevisions,proto3" json:"app_revisions,omitempty"`
}

func (x *ListAppRevisionsResponse) Reset() {
	*x = ListAppRevisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAppRevisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAppRevisionsResponse) ProtoMessage() {}

func (x *ListAppRevisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAppRevisionsResponse.ProtoReflect.Descriptor instead.
func (*ListAppRevisionsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{66}
}

func (x *ListAppRevisionsResponse) GetAppRevisions() []*AppRevision {
	if x != nil {
		return x.AppRevisions
	}
	return nil
}

type LatestAppRevisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target. Optional.
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,2,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// deployment_target_id is the id of the deployment target to retrieve revisions from. Deprecated: use deployment_target_identifier.
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DeploymentTargetId string `protobuf:"bytes,3,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// cluster_id is the id of the cluster to retrieve revisions from. Optional.
	ClusterId int64 `protobuf:"varint,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *LatestAppRevisionsRequest) Reset() {
	*x = LatestAppRevisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestAppRevisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestAppRevisionsRequest) ProtoMessage() {}

func (x *LatestAppRevisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestAppRevisionsRequest.ProtoReflect.Descriptor instead.
func (*LatestAppRevisionsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{67}
}

func (x *LatestAppRevisionsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *LatestAppRevisionsRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *LatestAppRevisionsRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *LatestAppRevisionsRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type LatestAppRevisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_revisions is the list of app revisions for the given deployment target
	AppRevisions []*AppRevision `protobuf:"bytes,1,rep,name=app_revisions,json=appRevisions,proto3" json:"app_revisions,omitempty"`
}

func (x *LatestAppRevisionsResponse) Reset() {
	*x = LatestAppRevisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestAppRevisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestAppRevisionsResponse) ProtoMessage() {}

func (x *LatestAppRevisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestAppRevisionsResponse.ProtoReflect.Descriptor instead.
func (*LatestAppRevisionsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{68}
}

func (x *LatestAppRevisionsResponse) GetAppRevisions() []*AppRevision {
	if x != nil {
		return x.AppRevisions
	}
	return nil
}

type GetAppRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_revision_id is the id of the PorterAppRevision to return
	AppRevisionId string `protobuf:"bytes,2,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
}

func (x *GetAppRevisionRequest) Reset() {
	*x = GetAppRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppRevisionRequest) ProtoMessage() {}

func (x *GetAppRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppRevisionRequest.ProtoReflect.Descriptor instead.
func (*GetAppRevisionRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{69}
}

func (x *GetAppRevisionRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetAppRevisionRequest) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

type GetAppRevisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_revision is the PorterAppRevision that was requested
	AppRevision *AppRevision `protobuf:"bytes,1,opt,name=app_revision,json=appRevision,proto3" json:"app_revision,omitempty"`
}

func (x *GetAppRevisionResponse) Reset() {
	*x = GetAppRevisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppRevisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppRevisionResponse) ProtoMessage() {}

func (x *GetAppRevisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppRevisionResponse.ProtoReflect.Descriptor instead.
func (*GetAppRevisionResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{70}
}

func (x *GetAppRevisionResponse) GetAppRevision() *AppRevision {
	if x != nil {
		return x.AppRevision
	}
	return nil
}

type AppTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_id is the id of the PorterApp to return the template for
	AppId int64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *AppTemplateRequest) Reset() {
	*x = AppTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppTemplateRequest) ProtoMessage() {}

func (x *AppTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppTemplateRequest.ProtoReflect.Descriptor instead.
func (*AppTemplateRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{71}
}

func (x *AppTemplateRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AppTemplateRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

type AppTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_template is the PorterApp template hydrated with the latest revision of the base app
	AppTemplate *PorterApp `protobuf:"bytes,1,opt,name=app_template,json=appTemplate,proto3" json:"app_template,omitempty"`
	// app_env is the current set of environment variables that will be used alongside the app template
	AppEnv *EnvGroupVariables `protobuf:"bytes,2,opt,name=app_env,json=appEnv,proto3" json:"app_env,omitempty"`
	// addon_templates is the list of addons to be included alongside the app template
	AddonTemplates []*AddonWithEnvVars `protobuf:"bytes,3,rep,name=addon_templates,json=addonTemplates,proto3" json:"addon_templates,omitempty"`
}

func (x *AppTemplateResponse) Reset() {
	*x = AppTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppTemplateResponse) ProtoMessage() {}

func (x *AppTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppTemplateResponse.ProtoReflect.Descriptor instead.
func (*AppTemplateResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{72}
}

func (x *AppTemplateResponse) GetAppTemplate() *PorterApp {
	if x != nil {
		return x.AppTemplate
	}
	return nil
}

func (x *AppTemplateResponse) GetAppEnv() *EnvGroupVariables {
	if x != nil {
		return x.AppEnv
	}
	return nil
}

func (x *AppTemplateResponse) GetAddonTemplates() []*AddonWithEnvVars {
	if x != nil {
		return x.AddonTemplates
	}
	return nil
}

// AddonTemplatesPayload is an object containg a list of addons to be included alongside an app template
// these addons will be applied or updated whenever an app is deployed to a new preview deployment target
type AddonTemplatesPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// addon_templates is the list of addons to be included in the template
	AddonTemplates []*Addon `protobuf:"bytes,1,rep,name=addon_templates,json=addonTemplates,proto3" json:"addon_templates,omitempty"`
}

func (x *AddonTemplatesPayload) Reset() {
	*x = AddonTemplatesPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonTemplatesPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonTemplatesPayload) ProtoMessage() {}

func (x *AddonTemplatesPayload) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonTemplatesPayload.ProtoReflect.Descriptor instead.
func (*AddonTemplatesPayload) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{73}
}

func (x *AddonTemplatesPayload) GetAddonTemplates() []*Addon {
	if x != nil {
		return x.AddonTemplates
	}
	return nil
}

type AddonWithEnvVars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// addon is the addon to be included in the template
	Addon *Addon `protobuf:"bytes,1,opt,name=addon,proto3" json:"addon,omitempty"`
	// env_vars is the set of environment variables to create the addon with
	EnvVars *EnvGroupVariables `protobuf:"bytes,2,opt,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty"`
}

func (x *AddonWithEnvVars) Reset() {
	*x = AddonWithEnvVars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddonWithEnvVars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddonWithEnvVars) ProtoMessage() {}

func (x *AddonWithEnvVars) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddonWithEnvVars.ProtoReflect.Descriptor instead.
func (*AddonWithEnvVars) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{74}
}

func (x *AddonWithEnvVars) GetAddon() *Addon {
	if x != nil {
		return x.Addon
	}
	return nil
}

func (x *AddonWithEnvVars) GetEnvVars() *EnvGroupVariables {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

type UpdateAppTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_name is the name of the PorterApp to update the template for
	AppName string `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// app_template is the PorterApp template to be updated
	AppTemplate *PorterApp `protobuf:"bytes,3,opt,name=app_template,json=appTemplate,proto3" json:"app_template,omitempty"`
	// app_env is the current set of environment variables that will be used alongside the app template
	AppEnv *EnvGroupVariables `protobuf:"bytes,4,opt,name=app_env,json=appEnv,proto3" json:"app_env,omitempty"`
	// addon_templates is the collection of addons to be included alongside the template when applied in a new preview deployment target
	AddonTemplates []*AddonWithEnvVars `protobuf:"bytes,5,rep,name=addon_templates,json=addonTemplates,proto3" json:"addon_templates,omitempty"`
	// base_deployment_target_id is the id of the deployment target that the template is based on
	// the template will be hydrated with the latest version of the app in the base when applied to a new preview deployment target
	BaseDeploymentTargetId string `protobuf:"bytes,6,opt,name=base_deployment_target_id,json=baseDeploymentTargetId,proto3" json:"base_deployment_target_id,omitempty"`
}

func (x *UpdateAppTemplateRequest) Reset() {
	*x = UpdateAppTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppTemplateRequest) ProtoMessage() {}

func (x *UpdateAppTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppTemplateRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppTemplateRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{75}
}

func (x *UpdateAppTemplateRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateAppTemplateRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *UpdateAppTemplateRequest) GetAppTemplate() *PorterApp {
	if x != nil {
		return x.AppTemplate
	}
	return nil
}

func (x *UpdateAppTemplateRequest) GetAppEnv() *EnvGroupVariables {
	if x != nil {
		return x.AppEnv
	}
	return nil
}

func (x *UpdateAppTemplateRequest) GetAddonTemplates() []*AddonWithEnvVars {
	if x != nil {
		return x.AddonTemplates
	}
	return nil
}

func (x *UpdateAppTemplateRequest) GetBaseDeploymentTargetId() string {
	if x != nil {
		return x.BaseDeploymentTargetId
	}
	return ""
}

type UpdateAppTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAppTemplateResponse) Reset() {
	*x = UpdateAppTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppTemplateResponse) ProtoMessage() {}

func (x *UpdateAppTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppTemplateResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppTemplateResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{76}
}

type LatestAddonsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target. Optional.
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,2,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// cluster_id is the id of the cluster to retrieve addons from. Optional.
	ClusterId int64 `protobuf:"varint,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *LatestAddonsRequest) Reset() {
	*x = LatestAddonsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestAddonsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestAddonsRequest) ProtoMessage() {}

func (x *LatestAddonsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestAddonsRequest.ProtoReflect.Descriptor instead.
func (*LatestAddonsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{77}
}

func (x *LatestAddonsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *LatestAddonsRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *LatestAddonsRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type LatestAddonsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// addons is the list of addons for the given deployment target. Deprecated; use AddonsWithEnv
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	Addons []*Addon `protobuf:"bytes,1,rep,name=addons,proto3" json:"addons,omitempty"`
	// addons is the list of addons for the given deployment target, with env variables from the latest default env group for that addon
	AddonsWithEnv []*AddonWithEnvVars `protobuf:"bytes,2,rep,name=addons_with_env,json=addonsWithEnv,proto3" json:"addons_with_env,omitempty"`
}

func (x *LatestAddonsResponse) Reset() {
	*x = LatestAddonsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestAddonsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestAddonsResponse) ProtoMessage() {}

func (x *LatestAddonsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestAddonsResponse.ProtoReflect.Descriptor instead.
func (*LatestAddonsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{78}
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *LatestAddonsResponse) GetAddons() []*Addon {
	if x != nil {
		return x.Addons
	}
	return nil
}

func (x *LatestAddonsResponse) GetAddonsWithEnv() []*AddonWithEnvVars {
	if x != nil {
		return x.AddonsWithEnv
	}
	return nil
}

type PredeployStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_revision_id is the revision id of the PorterApp which should have its predeploy status checked
	AppRevisionId string `protobuf:"bytes,2,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
}

func (x *PredeployStatusRequest) Reset() {
	*x = PredeployStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredeployStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredeployStatusRequest) ProtoMessage() {}

func (x *PredeployStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredeployStatusRequest.ProtoReflect.Descriptor instead.
func (*PredeployStatusRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{79}
}

func (x *PredeployStatusRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PredeployStatusRequest) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

type PredeployStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// predeploy_status is the status of the predeploy job
	PredeployStatus EnumPredeployStatus `protobuf:"varint,1,opt,name=predeploy_status,json=predeployStatus,proto3,enum=porter.v1.EnumPredeployStatus" json:"predeploy_status,omitempty"`
}

func (x *PredeployStatusResponse) Reset() {
	*x = PredeployStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredeployStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredeployStatusResponse) ProtoMessage() {}

func (x *PredeployStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredeployStatusResponse.ProtoReflect.Descriptor instead.
func (*PredeployStatusResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{80}
}

func (x *PredeployStatusResponse) GetPredeployStatus() EnumPredeployStatus {
	if x != nil {
		return x.PredeployStatus
	}
	return EnumPredeployStatus_ENUM_PREDEPLOY_STATUS_UNSPECIFIED
}

type DeploymentTargetDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_id is the id of the deployment target. Deprecated: use deployment_target_identifier.
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DeploymentTargetId string `protobuf:"bytes,2,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,3,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
}

func (x *DeploymentTargetDetailsRequest) Reset() {
	*x = DeploymentTargetDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentTargetDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentTargetDetailsRequest) ProtoMessage() {}

func (x *DeploymentTargetDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentTargetDetailsRequest.ProtoReflect.Descriptor instead.
func (*DeploymentTargetDetailsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{81}
}

func (x *DeploymentTargetDetailsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *DeploymentTargetDetailsRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *DeploymentTargetDetailsRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

type DeploymentTargetDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// namespace is the namespace that the deployment target points to
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// cluster_id is the id of the cluster that the deployment target points to
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// is_preview indicates whether this is a preview deployment target or not
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	IsPreview bool `protobuf:"varint,3,opt,name=is_preview,json=isPreview,proto3" json:"is_preview,omitempty"`
	// deployment_target_name is the name of the deployment target
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DeploymentTargetName string `protobuf:"bytes,4,opt,name=deployment_target_name,json=deploymentTargetName,proto3" json:"deployment_target_name,omitempty"`
	// deployment_target is the requested deployment target
	DeploymentTarget *DeploymentTarget `protobuf:"bytes,5,opt,name=deployment_target,json=deploymentTarget,proto3" json:"deployment_target,omitempty"`
}

func (x *DeploymentTargetDetailsResponse) Reset() {
	*x = DeploymentTargetDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentTargetDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentTargetDetailsResponse) ProtoMessage() {}

func (x *DeploymentTargetDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentTargetDetailsResponse.ProtoReflect.Descriptor instead.
func (*DeploymentTargetDetailsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{82}
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *DeploymentTargetDetailsResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *DeploymentTargetDetailsResponse) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *DeploymentTargetDetailsResponse) GetIsPreview() bool {
	if x != nil {
		return x.IsPreview
	}
	return false
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *DeploymentTargetDetailsResponse) GetDeploymentTargetName() string {
	if x != nil {
		return x.DeploymentTargetName
	}
	return ""
}

func (x *DeploymentTargetDetailsResponse) GetDeploymentTarget() *DeploymentTarget {
	if x != nil {
		return x.DeploymentTarget
	}
	return nil
}

// CreateDeploymentTargetRequest is the request object for CreateDeploymentTarget
type CreateDeploymentTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// name is the name of the deployment target
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// namespace is the namespace that the deployment target points to
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// cluster_id is the id of the cluster that the deployment target points to
	ClusterId int64 `protobuf:"varint,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// is_preview indicates whether this is a preview deployment target or not
	IsPreview bool `protobuf:"varint,5,opt,name=is_preview,json=isPreview,proto3" json:"is_preview,omitempty"`
}

func (x *CreateDeploymentTargetRequest) Reset() {
	*x = CreateDeploymentTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeploymentTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeploymentTargetRequest) ProtoMessage() {}

func (x *CreateDeploymentTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeploymentTargetRequest.ProtoReflect.Descriptor instead.
func (*CreateDeploymentTargetRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{83}
}

func (x *CreateDeploymentTargetRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateDeploymentTargetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDeploymentTargetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateDeploymentTargetRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *CreateDeploymentTargetRequest) GetIsPreview() bool {
	if x != nil {
		return x.IsPreview
	}
	return false
}

// CreateDeploymentTargetResponse is the response object for CreateDeploymentTarget
type CreateDeploymentTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentTargetId string `protobuf:"bytes,1,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
}

func (x *CreateDeploymentTargetResponse) Reset() {
	*x = CreateDeploymentTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeploymentTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeploymentTargetResponse) ProtoMessage() {}

func (x *CreateDeploymentTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeploymentTargetResponse.ProtoReflect.Descriptor instead.
func (*CreateDeploymentTargetResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{84}
}

func (x *CreateDeploymentTargetResponse) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

// DeploymentTargetsRequest is the request object for DeploymentTargets
type DeploymentTargetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cluster_id is the id of the cluster to find deployment targets for
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *DeploymentTargetsRequest) Reset() {
	*x = DeploymentTargetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentTargetsRequest) ProtoMessage() {}

func (x *DeploymentTargetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentTargetsRequest.ProtoReflect.Descriptor instead.
func (*DeploymentTargetsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{85}
}

func (x *DeploymentTargetsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeploymentTargetsRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

// DeploymentTargetsResponse is the response object for DeploymentTargets
type DeploymentTargetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentTargets []*DeploymentTarget `protobuf:"bytes,1,rep,name=deployment_targets,json=deploymentTargets,proto3" json:"deployment_targets,omitempty"`
}

func (x *DeploymentTargetsResponse) Reset() {
	*x = DeploymentTargetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentTargetsResponse) ProtoMessage() {}

func (x *DeploymentTargetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentTargetsResponse.ProtoReflect.Descriptor instead.
func (*DeploymentTargetsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{86}
}

func (x *DeploymentTargetsResponse) GetDeploymentTargets() []*DeploymentTarget {
	if x != nil {
		return x.DeploymentTargets
	}
	return nil
}

// DefaultDeploymentTargetRequest is the request object for DefaultDeploymentTarget
type DefaultDeploymentTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cluster_id is the id of cluster to find the default deployment target for
	// each cluster has only one default deployment target
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *DefaultDeploymentTargetRequest) Reset() {
	*x = DefaultDeploymentTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultDeploymentTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultDeploymentTargetRequest) ProtoMessage() {}

func (x *DefaultDeploymentTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultDeploymentTargetRequest.ProtoReflect.Descriptor instead.
func (*DefaultDeploymentTargetRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{87}
}

func (x *DefaultDeploymentTargetRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DefaultDeploymentTargetRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

// DefaultDeploymentTargetResponse is the response object for DefaultDeploymentTarget
type DefaultDeploymentTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// deployment_target is the default deployment target for the given cluster
	DeploymentTarget *DeploymentTarget `protobuf:"bytes,1,opt,name=deployment_target,json=deploymentTarget,proto3" json:"deployment_target,omitempty"`
}

func (x *DefaultDeploymentTargetResponse) Reset() {
	*x = DefaultDeploymentTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultDeploymentTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultDeploymentTargetResponse) ProtoMessage() {}

func (x *DefaultDeploymentTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultDeploymentTargetResponse.ProtoReflect.Descriptor instead.
func (*DefaultDeploymentTargetResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{88}
}

func (x *DefaultDeploymentTargetResponse) GetDeploymentTarget() *DeploymentTarget {
	if x != nil {
		return x.DeploymentTarget
	}
	return nil
}

type SeedAppRevisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId   int64  `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ReleaseName string `protobuf:"bytes,3,opt,name=release_name,json=releaseName,proto3" json:"release_name,omitempty"`
	// source_namespace is the namespace where the app to be migrated is currently installed
	SourceNamespace string `protobuf:"bytes,4,opt,name=source_namespace,json=sourceNamespace,proto3" json:"source_namespace,omitempty"`
	// target_namespace is the namespace where the app will be installed. This will determine where the env groups are seeded.
	TargetNamespace string `protobuf:"bytes,5,opt,name=target_namespace,json=targetNamespace,proto3" json:"target_namespace,omitempty"`
	// use_health_helm_values is a flag that indicates whether to add the health helm values to the helm overrides for the app instead of the simplified interface from the app contract
	UseHealthHelmValues bool `protobuf:"varint,6,opt,name=use_health_helm_values,json=useHealthHelmValues,proto3" json:"use_health_helm_values,omitempty"`
	// target_project_id is the id of the project where the app will be installed
	TargetProjectId int64 `protobuf:"varint,7,opt,name=target_project_id,json=targetProjectId,proto3" json:"target_project_id,omitempty"`
	// target_cluster_id is the id of the cluster where the app will be installed
	TargetClusterId int64 `protobuf:"varint,8,opt,name=target_cluster_id,json=targetClusterId,proto3" json:"target_cluster_id,omitempty"`
	// number_of_revisions is the number of revisions to seed
	NumberOfRevisions int64 `protobuf:"varint,9,opt,name=number_of_revisions,json=numberOfRevisions,proto3" json:"number_of_revisions,omitempty"`
	// reset_count specifies whether to seed the revisions as revision 0 (if true) or to seed them as the helm revision number (if false)
	ResetCount bool `protobuf:"varint,10,opt,name=reset_count,json=resetCount,proto3" json:"reset_count,omitempty"`
}

func (x *SeedAppRevisionsRequest) Reset() {
	*x = SeedAppRevisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedAppRevisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedAppRevisionsRequest) ProtoMessage() {}

func (x *SeedAppRevisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeedAppRevisionsRequest.ProtoReflect.Descriptor instead.
func (*SeedAppRevisionsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{89}
}

func (x *SeedAppRevisionsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SeedAppRevisionsRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *SeedAppRevisionsRequest) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *SeedAppRevisionsRequest) GetSourceNamespace() string {
	if x != nil {
		return x.SourceNamespace
	}
	return ""
}

func (x *SeedAppRevisionsRequest) GetTargetNamespace() string {
	if x != nil {
		return x.TargetNamespace
	}
	return ""
}

func (x *SeedAppRevisionsRequest) GetUseHealthHelmValues() bool {
	if x != nil {
		return x.UseHealthHelmValues
	}
	return false
}

func (x *SeedAppRevisionsRequest) GetTargetProjectId() int64 {
	if x != nil {
		return x.TargetProjectId
	}
	return 0
}

func (x *SeedAppRevisionsRequest) GetTargetClusterId() int64 {
	if x != nil {
		return x.TargetClusterId
	}
	return 0
}

func (x *SeedAppRevisionsRequest) GetNumberOfRevisions() int64 {
	if x != nil {
		return x.NumberOfRevisions
	}
	return 0
}

func (x *SeedAppRevisionsRequest) GetResetCount() bool {
	if x != nil {
		return x.ResetCount
	}
	return false
}

type SeedAppRevisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// latest_revision_diff is the diff of between the latest helm revision of the app and the latest app revision that was seeded
	LatestRevisionDiff string `protobuf:"bytes,1,opt,name=latest_revision_diff,json=latestRevisionDiff,proto3" json:"latest_revision_diff,omitempty"`
}

func (x *SeedAppRevisionsResponse) Reset() {
	*x = SeedAppRevisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeedAppRevisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeedAppRevisionsResponse) ProtoMessage() {}

func (x *SeedAppRevisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeedAppRevisionsResponse.ProtoReflect.Descriptor instead.
func (*SeedAppRevisionsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{90}
}

func (x *SeedAppRevisionsResponse) GetLatestRevisionDiff() string {
	if x != nil {
		return x.LatestRevisionDiff
	}
	return ""
}

// EnvGroupVariablesRequest is the request object when retrieving the variables for a given EnvGroup
type EnvGroupVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_id is the id of the deployment target for the env group. Deprecated: use deployment_target_identifier.
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DeploymentTargetId string    `protobuf:"bytes,2,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	EnvGroup           *EnvGroup `protobuf:"bytes,3,opt,name=env_group,json=envGroup,proto3" json:"env_group,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the env group
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,4,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
}

func (x *EnvGroupVariablesRequest) Reset() {
	*x = EnvGroupVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvGroupVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvGroupVariablesRequest) ProtoMessage() {}

func (x *EnvGroupVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvGroupVariablesRequest.ProtoReflect.Descriptor instead.
func (*EnvGroupVariablesRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{91}
}

func (x *EnvGroupVariablesRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *EnvGroupVariablesRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *EnvGroupVariablesRequest) GetEnvGroup() *EnvGroup {
	if x != nil {
		return x.EnvGroup
	}
	return nil
}

func (x *EnvGroupVariablesRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

// EnvGroupVariablesResponse is the response object when retrieving the variables for a given EnvGroup
type EnvGroupVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvGroupVariables *EnvGroupVariables `protobuf:"bytes,1,opt,name=env_group_variables,json=envGroupVariables,proto3" json:"env_group_variables,omitempty"`
}

func (x *EnvGroupVariablesResponse) Reset() {
	*x = EnvGroupVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvGroupVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvGroupVariablesResponse) ProtoMessage() {}

func (x *EnvGroupVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvGroupVariablesResponse.ProtoReflect.Descriptor instead.
func (*EnvGroupVariablesResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{92}
}

func (x *EnvGroupVariablesResponse) GetEnvGroupVariables() *EnvGroupVariables {
	if x != nil {
		return x.EnvGroupVariables
	}
	return nil
}

// LatestEnvGroupWithVariablesRequest is the request object when retrieving the latest EnvGroup and its variables for a given deployment target
type LatestEnvGroupWithVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. Deprecated: use deployment_target_identifier.
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DeploymentTargetId string `protobuf:"bytes,2,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	EnvGroupName       string `protobuf:"bytes,3,opt,name=env_group_name,json=envGroupName,proto3" json:"env_group_name,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the env group
	// deprecated: use cluster_id instead
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,4,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// cluster_id is the id of the cluster containing the env group is the porter-env-group ns
	ClusterId int64 `protobuf:"varint,5,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *LatestEnvGroupWithVariablesRequest) Reset() {
	*x = LatestEnvGroupWithVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestEnvGroupWithVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestEnvGroupWithVariablesRequest) ProtoMessage() {}

func (x *LatestEnvGroupWithVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestEnvGroupWithVariablesRequest.ProtoReflect.Descriptor instead.
func (*LatestEnvGroupWithVariablesRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{93}
}

func (x *LatestEnvGroupWithVariablesRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *LatestEnvGroupWithVariablesRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *LatestEnvGroupWithVariablesRequest) GetEnvGroupName() string {
	if x != nil {
		return x.EnvGroupName
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *LatestEnvGroupWithVariablesRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *LatestEnvGroupWithVariablesRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

// LatestEnvGroupWithVariablesResponse is the response object when retrieving the latest EnvGroup and its variables for a given deployment target
// Note: Secrets returned in this response will not be obfuscated in any way
type LatestEnvGroupWithVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvGroup          *EnvGroup          `protobuf:"bytes,1,opt,name=env_group,json=envGroup,proto3" json:"env_group,omitempty"`
	EnvGroupVariables *EnvGroupVariables `protobuf:"bytes,2,opt,name=env_group_variables,json=envGroupVariables,proto3" json:"env_group_variables,omitempty"`
}

func (x *LatestEnvGroupWithVariablesResponse) Reset() {
	*x = LatestEnvGroupWithVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestEnvGroupWithVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestEnvGroupWithVariablesResponse) ProtoMessage() {}

func (x *LatestEnvGroupWithVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestEnvGroupWithVariablesResponse.ProtoReflect.Descriptor instead.
func (*LatestEnvGroupWithVariablesResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{94}
}

func (x *LatestEnvGroupWithVariablesResponse) GetEnvGroup() *EnvGroup {
	if x != nil {
		return x.EnvGroup
	}
	return nil
}

func (x *LatestEnvGroupWithVariablesResponse) GetEnvGroupVariables() *EnvGroupVariables {
	if x != nil {
		return x.EnvGroupVariables
	}
	return nil
}

// AppEnvVariablesRequest is the request object for retrieving all of the latest env variables attached to an app
type AppEnvVariablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cluster_id is the id of the cluster where the app is installed, presumably in the default deployment target. Ignored if deployment_target_identifier is provided.
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the app
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,3,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// app_name is the name of the app to retrieve the env variables for
	AppName string `protobuf:"bytes,4,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *AppEnvVariablesRequest) Reset() {
	*x = AppEnvVariablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppEnvVariablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppEnvVariablesRequest) ProtoMessage() {}

func (x *AppEnvVariablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppEnvVariablesRequest.ProtoReflect.Descriptor instead.
func (*AppEnvVariablesRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{95}
}

func (x *AppEnvVariablesRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AppEnvVariablesRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *AppEnvVariablesRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *AppEnvVariablesRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

// AppEnvVariablesResponse is the response object for retrieving all of the latest env variables attached to an app
// Note: Secrets returned in this response will not be obfuscated in any way
type AppEnvVariablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvVariables *EnvGroupVariables `protobuf:"bytes,1,opt,name=env_variables,json=envVariables,proto3" json:"env_variables,omitempty"`
}

func (x *AppEnvVariablesResponse) Reset() {
	*x = AppEnvVariablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppEnvVariablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppEnvVariablesResponse) ProtoMessage() {}

func (x *AppEnvVariablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppEnvVariablesResponse.ProtoReflect.Descriptor instead.
func (*AppEnvVariablesResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{96}
}

func (x *AppEnvVariablesResponse) GetEnvVariables() *EnvGroupVariables {
	if x != nil {
		return x.EnvVariables
	}
	return nil
}

type UpdateAppImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	AppName   string `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. Deprecated: use deployment_target_identifier.
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DeploymentTargetId string `protobuf:"bytes,3,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	RepositoryUrl      string `protobuf:"bytes,4,opt,name=repository_url,json=repositoryUrl,proto3" json:"repository_url,omitempty"`
	Tag                string `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the app
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,6,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// b64_description is a base64-encoded user-generated description of the update
	B64Description string `protobuf:"bytes,7,opt,name=b64_description,json=b64Description,proto3" json:"b64_description,omitempty"`
}

func (x *UpdateAppImageRequest) Reset() {
	*x = UpdateAppImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppImageRequest) ProtoMessage() {}

func (x *UpdateAppImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppImageRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppImageRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{97}
}

func (x *UpdateAppImageRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateAppImageRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *UpdateAppImageRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *UpdateAppImageRequest) GetRepositoryUrl() string {
	if x != nil {
		return x.RepositoryUrl
	}
	return ""
}

func (x *UpdateAppImageRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *UpdateAppImageRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *UpdateAppImageRequest) GetB64Description() string {
	if x != nil {
		return x.B64Description
	}
	return ""
}

type UpdateAppImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryUrl string `protobuf:"bytes,1,opt,name=repository_url,json=repositoryUrl,proto3" json:"repository_url,omitempty"`
	Tag           string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	RevisionId    string `protobuf:"bytes,3,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
}

func (x *UpdateAppImageResponse) Reset() {
	*x = UpdateAppImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppImageResponse) ProtoMessage() {}

func (x *UpdateAppImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppImageResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppImageResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{98}
}

func (x *UpdateAppImageResponse) GetRepositoryUrl() string {
	if x != nil {
		return x.RepositoryUrl
	}
	return ""
}

func (x *UpdateAppImageResponse) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *UpdateAppImageResponse) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

type UpdateAppBuildSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId                  int64                       `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	AppName                    string                      `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,3,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	Build                      *Build                      `protobuf:"bytes,4,opt,name=build,proto3" json:"build,omitempty"`
}

func (x *UpdateAppBuildSettingsRequest) Reset() {
	*x = UpdateAppBuildSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppBuildSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppBuildSettingsRequest) ProtoMessage() {}

func (x *UpdateAppBuildSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppBuildSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppBuildSettingsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{99}
}

func (x *UpdateAppBuildSettingsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateAppBuildSettingsRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *UpdateAppBuildSettingsRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *UpdateAppBuildSettingsRequest) GetBuild() *Build {
	if x != nil {
		return x.Build
	}
	return nil
}

type UpdateAppBuildSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevisionId string `protobuf:"bytes,1,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
}

func (x *UpdateAppBuildSettingsResponse) Reset() {
	*x = UpdateAppBuildSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppBuildSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppBuildSettingsResponse) ProtoMessage() {}

func (x *UpdateAppBuildSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppBuildSettingsResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppBuildSettingsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{100}
}

func (x *UpdateAppBuildSettingsResponse) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

// UpdateAppsLinkedToEnvGroupRequest is the request object for UpdateAppsLinkedToEnvGroup
type UpdateAppsLinkedToEnvGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId    int64  `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	EnvGroupName string `protobuf:"bytes,3,opt,name=env_group_name,json=envGroupName,proto3" json:"env_group_name,omitempty"`
}

func (x *UpdateAppsLinkedToEnvGroupRequest) Reset() {
	*x = UpdateAppsLinkedToEnvGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppsLinkedToEnvGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppsLinkedToEnvGroupRequest) ProtoMessage() {}

func (x *UpdateAppsLinkedToEnvGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppsLinkedToEnvGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppsLinkedToEnvGroupRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{101}
}

func (x *UpdateAppsLinkedToEnvGroupRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateAppsLinkedToEnvGroupRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *UpdateAppsLinkedToEnvGroupRequest) GetEnvGroupName() string {
	if x != nil {
		return x.EnvGroupName
	}
	return ""
}

// UpdateAppsLinkedToEnvGroupResponse is the response object for UpdateAppsLinkedToEnvGroup
type UpdateAppsLinkedToEnvGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAppsLinkedToEnvGroupResponse) Reset() {
	*x = UpdateAppsLinkedToEnvGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppsLinkedToEnvGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppsLinkedToEnvGroupResponse) ProtoMessage() {}

func (x *UpdateAppsLinkedToEnvGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppsLinkedToEnvGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppsLinkedToEnvGroupResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{102}
}

// AppHelmValuesRequest is the request object when retrieving the helm values for a given app
type AppHelmValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deprecated: use app_name and deployment_target_identifier
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	AppId int64 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. Deprecated: use deployment_target_identifier.
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DeploymentTargetId string `protobuf:"bytes,3,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// with_defaults indicates whether to merge the default Helm values with the explicitly provided values
	WithDefaults bool `protobuf:"varint,4,opt,name=with_defaults,json=withDefaults,proto3" json:"with_defaults,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the app
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,5,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// app_name is the name of the app to retrieve the helm values for
	// used in conjunction with deployment_target_identifier to get the correct app instance
	AppName string `protobuf:"bytes,6,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *AppHelmValuesRequest) Reset() {
	*x = AppHelmValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppHelmValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppHelmValuesRequest) ProtoMessage() {}

func (x *AppHelmValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppHelmValuesRequest.ProtoReflect.Descriptor instead.
func (*AppHelmValuesRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{103}
}

func (x *AppHelmValuesRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *AppHelmValuesRequest) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *AppHelmValuesRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *AppHelmValuesRequest) GetWithDefaults() bool {
	if x != nil {
		return x.WithDefaults
	}
	return false
}

func (x *AppHelmValuesRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *AppHelmValuesRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

// AppHelmValuesResponse is the response object when retrieving the helm values for a given app
type AppHelmValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values is base64-encoded, stringified json of the latest helm values for the app
	B64Values string `protobuf:"bytes,1,opt,name=b64_values,json=b64Values,proto3" json:"b64_values,omitempty"`
}

func (x *AppHelmValuesResponse) Reset() {
	*x = AppHelmValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppHelmValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppHelmValuesResponse) ProtoMessage() {}

func (x *AppHelmValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppHelmValuesResponse.ProtoReflect.Descriptor instead.
func (*AppHelmValuesResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{104}
}

func (x *AppHelmValuesResponse) GetB64Values() string {
	if x != nil {
		return x.B64Values
	}
	return ""
}

// ManualServiceRunRequest is the request object for ManualServiceRun
type ManualServiceRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	AppName   string `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed. Deprecated: use deployment_target_identifier.
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DeploymentTargetId string `protobuf:"bytes,3,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	ServiceName        string `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Command is the command to run on the service.  If not specified, the run command for the service will be used, as defined in the latest app revision.
	Command *string `protobuf:"bytes,5,opt,name=command,proto3,oneof" json:"command,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the app
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,6,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// image is the image information to use for the run. If not specified, the image details for the latest app revision will be used.
	Image *AppImage `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *ManualServiceRunRequest) Reset() {
	*x = ManualServiceRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualServiceRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualServiceRunRequest) ProtoMessage() {}

func (x *ManualServiceRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualServiceRunRequest.ProtoReflect.Descriptor instead.
func (*ManualServiceRunRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{105}
}

func (x *ManualServiceRunRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ManualServiceRunRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *ManualServiceRunRequest) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *ManualServiceRunRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ManualServiceRunRequest) GetCommand() string {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return ""
}

func (x *ManualServiceRunRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *ManualServiceRunRequest) GetImage() *AppImage {
	if x != nil {
		return x.Image
	}
	return nil
}

// CancelJobRunRequest is the request object for CancelJobRun
type CancelJobRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the job run
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,3,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// job_run_name is the name of the job run to cancel
	JobRunName string `protobuf:"bytes,4,opt,name=job_run_name,json=jobRunName,proto3" json:"job_run_name,omitempty"`
}

func (x *CancelJobRunRequest) Reset() {
	*x = CancelJobRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelJobRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobRunRequest) ProtoMessage() {}

func (x *CancelJobRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobRunRequest.ProtoReflect.Descriptor instead.
func (*CancelJobRunRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{106}
}

func (x *CancelJobRunRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CancelJobRunRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *CancelJobRunRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *CancelJobRunRequest) GetJobRunName() string {
	if x != nil {
		return x.JobRunName
	}
	return ""
}

// CancelJobRunResponse is the response object for CancelJobRun
type CancelJobRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelJobRunResponse) Reset() {
	*x = CancelJobRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelJobRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobRunResponse) ProtoMessage() {}

func (x *CancelJobRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobRunResponse.ProtoReflect.Descriptor instead.
func (*CancelJobRunResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{107}
}

// ManualServiceRunResponse is the response object for ManualServiceRun
type ManualServiceRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// job_run_id is the id of the job run that was created, if any
	JobRunId string `protobuf:"bytes,1,opt,name=job_run_id,json=jobRunId,proto3" json:"job_run_id,omitempty"`
	// job_run_name is the name of the job run that was created, if any
	JobRunName string `protobuf:"bytes,2,opt,name=job_run_name,json=jobRunName,proto3" json:"job_run_name,omitempty"`
}

func (x *ManualServiceRunResponse) Reset() {
	*x = ManualServiceRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualServiceRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualServiceRunResponse) ProtoMessage() {}

func (x *ManualServiceRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualServiceRunResponse.ProtoReflect.Descriptor instead.
func (*ManualServiceRunResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{108}
}

func (x *ManualServiceRunResponse) GetJobRunId() string {
	if x != nil {
		return x.JobRunId
	}
	return ""
}

func (x *ManualServiceRunResponse) GetJobRunName() string {
	if x != nil {
		return x.JobRunName
	}
	return ""
}

// JobRunStatusRequest is the request object for JobRunStatus
type JobRunStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the job run
	// this is used to retrieve the expected cluster the job run took place in
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,3,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// job_run_name is the name of the job run to query
	JobRunName string `protobuf:"bytes,2,opt,name=job_run_name,json=jobRunName,proto3" json:"job_run_name,omitempty"`
}

func (x *JobRunStatusRequest) Reset() {
	*x = JobRunStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRunStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunStatusRequest) ProtoMessage() {}

func (x *JobRunStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunStatusRequest.ProtoReflect.Descriptor instead.
func (*JobRunStatusRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{109}
}

func (x *JobRunStatusRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *JobRunStatusRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *JobRunStatusRequest) GetJobRunName() string {
	if x != nil {
		return x.JobRunName
	}
	return ""
}

// JobRunStatusResponse is the response object for JobRunStatus
type JobRunStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// job_run is the job run that was requested
	JobRun *JobRun `protobuf:"bytes,1,opt,name=job_run,json=jobRun,proto3" json:"job_run,omitempty"`
}

func (x *JobRunStatusResponse) Reset() {
	*x = JobRunStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRunStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunStatusResponse) ProtoMessage() {}

func (x *JobRunStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunStatusResponse.ProtoReflect.Descriptor instead.
func (*JobRunStatusResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{110}
}

func (x *JobRunStatusResponse) GetJobRun() *JobRun {
	if x != nil {
		return x.JobRun
	}
	return nil
}

// JobRunsRequest is the request object for ListJobRuns
type JobRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// app_name is the name of the app to retrieve the job runs for
	AppName string `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// job_service_name is the name of the job service in the app to retrieve the job runs for
	JobServiceName string `protobuf:"bytes,3,opt,name=job_service_name,json=jobServiceName,proto3" json:"job_service_name,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the app
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,4,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
}

func (x *JobRunsRequest) Reset() {
	*x = JobRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunsRequest) ProtoMessage() {}

func (x *JobRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunsRequest.ProtoReflect.Descriptor instead.
func (*JobRunsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{111}
}

func (x *JobRunsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *JobRunsRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *JobRunsRequest) GetJobServiceName() string {
	if x != nil {
		return x.JobServiceName
	}
	return ""
}

func (x *JobRunsRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

// JobRunsResponse is the response object for ListJobRuns
type JobRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// job_runs is the list of job runs for the given app and job
	JobRuns []*JobRun `protobuf:"bytes,1,rep,name=job_runs,json=jobRuns,proto3" json:"job_runs,omitempty"`
}

func (x *JobRunsResponse) Reset() {
	*x = JobRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunsResponse) ProtoMessage() {}

func (x *JobRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunsResponse.ProtoReflect.Descriptor instead.
func (*JobRunsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{112}
}

func (x *JobRunsResponse) GetJobRuns() []*JobRun {
	if x != nil {
		return x.JobRuns
	}
	return nil
}

// ImagesRequest is the request object for listing images
type ImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ImagesRequest) Reset() {
	*x = ImagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagesRequest) ProtoMessage() {}

func (x *ImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagesRequest.ProtoReflect.Descriptor instead.
func (*ImagesRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{113}
}

func (x *ImagesRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// ImagesResponse is the response object for listing images
type ImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images []*ImageInfo `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *ImagesResponse) Reset() {
	*x = ImagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagesResponse) ProtoMessage() {}

func (x *ImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagesResponse.ProtoReflect.Descriptor instead.
func (*ImagesResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{114}
}

func (x *ImagesResponse) GetImages() []*ImageInfo {
	if x != nil {
		return x.Images
	}
	return nil
}

// CreateAppInstanceRequest is the request object for creating an app instance
type CreateAppInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	AppName   string `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target where the app is installed.
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,3,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	PorterAppId                int64                       `protobuf:"varint,4,opt,name=porter_app_id,json=porterAppId,proto3" json:"porter_app_id,omitempty"`
}

func (x *CreateAppInstanceRequest) Reset() {
	*x = CreateAppInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppInstanceRequest) ProtoMessage() {}

func (x *CreateAppInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreateAppInstanceRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{115}
}

func (x *CreateAppInstanceRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateAppInstanceRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *CreateAppInstanceRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *CreateAppInstanceRequest) GetPorterAppId() int64 {
	if x != nil {
		return x.PorterAppId
	}
	return 0
}

// CreateAppInstanceResponse is the response object for creating an app instance
type CreateAppInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppInstanceId string `protobuf:"bytes,1,opt,name=app_instance_id,json=appInstanceId,proto3" json:"app_instance_id,omitempty"`
}

func (x *CreateAppInstanceResponse) Reset() {
	*x = CreateAppInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppInstanceResponse) ProtoMessage() {}

func (x *CreateAppInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppInstanceResponse.ProtoReflect.Descriptor instead.
func (*CreateAppInstanceResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{116}
}

func (x *CreateAppInstanceResponse) GetAppInstanceId() string {
	if x != nil {
		return x.AppInstanceId
	}
	return ""
}

// DeleteAppInstanceRequest is the request object for deleting an app instance
type DeleteAppInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	AppName   string `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target where the app is installed.
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,3,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
}

func (x *DeleteAppInstanceRequest) Reset() {
	*x = DeleteAppInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppInstanceRequest) ProtoMessage() {}

func (x *DeleteAppInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppInstanceRequest.ProtoReflect.Descriptor instead.
func (*DeleteAppInstanceRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{117}
}

func (x *DeleteAppInstanceRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteAppInstanceRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *DeleteAppInstanceRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

// DeleteAppInstanceResponse is the response object for deleting an app instance
type DeleteAppInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAppInstanceResponse) Reset() {
	*x = DeleteAppInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppInstanceResponse) ProtoMessage() {}

func (x *DeleteAppInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppInstanceResponse.ProtoReflect.Descriptor instead.
func (*DeleteAppInstanceResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{118}
}

// ListAppInstanceRequest is the request object for listing app instances
type ListAppInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target where the app is installed. It is optional.
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,2,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
}

func (x *ListAppInstancesRequest) Reset() {
	*x = ListAppInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAppInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAppInstancesRequest) ProtoMessage() {}

func (x *ListAppInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAppInstancesRequest.ProtoReflect.Descriptor instead.
func (*ListAppInstancesRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{119}
}

func (x *ListAppInstancesRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListAppInstancesRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

// ListAppInstancesResponse is the response object for listing app instances
type ListAppInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppInstances []*AppInstance `protobuf:"bytes,1,rep,name=app_instances,json=appInstances,proto3" json:"app_instances,omitempty"`
}

func (x *ListAppInstancesResponse) Reset() {
	*x = ListAppInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAppInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAppInstancesResponse) ProtoMessage() {}

func (x *ListAppInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAppInstancesResponse.ProtoReflect.Descriptor instead.
func (*ListAppInstancesResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{120}
}

func (x *ListAppInstancesResponse) GetAppInstances() []*AppInstance {
	if x != nil {
		return x.AppInstances
	}
	return nil
}

// TemplateAppManifestsRequest is the request object for retrieving the manifests for a given app definition
type TemplateAppManifestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cluster_id is the id of the cluster where the app is installed, presumably in the default deployment target. Ignored if deployment_target_identifier is provided.
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the app
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,3,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// app_name is the name of the app to retrieve the manifests for
	// the latest successful revision of the app will be used
	AppName string `protobuf:"bytes,4,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *TemplateAppManifestsRequest) Reset() {
	*x = TemplateAppManifestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateAppManifestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateAppManifestsRequest) ProtoMessage() {}

func (x *TemplateAppManifestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateAppManifestsRequest.ProtoReflect.Descriptor instead.
func (*TemplateAppManifestsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{121}
}

func (x *TemplateAppManifestsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *TemplateAppManifestsRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *TemplateAppManifestsRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *TemplateAppManifestsRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

// TemplateAppManifestsResponse is the response object for retrieving the manifests for a given app definition
type TemplateAppManifestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base64_manifests is the base64-encoded, stringified manifests for the app
	Base64Manifests string `protobuf:"bytes,1,opt,name=base64_manifests,json=base64Manifests,proto3" json:"base64_manifests,omitempty"`
}

func (x *TemplateAppManifestsResponse) Reset() {
	*x = TemplateAppManifestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateAppManifestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateAppManifestsResponse) ProtoMessage() {}

func (x *TemplateAppManifestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateAppManifestsResponse.ProtoReflect.Descriptor instead.
func (*TemplateAppManifestsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{122}
}

func (x *TemplateAppManifestsResponse) GetBase64Manifests() string {
	if x != nil {
		return x.Base64Manifests
	}
	return ""
}

type AppInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the id of the app instance
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name is the name of the app instance
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// deployment_target_id is the id of the deployment target where the app is installed
	DeploymentTargetId string `protobuf:"bytes,3,opt,name=deployment_target_id,json=deploymentTargetId,proto3" json:"deployment_target_id,omitempty"`
	// porter_app_id is the id of the porter app
	PorterAppId int64 `protobuf:"varint,4,opt,name=porter_app_id,json=porterAppId,proto3" json:"porter_app_id,omitempty"`
}

func (x *AppInstance) Reset() {
	*x = AppInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppInstance) ProtoMessage() {}

func (x *AppInstance) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppInstance.ProtoReflect.Descriptor instead.
func (*AppInstance) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{123}
}

func (x *AppInstance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppInstance) GetDeploymentTargetId() string {
	if x != nil {
		return x.DeploymentTargetId
	}
	return ""
}

func (x *AppInstance) GetPorterAppId() int64 {
	if x != nil {
		return x.PorterAppId
	}
	return 0
}

// CreateNotificationRequest is the request object for creating notifications
type CreateNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the app
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,3,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// app_name is the name of the app
	AppName string `protobuf:"bytes,4,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// service_name is the name of the service of the app that the notification corresponds with
	ServiceName string `protobuf:"bytes,5,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// app_revision_id is the revision id of the app that the notification corresponds with
	AppRevisionId string `protobuf:"bytes,6,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
	// porter_agent_event_id is the id of the event that triggers the porter agent. This field is used to dedupe notifications
	PorterAgentEventId int64 `protobuf:"varint,7,opt,name=porter_agent_event_id,json=porterAgentEventId,proto3" json:"porter_agent_event_id,omitempty"`
	// raw_summary is the raw summary of the notification, used to determine an error code and then converted to a human readable form
	RawSummary string `protobuf:"bytes,8,opt,name=raw_summary,json=rawSummary,proto3" json:"raw_summary,omitempty"`
	// raw_detail is the raw detail of the notification, used to determine an error code and then converted to a human readable form
	RawDetail string `protobuf:"bytes,9,opt,name=raw_detail,json=rawDetail,proto3" json:"raw_detail,omitempty"`
	// job_run_id is the id of the job run, if the service is a job type service
	JobRunId string `protobuf:"bytes,10,opt,name=job_run_id,json=jobRunId,proto3" json:"job_run_id,omitempty"`
	// app_event_type is the type of event generating the request
	AppEventType AppEventType `protobuf:"varint,11,opt,name=app_event_type,json=appEventType,proto3,enum=porter.v1.AppEventType" json:"app_event_type,omitempty"`
}

func (x *CreateNotificationRequest) Reset() {
	*x = CreateNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotificationRequest) ProtoMessage() {}

func (x *CreateNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotificationRequest.ProtoReflect.Descriptor instead.
func (*CreateNotificationRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{124}
}

func (x *CreateNotificationRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateNotificationRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *CreateNotificationRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *CreateNotificationRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *CreateNotificationRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *CreateNotificationRequest) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

func (x *CreateNotificationRequest) GetPorterAgentEventId() int64 {
	if x != nil {
		return x.PorterAgentEventId
	}
	return 0
}

func (x *CreateNotificationRequest) GetRawSummary() string {
	if x != nil {
		return x.RawSummary
	}
	return ""
}

func (x *CreateNotificationRequest) GetRawDetail() string {
	if x != nil {
		return x.RawDetail
	}
	return ""
}

func (x *CreateNotificationRequest) GetJobRunId() string {
	if x != nil {
		return x.JobRunId
	}
	return ""
}

func (x *CreateNotificationRequest) GetAppEventType() AppEventType {
	if x != nil {
		return x.AppEventType
	}
	return AppEventType_APP_EVENT_TYPE_UNSPECIFIED
}

// CreateNotificationResponse is the response object for creating notifications
type CreateNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateNotificationResponse) Reset() {
	*x = CreateNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotificationResponse) ProtoMessage() {}

func (x *CreateNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotificationResponse.ProtoReflect.Descriptor instead.
func (*CreateNotificationResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{125}
}

// UpdateServiceDeploymentStatusRequest is the request object for updating the deployment status of a service
type UpdateServiceDeploymentStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target for the app
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,2,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// app_name is the name of the app
	AppName string `protobuf:"bytes,3,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// app_revision_id is the revision id of the app that the deployment corresponds with
	AppRevisionId string `protobuf:"bytes,4,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
	// service_name is the name of the service
	ServiceName string `protobuf:"bytes,5,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// status is the status to update the service deployment to
	Status EnumServiceDeploymentStatus `protobuf:"varint,6,opt,name=status,proto3,enum=porter.v1.EnumServiceDeploymentStatus" json:"status,omitempty"`
}

func (x *UpdateServiceDeploymentStatusRequest) Reset() {
	*x = UpdateServiceDeploymentStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServiceDeploymentStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceDeploymentStatusRequest) ProtoMessage() {}

func (x *UpdateServiceDeploymentStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceDeploymentStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceDeploymentStatusRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{126}
}

func (x *UpdateServiceDeploymentStatusRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateServiceDeploymentStatusRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *UpdateServiceDeploymentStatusRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *UpdateServiceDeploymentStatusRequest) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

func (x *UpdateServiceDeploymentStatusRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *UpdateServiceDeploymentStatusRequest) GetStatus() EnumServiceDeploymentStatus {
	if x != nil {
		return x.Status
	}
	return EnumServiceDeploymentStatus_ENUM_SERVICE_DEPLOYMENT_STATUS_UNSPECIFIED
}

// RecordPrometheusAlertRequest is sent to record an alert sent from prometheus
type RecordPrometheusAlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64    `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64    `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	Alerts    []*Alert `protobuf:"bytes,3,rep,name=alerts,proto3" json:"alerts,omitempty"`
}

func (x *RecordPrometheusAlertRequest) Reset() {
	*x = RecordPrometheusAlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordPrometheusAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPrometheusAlertRequest) ProtoMessage() {}

func (x *RecordPrometheusAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPrometheusAlertRequest.ProtoReflect.Descriptor instead.
func (*RecordPrometheusAlertRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{127}
}

func (x *RecordPrometheusAlertRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *RecordPrometheusAlertRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *RecordPrometheusAlertRequest) GetAlerts() []*Alert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

// RecordPrometheusAlertResponse is the response to a RecordPrometheusAlert request
type RecordPrometheusAlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// error if recording failed
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RecordPrometheusAlertResponse) Reset() {
	*x = RecordPrometheusAlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordPrometheusAlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPrometheusAlertResponse) ProtoMessage() {}

func (x *RecordPrometheusAlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPrometheusAlertResponse.ProtoReflect.Descriptor instead.
func (*RecordPrometheusAlertResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{128}
}

func (x *RecordPrometheusAlertResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// UpdateServiceDeploymentStatusResponse is the response object for updating the deployment status of a service
type UpdateServiceDeploymentStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateServiceDeploymentStatusResponse) Reset() {
	*x = UpdateServiceDeploymentStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServiceDeploymentStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceDeploymentStatusResponse) ProtoMessage() {}

func (x *UpdateServiceDeploymentStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceDeploymentStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateServiceDeploymentStatusResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{129}
}

// AreExternalEnvGroupProvidersEnabledRequest is the request object AreExternalEnvGroupProvidersEnabled
type AreExternalEnvGroupProvidersEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project in which to check whether external env group providers are enabled
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cluster_id is the id of the cluster in which to check whether external env group providers are enabled
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *AreExternalEnvGroupProvidersEnabledRequest) Reset() {
	*x = AreExternalEnvGroupProvidersEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreExternalEnvGroupProvidersEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreExternalEnvGroupProvidersEnabledRequest) ProtoMessage() {}

func (x *AreExternalEnvGroupProvidersEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreExternalEnvGroupProvidersEnabledRequest.ProtoReflect.Descriptor instead.
func (*AreExternalEnvGroupProvidersEnabledRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{130}
}

func (x *AreExternalEnvGroupProvidersEnabledRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AreExternalEnvGroupProvidersEnabledRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

// AreExternalEnvGroupProvidersEnabledResponse is the response object for AreExternalEnvGroupProvidersEnabled
type AreExternalEnvGroupProvidersEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enabled is a flag that indicates whether external env group providers are enabled
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// reprovision_required is a flag that indicates whether the cluster needs to be reprovisioned to enable external env group providers
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	ReprovisionRequired bool `protobuf:"varint,2,opt,name=reprovision_required,json=reprovisionRequired,proto3" json:"reprovision_required,omitempty"`
	// k8s_upgrade_required is a flag that indicates whether the cluster needs to be upgraded to enable external env group providers
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	K8SUpgradeRequired bool `protobuf:"varint,3,opt,name=k8s_upgrade_required,json=k8sUpgradeRequired,proto3" json:"k8s_upgrade_required,omitempty"`
	// operators is the list of external env group operators that are enabled
	Operators []*ExternalEnvGroupProviderEnabledStatus `protobuf:"bytes,4,rep,name=operators,proto3" json:"operators,omitempty"`
}

func (x *AreExternalEnvGroupProvidersEnabledResponse) Reset() {
	*x = AreExternalEnvGroupProvidersEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreExternalEnvGroupProvidersEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreExternalEnvGroupProvidersEnabledResponse) ProtoMessage() {}

func (x *AreExternalEnvGroupProvidersEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreExternalEnvGroupProvidersEnabledResponse.ProtoReflect.Descriptor instead.
func (*AreExternalEnvGroupProvidersEnabledResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{131}
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *AreExternalEnvGroupProvidersEnabledResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *AreExternalEnvGroupProvidersEnabledResponse) GetReprovisionRequired() bool {
	if x != nil {
		return x.ReprovisionRequired
	}
	return false
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *AreExternalEnvGroupProvidersEnabledResponse) GetK8SUpgradeRequired() bool {
	if x != nil {
		return x.K8SUpgradeRequired
	}
	return false
}

func (x *AreExternalEnvGroupProvidersEnabledResponse) GetOperators() []*ExternalEnvGroupProviderEnabledStatus {
	if x != nil {
		return x.Operators
	}
	return nil
}

// EnableExternalEnvGroupProvidersRequest is the request object for EnableExternalEnvGroupProviders
type EnableExternalEnvGroupProvidersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project where external env group providers should be enabled
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cluster_id is the id of the cluster where external env group providers should be enabled
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *EnableExternalEnvGroupProvidersRequest) Reset() {
	*x = EnableExternalEnvGroupProvidersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableExternalEnvGroupProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableExternalEnvGroupProvidersRequest) ProtoMessage() {}

func (x *EnableExternalEnvGroupProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableExternalEnvGroupProvidersRequest.ProtoReflect.Descriptor instead.
func (*EnableExternalEnvGroupProvidersRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{132}
}

func (x *EnableExternalEnvGroupProvidersRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *EnableExternalEnvGroupProvidersRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

// EnableExternalEnvGroupProvidersResponse is the response object for EnableExternalEnvGroupProviders
type EnableExternalEnvGroupProvidersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableExternalEnvGroupProvidersResponse) Reset() {
	*x = EnableExternalEnvGroupProvidersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableExternalEnvGroupProvidersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableExternalEnvGroupProvidersResponse) ProtoMessage() {}

func (x *EnableExternalEnvGroupProvidersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableExternalEnvGroupProvidersResponse.ProtoReflect.Descriptor instead.
func (*EnableExternalEnvGroupProvidersResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{133}
}

// CreateOrUpdateEnvGroupRequest is the request object for CreateOrUpdateEnvGroup
type CreateOrUpdateEnvGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project where the env group will be created
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cluster_id is the id of the cluster where the env group will be created
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// env_group_provider_type is the type of provider for the env group
	EnvGroupProviderType EnumEnvGroupProviderType `protobuf:"varint,3,opt,name=env_group_provider_type,json=envGroupProviderType,proto3,enum=porter.v1.EnumEnvGroupProviderType" json:"env_group_provider_type,omitempty"`
	// env_group_name is the name of the env group
	EnvGroupName string `protobuf:"bytes,4,opt,name=env_group_name,json=envGroupName,proto3" json:"env_group_name,omitempty"`
	// env_group_auth_token is the auth token for the env group. Not required for Porter env groups.
	EnvGroupAuthToken string `protobuf:"bytes,5,opt,name=env_group_auth_token,json=envGroupAuthToken,proto3" json:"env_group_auth_token,omitempty"`
	// env_vars is the set of environment variables to create or update the env group with
	EnvVars *EnvGroupVariables `protobuf:"bytes,6,opt,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty"`
	// is_env_override indicates whether the provided env_vars should override or merge with the existing env vars
	IsEnvOverride bool `protobuf:"varint,7,opt,name=is_env_override,json=isEnvOverride,proto3" json:"is_env_override,omitempty"`
	// env_variable_deletions contains the keys to remove from the env group's normal and secret environment variables
	EnvVariableDeletions *EnvVariableDeletions `protobuf:"bytes,8,opt,name=env_variable_deletions,json=envVariableDeletions,proto3" json:"env_variable_deletions,omitempty"`
	// skip_app_auto_deploy indicates whether to skip auto-deploying apps linked to the env group
	SkipAppAutoDeploy bool `protobuf:"varint,9,opt,name=skip_app_auto_deploy,json=skipAppAutoDeploy,proto3" json:"skip_app_auto_deploy,omitempty"`
	// infisical_env specifies where to pull the env vars from in Infisical, if applicable
	InfisicalEnv *InfisicalEnv `protobuf:"bytes,10,opt,name=infisical_env,json=infisicalEnv,proto3" json:"infisical_env,omitempty"`
}

func (x *CreateOrUpdateEnvGroupRequest) Reset() {
	*x = CreateOrUpdateEnvGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateEnvGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateEnvGroupRequest) ProtoMessage() {}

func (x *CreateOrUpdateEnvGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateEnvGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateEnvGroupRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{134}
}

func (x *CreateOrUpdateEnvGroupRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateOrUpdateEnvGroupRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *CreateOrUpdateEnvGroupRequest) GetEnvGroupProviderType() EnumEnvGroupProviderType {
	if x != nil {
		return x.EnvGroupProviderType
	}
	return EnumEnvGroupProviderType_ENUM_ENV_GROUP_PROVIDER_TYPE_UNSPECIFIED
}

func (x *CreateOrUpdateEnvGroupRequest) GetEnvGroupName() string {
	if x != nil {
		return x.EnvGroupName
	}
	return ""
}

func (x *CreateOrUpdateEnvGroupRequest) GetEnvGroupAuthToken() string {
	if x != nil {
		return x.EnvGroupAuthToken
	}
	return ""
}

func (x *CreateOrUpdateEnvGroupRequest) GetEnvVars() *EnvGroupVariables {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

func (x *CreateOrUpdateEnvGroupRequest) GetIsEnvOverride() bool {
	if x != nil {
		return x.IsEnvOverride
	}
	return false
}

func (x *CreateOrUpdateEnvGroupRequest) GetEnvVariableDeletions() *EnvVariableDeletions {
	if x != nil {
		return x.EnvVariableDeletions
	}
	return nil
}

func (x *CreateOrUpdateEnvGroupRequest) GetSkipAppAutoDeploy() bool {
	if x != nil {
		return x.SkipAppAutoDeploy
	}
	return false
}

func (x *CreateOrUpdateEnvGroupRequest) GetInfisicalEnv() *InfisicalEnv {
	if x != nil {
		return x.InfisicalEnv
	}
	return nil
}

// CreateOrUpdateEnvGroupResponse is the response object for CreateOrUpdateEnvGroup
type CreateOrUpdateEnvGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateOrUpdateEnvGroupResponse) Reset() {
	*x = CreateOrUpdateEnvGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateEnvGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateEnvGroupResponse) ProtoMessage() {}

func (x *CreateOrUpdateEnvGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateEnvGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateEnvGroupResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{135}
}

// DeleteEnvGroupRequest is the request object for DeleteEnvGroup
type DeleteEnvGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project where the env group will be deleted
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cluster_id is the id of the cluster where the env group will be deleted
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// env_group_provider_type is the type of provider for the env group
	EnvGroupProviderType EnumEnvGroupProviderType `protobuf:"varint,3,opt,name=env_group_provider_type,json=envGroupProviderType,proto3,enum=porter.v1.EnumEnvGroupProviderType" json:"env_group_provider_type,omitempty"`
	// env_group_name is the name of the env group to delete
	EnvGroupName string `protobuf:"bytes,4,opt,name=env_group_name,json=envGroupName,proto3" json:"env_group_name,omitempty"`
}

func (x *DeleteEnvGroupRequest) Reset() {
	*x = DeleteEnvGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEnvGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEnvGroupRequest) ProtoMessage() {}

func (x *DeleteEnvGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEnvGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteEnvGroupRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{136}
}

func (x *DeleteEnvGroupRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteEnvGroupRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *DeleteEnvGroupRequest) GetEnvGroupProviderType() EnumEnvGroupProviderType {
	if x != nil {
		return x.EnvGroupProviderType
	}
	return EnumEnvGroupProviderType_ENUM_ENV_GROUP_PROVIDER_TYPE_UNSPECIFIED
}

func (x *DeleteEnvGroupRequest) GetEnvGroupName() string {
	if x != nil {
		return x.EnvGroupName
	}
	return ""
}

// DeleteEnvGroupResponse is the response object for DeleteEnvGroup
type DeleteEnvGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteEnvGroupResponse) Reset() {
	*x = DeleteEnvGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEnvGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEnvGroupResponse) ProtoMessage() {}

func (x *DeleteEnvGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEnvGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteEnvGroupResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{137}
}

// AppsLinkedToEnvGroupRequest is the request object for AppsLinkedToEnvGroup
type AppsLinkedToEnvGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project where the env group is installed
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cluster_id is the id of the cluster where the env group is installed
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// env_group_name is the name of the env group
	EnvGroupName string `protobuf:"bytes,3,opt,name=env_group_name,json=envGroupName,proto3" json:"env_group_name,omitempty"`
	// ignore_preview indicates whether to ignore apps in preview deployment targets
	IgnorePreview bool `protobuf:"varint,4,opt,name=ignore_preview,json=ignorePreview,proto3" json:"ignore_preview,omitempty"`
}

func (x *AppsLinkedToEnvGroupRequest) Reset() {
	*x = AppsLinkedToEnvGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppsLinkedToEnvGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppsLinkedToEnvGroupRequest) ProtoMessage() {}

func (x *AppsLinkedToEnvGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppsLinkedToEnvGroupRequest.ProtoReflect.Descriptor instead.
func (*AppsLinkedToEnvGroupRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{138}
}

func (x *AppsLinkedToEnvGroupRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AppsLinkedToEnvGroupRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *AppsLinkedToEnvGroupRequest) GetEnvGroupName() string {
	if x != nil {
		return x.EnvGroupName
	}
	return ""
}

func (x *AppsLinkedToEnvGroupRequest) GetIgnorePreview() bool {
	if x != nil {
		return x.IgnorePreview
	}
	return false
}

// AppsLinkedToEnvGroupResponse is the response object for AppsLinkedToEnvGroup
type AppsLinkedToEnvGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// env_group_name is the name of the env group
	EnvGroupName string `protobuf:"bytes,1,opt,name=env_group_name,json=envGroupName,proto3" json:"env_group_name,omitempty"`
	// linked_apps is the list of apps linked to the env group
	LinkedApps []*AppInstance `protobuf:"bytes,2,rep,name=linked_apps,json=linkedApps,proto3" json:"linked_apps,omitempty"`
}

func (x *AppsLinkedToEnvGroupResponse) Reset() {
	*x = AppsLinkedToEnvGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppsLinkedToEnvGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppsLinkedToEnvGroupResponse) ProtoMessage() {}

func (x *AppsLinkedToEnvGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppsLinkedToEnvGroupResponse.ProtoReflect.Descriptor instead.
func (*AppsLinkedToEnvGroupResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{139}
}

func (x *AppsLinkedToEnvGroupResponse) GetEnvGroupName() string {
	if x != nil {
		return x.EnvGroupName
	}
	return ""
}

func (x *AppsLinkedToEnvGroupResponse) GetLinkedApps() []*AppInstance {
	if x != nil {
		return x.LinkedApps
	}
	return nil
}

// ListEnvGroupsRequest is the request object for ListEnvGroups.
type ListEnvGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project where the env group is installed
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cluster_id is the id of the cluster where the env group is installed
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// include_secrets indicates whether to include secret values in the response. If false, the values will be replaced with a placeholder.
	IncludeSecrets bool `protobuf:"varint,3,opt,name=include_secrets,json=includeSecrets,proto3" json:"include_secrets,omitempty"`
}

func (x *ListEnvGroupsRequest) Reset() {
	*x = ListEnvGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnvGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnvGroupsRequest) ProtoMessage() {}

func (x *ListEnvGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnvGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListEnvGroupsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{140}
}

func (x *ListEnvGroupsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListEnvGroupsRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *ListEnvGroupsRequest) GetIncludeSecrets() bool {
	if x != nil {
		return x.IncludeSecrets
	}
	return false
}

// ListEnvGroupsResponse is the response object for ListEnvGroups
type ListEnvGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// env_groups is the list of env groups installed in the cluster
	EnvGroups []*EnvGroup `protobuf:"bytes,1,rep,name=env_groups,json=envGroups,proto3" json:"env_groups,omitempty"`
}

func (x *ListEnvGroupsResponse) Reset() {
	*x = ListEnvGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnvGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnvGroupsResponse) ProtoMessage() {}

func (x *ListEnvGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnvGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListEnvGroupsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{141}
}

func (x *ListEnvGroupsResponse) GetEnvGroups() []*EnvGroup {
	if x != nil {
		return x.EnvGroups
	}
	return nil
}

// UpdateNotificationConfigRequest is the request object for UpdateNotificationConfig.
type UpdateNotificationConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project where the notification config is created
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// notification_config_id is the id of config. If 0, a new config will be created
	NotificationConfigId int64 `protobuf:"varint,2,opt,name=notification_config_id,json=notificationConfigId,proto3" json:"notification_config_id,omitempty"`
	// config is the config to update
	Config *NotificationConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	// slack_integration_id is the id of the slack integration to update with the notification_config_id, if any
	SlackIntegrationId int64 `protobuf:"varint,4,opt,name=slack_integration_id,json=slackIntegrationId,proto3" json:"slack_integration_id,omitempty"`
}

func (x *UpdateNotificationConfigRequest) Reset() {
	*x = UpdateNotificationConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotificationConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotificationConfigRequest) ProtoMessage() {}

func (x *UpdateNotificationConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotificationConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateNotificationConfigRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{142}
}

func (x *UpdateNotificationConfigRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateNotificationConfigRequest) GetNotificationConfigId() int64 {
	if x != nil {
		return x.NotificationConfigId
	}
	return 0
}

func (x *UpdateNotificationConfigRequest) GetConfig() *NotificationConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateNotificationConfigRequest) GetSlackIntegrationId() int64 {
	if x != nil {
		return x.SlackIntegrationId
	}
	return 0
}

// UpdateNotificationConfigResponse is the response object for UpdateNotificationConfig
type UpdateNotificationConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// env_groups is the list of env groups installed in the cluster
	NotificationConfigId int64 `protobuf:"varint,1,opt,name=notification_config_id,json=notificationConfigId,proto3" json:"notification_config_id,omitempty"`
}

func (x *UpdateNotificationConfigResponse) Reset() {
	*x = UpdateNotificationConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotificationConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotificationConfigResponse) ProtoMessage() {}

func (x *UpdateNotificationConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotificationConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateNotificationConfigResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{143}
}

func (x *UpdateNotificationConfigResponse) GetNotificationConfigId() int64 {
	if x != nil {
		return x.NotificationConfigId
	}
	return 0
}

// NotificationConfigRequest is the request object for NotificationConfig.
type NotificationConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project where the notification config is created
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// notification_config_id is the id of the notfication config
	NotificationConfigId int64 `protobuf:"varint,2,opt,name=notification_config_id,json=notificationConfigId,proto3" json:"notification_config_id,omitempty"`
}

func (x *NotificationConfigRequest) Reset() {
	*x = NotificationConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationConfigRequest) ProtoMessage() {}

func (x *NotificationConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationConfigRequest.ProtoReflect.Descriptor instead.
func (*NotificationConfigRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{144}
}

func (x *NotificationConfigRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *NotificationConfigRequest) GetNotificationConfigId() int64 {
	if x != nil {
		return x.NotificationConfigId
	}
	return 0
}

// NotificationConfigResponse is the response object for NotificationConfig
type NotificationConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// config is the notification config object
	Config *NotificationConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *NotificationConfigResponse) Reset() {
	*x = NotificationConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationConfigResponse) ProtoMessage() {}

func (x *NotificationConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationConfigResponse.ProtoReflect.Descriptor instead.
func (*NotificationConfigResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{145}
}

func (x *NotificationConfigResponse) GetConfig() *NotificationConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// ConnectHostedProjectRequest is the request object for connecting a hosted project to a host cluster
type ConnectHostedProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the project id of the new hosted project which should be connected to the host cluster
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ConnectHostedProjectRequest) Reset() {
	*x = ConnectHostedProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectHostedProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectHostedProjectRequest) ProtoMessage() {}

func (x *ConnectHostedProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectHostedProjectRequest.ProtoReflect.Descriptor instead.
func (*ConnectHostedProjectRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{146}
}

func (x *ConnectHostedProjectRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// ConnectHostedProjectResponse is the response object for connecting a hosted project to a host cluster
type ConnectHostedProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster_id is the id of the symbolic hosted cluster linked to the host cluster
	ClusterId int64 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *ConnectHostedProjectResponse) Reset() {
	*x = ConnectHostedProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectHostedProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectHostedProjectResponse) ProtoMessage() {}

func (x *ConnectHostedProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectHostedProjectResponse.ProtoReflect.Descriptor instead.
func (*ConnectHostedProjectResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{147}
}

func (x *ConnectHostedProjectResponse) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

// UpdateDatastoreRequest is the request object for creating or updating a datastore
type UpdateDatastoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the project id that the datastore is provisioned in
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// datastore_id is the id of the datastore. Deprecated; use datastore instead
	//
	// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
	DatastoreId string `protobuf:"bytes,2,opt,name=datastore_id,json=datastoreId,proto3" json:"datastore_id,omitempty"`
	// datastore is the datastore to create or update. If the datastore that is submitted does not have an ID, then a new datastore will be created; otherwise, the datastore matching the ID will be updated
	Datastore *ManagedDatastore `protobuf:"bytes,3,opt,name=datastore,proto3" json:"datastore,omitempty"`
}

func (x *UpdateDatastoreRequest) Reset() {
	*x = UpdateDatastoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatastoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatastoreRequest) ProtoMessage() {}

func (x *UpdateDatastoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatastoreRequest.ProtoReflect.Descriptor instead.
func (*UpdateDatastoreRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{148}
}

func (x *UpdateDatastoreRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
func (x *UpdateDatastoreRequest) GetDatastoreId() string {
	if x != nil {
		return x.DatastoreId
	}
	return ""
}

func (x *UpdateDatastoreRequest) GetDatastore() *ManagedDatastore {
	if x != nil {
		return x.Datastore
	}
	return nil
}

// UpdateDatastoreResponse is the response object for updating a datastore
type UpdateDatastoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDatastoreResponse) Reset() {
	*x = UpdateDatastoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDatastoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDatastoreResponse) ProtoMessage() {}

func (x *UpdateDatastoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDatastoreResponse.ProtoReflect.Descriptor instead.
func (*UpdateDatastoreResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{149}
}

// DeleteDatastoreRequest is the request object for deleting a datastore
type DeleteDatastoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the project id that the datastore is provisioned in
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// datastore_id is the id of the datastore
	DatastoreId string `protobuf:"bytes,2,opt,name=datastore_id,json=datastoreId,proto3" json:"datastore_id,omitempty"`
}

func (x *DeleteDatastoreRequest) Reset() {
	*x = DeleteDatastoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatastoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatastoreRequest) ProtoMessage() {}

func (x *DeleteDatastoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatastoreRequest.ProtoReflect.Descriptor instead.
func (*DeleteDatastoreRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{150}
}

func (x *DeleteDatastoreRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteDatastoreRequest) GetDatastoreId() string {
	if x != nil {
		return x.DatastoreId
	}
	return ""
}

// DeleteDatastoreResponse is the response object for deleting a datastore
type DeleteDatastoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDatastoreResponse) Reset() {
	*x = DeleteDatastoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDatastoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDatastoreResponse) ProtoMessage() {}

func (x *DeleteDatastoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDatastoreResponse.ProtoReflect.Descriptor instead.
func (*DeleteDatastoreResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{151}
}

// CreateDatastoreProxyRequest is the request object for creating a datastore proxy
type CreateDatastoreProxyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the project id that the datastore is provisioned in
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// datastore_id is the id of the datastore
	DatastoreId string `protobuf:"bytes,2,opt,name=datastore_id,json=datastoreId,proto3" json:"datastore_id,omitempty"`
}

func (x *CreateDatastoreProxyRequest) Reset() {
	*x = CreateDatastoreProxyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDatastoreProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatastoreProxyRequest) ProtoMessage() {}

func (x *CreateDatastoreProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatastoreProxyRequest.ProtoReflect.Descriptor instead.
func (*CreateDatastoreProxyRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{152}
}

func (x *CreateDatastoreProxyRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateDatastoreProxyRequest) GetDatastoreId() string {
	if x != nil {
		return x.DatastoreId
	}
	return ""
}

// CreateDatastoreProxyResponse is the response object for creating a datastore proxy
type CreateDatastoreProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pod_name is the name of the pod that was created
	PodName string `protobuf:"bytes,1,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	// credential is the credential used to connect to the datastore
	Credential *DatastoreCredential `protobuf:"bytes,2,opt,name=credential,proto3" json:"credential,omitempty"`
	// cluster_id is the id of the cluster that the pod was created in
	ClusterId int64 `protobuf:"varint,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// namespace is the namespace that the pod was created in
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *CreateDatastoreProxyResponse) Reset() {
	*x = CreateDatastoreProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDatastoreProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatastoreProxyResponse) ProtoMessage() {}

func (x *CreateDatastoreProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatastoreProxyResponse.ProtoReflect.Descriptor instead.
func (*CreateDatastoreProxyResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{153}
}

func (x *CreateDatastoreProxyResponse) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *CreateDatastoreProxyResponse) GetCredential() *DatastoreCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *CreateDatastoreProxyResponse) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *CreateDatastoreProxyResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// DatastoreCredentialRequest is the request object for getting a set of datastore credentials
type DatastoreCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// datastore_id is the id of the datastore
	DatastoreId string `protobuf:"bytes,2,opt,name=datastore_id,json=datastoreId,proto3" json:"datastore_id,omitempty"`
}

func (x *DatastoreCredentialRequest) Reset() {
	*x = DatastoreCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatastoreCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatastoreCredentialRequest) ProtoMessage() {}

func (x *DatastoreCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatastoreCredentialRequest.ProtoReflect.Descriptor instead.
func (*DatastoreCredentialRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{154}
}

func (x *DatastoreCredentialRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DatastoreCredentialRequest) GetDatastoreId() string {
	if x != nil {
		return x.DatastoreId
	}
	return ""
}

// DatastoreCredentialResponse is the response object from getting a set of datastore credentials
type DatastoreCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential *DatastoreCredential `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *DatastoreCredentialResponse) Reset() {
	*x = DatastoreCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatastoreCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatastoreCredentialResponse) ProtoMessage() {}

func (x *DatastoreCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatastoreCredentialResponse.ProtoReflect.Descriptor instead.
func (*DatastoreCredentialResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{155}
}

func (x *DatastoreCredentialResponse) GetCredential() *DatastoreCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

// PatchCloudContractRequest is the request object for patching a cloud contract by updating a resource
type PatchCloudContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// operation describes the type of the update
	Operation EnumPatchCloudContractOperation `protobuf:"varint,2,opt,name=operation,proto3,enum=porter.v1.EnumPatchCloudContractOperation" json:"operation,omitempty"`
	// resource_id is the id of the resource we want to update
	ResourceId string `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// resource_type is the type of the resource we want to update
	ResourceType EnumPatchCloudContractType `protobuf:"varint,4,opt,name=resource_type,json=resourceType,proto3,enum=porter.v1.EnumPatchCloudContractType" json:"resource_type,omitempty"`
	// resource_values is the values we will use to make the update
	//
	// Types that are assignable to ResourceValues:
	//
	//	*PatchCloudContractRequest_Datastore
	ResourceValues isPatchCloudContractRequest_ResourceValues `protobuf_oneof:"resource_values"`
}

func (x *PatchCloudContractRequest) Reset() {
	*x = PatchCloudContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchCloudContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchCloudContractRequest) ProtoMessage() {}

func (x *PatchCloudContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchCloudContractRequest.ProtoReflect.Descriptor instead.
func (*PatchCloudContractRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{156}
}

func (x *PatchCloudContractRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PatchCloudContractRequest) GetOperation() EnumPatchCloudContractOperation {
	if x != nil {
		return x.Operation
	}
	return EnumPatchCloudContractOperation_ENUM_PATCH_CLOUD_CONTRACT_OPERATION_UNSPECIFIED
}

func (x *PatchCloudContractRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *PatchCloudContractRequest) GetResourceType() EnumPatchCloudContractType {
	if x != nil {
		return x.ResourceType
	}
	return EnumPatchCloudContractType_ENUM_PATCH_CLOUD_CONTRACT_TYPE_UNSPECIFIED
}

func (m *PatchCloudContractRequest) GetResourceValues() isPatchCloudContractRequest_ResourceValues {
	if m != nil {
		return m.ResourceValues
	}
	return nil
}

func (x *PatchCloudContractRequest) GetDatastore() *ManagedDatastore {
	if x, ok := x.GetResourceValues().(*PatchCloudContractRequest_Datastore); ok {
		return x.Datastore
	}
	return nil
}

type isPatchCloudContractRequest_ResourceValues interface {
	isPatchCloudContractRequest_ResourceValues()
}

type PatchCloudContractRequest_Datastore struct {
	Datastore *ManagedDatastore `protobuf:"bytes,5,opt,name=datastore,proto3,oneof"`
}

func (*PatchCloudContractRequest_Datastore) isPatchCloudContractRequest_ResourceValues() {}

// PatchCloudContractResponse is the response object from patching a cloud contract resource
type PatchCloudContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cloud_contract is the resulting cloud contract after the patch has been applied
	CloudContract *CloudContract `protobuf:"bytes,1,opt,name=cloud_contract,json=cloudContract,proto3" json:"cloud_contract,omitempty"`
}

func (x *PatchCloudContractResponse) Reset() {
	*x = PatchCloudContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchCloudContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchCloudContractResponse) ProtoMessage() {}

func (x *PatchCloudContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchCloudContractResponse.ProtoReflect.Descriptor instead.
func (*PatchCloudContractResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{157}
}

func (x *PatchCloudContractResponse) GetCloudContract() *CloudContract {
	if x != nil {
		return x.CloudContract
	}
	return nil
}

// ReadCloudContractRequest is the request object for fetching a cloud contract
type ReadCloudContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ReadCloudContractRequest) Reset() {
	*x = ReadCloudContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCloudContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCloudContractRequest) ProtoMessage() {}

func (x *ReadCloudContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCloudContractRequest.ProtoReflect.Descriptor instead.
func (*ReadCloudContractRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{158}
}

func (x *ReadCloudContractRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// ReadCloudContractResponse is the response object from fetching a cloud contract
type ReadCloudContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cloud_contract is the contract
	CloudContract *CloudContract `protobuf:"bytes,1,opt,name=cloud_contract,json=cloudContract,proto3" json:"cloud_contract,omitempty"`
}

func (x *ReadCloudContractResponse) Reset() {
	*x = ReadCloudContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCloudContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCloudContractResponse) ProtoMessage() {}

func (x *ReadCloudContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCloudContractResponse.ProtoReflect.Descriptor instead.
func (*ReadCloudContractResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{159}
}

func (x *ReadCloudContractResponse) GetCloudContract() *CloudContract {
	if x != nil {
		return x.CloudContract
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type EKSBearerTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *EKSBearerTokenRequest) Reset() {
	*x = EKSBearerTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EKSBearerTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EKSBearerTokenRequest) ProtoMessage() {}

func (x *EKSBearerTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EKSBearerTokenRequest.ProtoReflect.Descriptor instead.
func (*EKSBearerTokenRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{160}
}

func (x *EKSBearerTokenRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *EKSBearerTokenRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type EKSBearerTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *EKSBearerTokenResponse) Reset() {
	*x = EKSBearerTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EKSBearerTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EKSBearerTokenResponse) ProtoMessage() {}

func (x *EKSBearerTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EKSBearerTokenResponse.ProtoReflect.Descriptor instead.
func (*EKSBearerTokenResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{161}
}

func (x *EKSBearerTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type CertificateAuthorityDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *CertificateAuthorityDataRequest) Reset() {
	*x = CertificateAuthorityDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateAuthorityDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateAuthorityDataRequest) ProtoMessage() {}

func (x *CertificateAuthorityDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateAuthorityDataRequest.ProtoReflect.Descriptor instead.
func (*CertificateAuthorityDataRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{162}
}

func (x *CertificateAuthorityDataRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CertificateAuthorityDataRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type CertificateAuthorityDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateAuthorityData string `protobuf:"bytes,1,opt,name=certificate_authority_data,json=certificateAuthorityData,proto3" json:"certificate_authority_data,omitempty"`
}

func (x *CertificateAuthorityDataResponse) Reset() {
	*x = CertificateAuthorityDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateAuthorityDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateAuthorityDataResponse) ProtoMessage() {}

func (x *CertificateAuthorityDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateAuthorityDataResponse.ProtoReflect.Descriptor instead.
func (*CertificateAuthorityDataResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{163}
}

func (x *CertificateAuthorityDataResponse) GetCertificateAuthorityData() string {
	if x != nil {
		return x.CertificateAuthorityData
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type AssumeRoleChainTargetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *AssumeRoleChainTargetsRequest) Reset() {
	*x = AssumeRoleChainTargetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssumeRoleChainTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssumeRoleChainTargetsRequest) ProtoMessage() {}

func (x *AssumeRoleChainTargetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssumeRoleChainTargetsRequest.ProtoReflect.Descriptor instead.
func (*AssumeRoleChainTargetsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{164}
}

func (x *AssumeRoleChainTargetsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type AssumeRoleChainTargetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainLinks []*AssumeRoleChainLink `protobuf:"bytes,1,rep,name=chain_links,json=chainLinks,proto3" json:"chain_links,omitempty"`
}

func (x *AssumeRoleChainTargetsResponse) Reset() {
	*x = AssumeRoleChainTargetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssumeRoleChainTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssumeRoleChainTargetsResponse) ProtoMessage() {}

func (x *AssumeRoleChainTargetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssumeRoleChainTargetsResponse.ProtoReflect.Descriptor instead.
func (*AssumeRoleChainTargetsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{165}
}

func (x *AssumeRoleChainTargetsResponse) GetChainLinks() []*AssumeRoleChainLink {
	if x != nil {
		return x.ChainLinks
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type ECRTokenForRegistryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Region       string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	AwsAccountId string `protobuf:"bytes,3,opt,name=aws_account_id,json=awsAccountId,proto3" json:"aws_account_id,omitempty"`
}

func (x *ECRTokenForRegistryRequest) Reset() {
	*x = ECRTokenForRegistryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECRTokenForRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRTokenForRegistryRequest) ProtoMessage() {}

func (x *ECRTokenForRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRTokenForRegistryRequest.ProtoReflect.Descriptor instead.
func (*ECRTokenForRegistryRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{166}
}

func (x *ECRTokenForRegistryRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ECRTokenForRegistryRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ECRTokenForRegistryRequest) GetAwsAccountId() string {
	if x != nil {
		return x.AwsAccountId
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type ECRTokenForRegistryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Expiry *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *ECRTokenForRegistryResponse) Reset() {
	*x = ECRTokenForRegistryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECRTokenForRegistryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECRTokenForRegistryResponse) ProtoMessage() {}

func (x *ECRTokenForRegistryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECRTokenForRegistryResponse.ProtoReflect.Descriptor instead.
func (*ECRTokenForRegistryResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{167}
}

func (x *ECRTokenForRegistryResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ECRTokenForRegistryResponse) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type AssumeRoleCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwsAccountId string `protobuf:"bytes,1,opt,name=aws_account_id,json=awsAccountId,proto3" json:"aws_account_id,omitempty"`
	ProjectId    int64  `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *AssumeRoleCredentialsRequest) Reset() {
	*x = AssumeRoleCredentialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssumeRoleCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssumeRoleCredentialsRequest) ProtoMessage() {}

func (x *AssumeRoleCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssumeRoleCredentialsRequest.ProtoReflect.Descriptor instead.
func (*AssumeRoleCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{168}
}

func (x *AssumeRoleCredentialsRequest) GetAwsAccountId() string {
	if x != nil {
		return x.AwsAccountId
	}
	return ""
}

func (x *AssumeRoleCredentialsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type AssumeRoleCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwsAccessId     string `protobuf:"bytes,1,opt,name=aws_access_id,json=awsAccessId,proto3" json:"aws_access_id,omitempty"`
	AwsSecretKey    string `protobuf:"bytes,2,opt,name=aws_secret_key,json=awsSecretKey,proto3" json:"aws_secret_key,omitempty"`
	AwsSessionToken string `protobuf:"bytes,3,opt,name=aws_session_token,json=awsSessionToken,proto3" json:"aws_session_token,omitempty"`
}

func (x *AssumeRoleCredentialsResponse) Reset() {
	*x = AssumeRoleCredentialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssumeRoleCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssumeRoleCredentialsResponse) ProtoMessage() {}

func (x *AssumeRoleCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssumeRoleCredentialsResponse.ProtoReflect.Descriptor instead.
func (*AssumeRoleCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{169}
}

func (x *AssumeRoleCredentialsResponse) GetAwsAccessId() string {
	if x != nil {
		return x.AwsAccessId
	}
	return ""
}

func (x *AssumeRoleCredentialsResponse) GetAwsSecretKey() string {
	if x != nil {
		return x.AwsSecretKey
	}
	return ""
}

func (x *AssumeRoleCredentialsResponse) GetAwsSessionToken() string {
	if x != nil {
		return x.AwsSessionToken
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type DockerConfigFileForRegistryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RegistryUri string `protobuf:"bytes,2,opt,name=registry_uri,json=registryUri,proto3" json:"registry_uri,omitempty"`
}

func (x *DockerConfigFileForRegistryRequest) Reset() {
	*x = DockerConfigFileForRegistryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerConfigFileForRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerConfigFileForRegistryRequest) ProtoMessage() {}

func (x *DockerConfigFileForRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerConfigFileForRegistryRequest.ProtoReflect.Descriptor instead.
func (*DockerConfigFileForRegistryRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{170}
}

func (x *DockerConfigFileForRegistryRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DockerConfigFileForRegistryRequest) GetRegistryUri() string {
	if x != nil {
		return x.RegistryUri
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type DockerConfigFileForRegistryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DockerConfigFile []byte `protobuf:"bytes,1,opt,name=docker_config_file,json=dockerConfigFile,proto3" json:"docker_config_file,omitempty"`
}

func (x *DockerConfigFileForRegistryResponse) Reset() {
	*x = DockerConfigFileForRegistryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerConfigFileForRegistryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerConfigFileForRegistryResponse) ProtoMessage() {}

func (x *DockerConfigFileForRegistryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerConfigFileForRegistryResponse.ProtoReflect.Descriptor instead.
func (*DockerConfigFileForRegistryResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{171}
}

func (x *DockerConfigFileForRegistryResponse) GetDockerConfigFile() []byte {
	if x != nil {
		return x.DockerConfigFile
	}
	return nil
}

// ClusterNetworkSettingsRequest is the request object for fetching cloud provider network settings for a cluster
type ClusterNetworkSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *ClusterNetworkSettingsRequest) Reset() {
	*x = ClusterNetworkSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNetworkSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNetworkSettingsRequest) ProtoMessage() {}

func (x *ClusterNetworkSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNetworkSettingsRequest.ProtoReflect.Descriptor instead.
func (*ClusterNetworkSettingsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{172}
}

func (x *ClusterNetworkSettingsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ClusterNetworkSettingsRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

// ClusterNetworkSettingsResponse is the response object containing cloud provider network settings for a cluster
type ClusterNetworkSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// region is the cloud provider region in which the cluster is located
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// subnet_ids contains a string list of cloud provider subnets associated with the cluster
	SubnetIds []string `protobuf:"bytes,2,rep,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
	// cloud_provider the given cloud provider for the cluster being queried
	CloudProvider EnumCloudProvider `protobuf:"varint,3,opt,name=cloud_provider,json=cloudProvider,proto3,enum=porter.v1.EnumCloudProvider" json:"cloud_provider,omitempty"`
	// cloud_provider_network contains the relevant cluster network config for the cloud provider on which the cluster exists
	//
	// Types that are assignable to CloudProviderNetwork:
	//
	//	*ClusterNetworkSettingsResponse_EksCloudProviderNetwork
	CloudProviderNetwork isClusterNetworkSettingsResponse_CloudProviderNetwork `protobuf_oneof:"cloud_provider_network"`
}

func (x *ClusterNetworkSettingsResponse) Reset() {
	*x = ClusterNetworkSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNetworkSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNetworkSettingsResponse) ProtoMessage() {}

func (x *ClusterNetworkSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNetworkSettingsResponse.ProtoReflect.Descriptor instead.
func (*ClusterNetworkSettingsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{173}
}

func (x *ClusterNetworkSettingsResponse) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ClusterNetworkSettingsResponse) GetSubnetIds() []string {
	if x != nil {
		return x.SubnetIds
	}
	return nil
}

func (x *ClusterNetworkSettingsResponse) GetCloudProvider() EnumCloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return EnumCloudProvider_ENUM_CLOUD_PROVIDER_UNSPECIFIED
}

func (m *ClusterNetworkSettingsResponse) GetCloudProviderNetwork() isClusterNetworkSettingsResponse_CloudProviderNetwork {
	if m != nil {
		return m.CloudProviderNetwork
	}
	return nil
}

func (x *ClusterNetworkSettingsResponse) GetEksCloudProviderNetwork() *AWSVpc {
	if x, ok := x.GetCloudProviderNetwork().(*ClusterNetworkSettingsResponse_EksCloudProviderNetwork); ok {
		return x.EksCloudProviderNetwork
	}
	return nil
}

type isClusterNetworkSettingsResponse_CloudProviderNetwork interface {
	isClusterNetworkSettingsResponse_CloudProviderNetwork()
}

type ClusterNetworkSettingsResponse_EksCloudProviderNetwork struct {
	// eks_cloud_provider_network is the aws vpc for the cluster
	EksCloudProviderNetwork *AWSVpc `protobuf:"bytes,4,opt,name=eks_cloud_provider_network,json=eksCloudProviderNetwork,proto3,oneof"`
}

func (*ClusterNetworkSettingsResponse_EksCloudProviderNetwork) isClusterNetworkSettingsResponse_CloudProviderNetwork() {
}

// ListDatastoresRequest is the request object for getting a list of datastores for a given project/account
type ListDatastoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id id of the project to retrieve datastores for
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cloud_provider the cloud provider to retrieve datastores for
	CloudProvider EnumCloudProvider `protobuf:"varint,2,opt,name=cloud_provider,json=cloudProvider,proto3,enum=porter.v1.EnumCloudProvider" json:"cloud_provider,omitempty"`
	// cloud_provider_account_id is an identifier to use when matching resources for a cloud provider
	CloudProviderAccountId string `protobuf:"bytes,3,opt,name=cloud_provider_account_id,json=cloudProviderAccountId,proto3" json:"cloud_provider_account_id,omitempty"`
	// type is an optional type of the datastore to filter by
	Type *EnumDatastore `protobuf:"varint,4,opt,name=type,proto3,enum=porter.v1.EnumDatastore,oneof" json:"type,omitempty"`
	// name is an optional name of the datastore to filter by
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// include_env_group is a field denoting whether to include the datastore env group in the response
	IncludeEnvGroup bool `protobuf:"varint,6,opt,name=include_env_group,json=includeEnvGroup,proto3" json:"include_env_group,omitempty"`
	// include_metadata is a field denoting whether to include the datastore metadata in the response
	IncludeMetadata bool `protobuf:"varint,7,opt,name=include_metadata,json=includeMetadata,proto3" json:"include_metadata,omitempty"`
}

func (x *ListDatastoresRequest) Reset() {
	*x = ListDatastoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatastoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatastoresRequest) ProtoMessage() {}

func (x *ListDatastoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatastoresRequest.ProtoReflect.Descriptor instead.
func (*ListDatastoresRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{174}
}

func (x *ListDatastoresRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListDatastoresRequest) GetCloudProvider() EnumCloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return EnumCloudProvider_ENUM_CLOUD_PROVIDER_UNSPECIFIED
}

func (x *ListDatastoresRequest) GetCloudProviderAccountId() string {
	if x != nil {
		return x.CloudProviderAccountId
	}
	return ""
}

func (x *ListDatastoresRequest) GetType() EnumDatastore {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EnumDatastore_ENUM_DATASTORE_UNSPECIFIED
}

func (x *ListDatastoresRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListDatastoresRequest) GetIncludeEnvGroup() bool {
	if x != nil {
		return x.IncludeEnvGroup
	}
	return false
}

func (x *ListDatastoresRequest) GetIncludeMetadata() bool {
	if x != nil {
		return x.IncludeMetadata
	}
	return false
}

// ListDatastoresResponse is the response object containing a list of datastores
type ListDatastoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// datastores list of datastore objects
	Datastores []*Datastore `protobuf:"bytes,1,rep,name=datastores,proto3" json:"datastores,omitempty"`
}

func (x *ListDatastoresResponse) Reset() {
	*x = ListDatastoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatastoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatastoresResponse) ProtoMessage() {}

func (x *ListDatastoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatastoresResponse.ProtoReflect.Descriptor instead.
func (*ListDatastoresResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{175}
}

func (x *ListDatastoresResponse) GetDatastores() []*Datastore {
	if x != nil {
		return x.Datastores
	}
	return nil
}

// DatastoreStatusRequest is the request object for fetching the status of a datastore in on a cluster
type DatastoreStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id id of the project that the datastore belongs to
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cluster_id id of the cluster that the datastore belongs to
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// type type of the datastore
	Type EnumDatastore `protobuf:"varint,3,opt,name=type,proto3,enum=porter.v1.EnumDatastore" json:"type,omitempty"`
	// name name of the datastore
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DatastoreStatusRequest) Reset() {
	*x = DatastoreStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatastoreStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatastoreStatusRequest) ProtoMessage() {}

func (x *DatastoreStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatastoreStatusRequest.ProtoReflect.Descriptor instead.
func (*DatastoreStatusRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{176}
}

func (x *DatastoreStatusRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DatastoreStatusRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *DatastoreStatusRequest) GetType() EnumDatastore {
	if x != nil {
		return x.Type
	}
	return EnumDatastore_ENUM_DATASTORE_UNSPECIFIED
}

func (x *DatastoreStatusRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DatastoreStatusResponse is the response object containing the status of the datastore
type DatastoreStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status is the status of the datastore
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DatastoreStatusResponse) Reset() {
	*x = DatastoreStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatastoreStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatastoreStatusResponse) ProtoMessage() {}

func (x *DatastoreStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatastoreStatusResponse.ProtoReflect.Descriptor instead.
func (*DatastoreStatusResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{177}
}

func (x *DatastoreStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// deprecated; use ManagedDatastore instead
//
// Deprecated: Marked as deprecated in porter/v1/cluster_control_plane.proto.
type Datastore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is the type of the datastore
	Type EnumDatastore `protobuf:"varint,1,opt,name=type,proto3,enum=porter.v1.EnumDatastore" json:"type,omitempty"`
	// name is the name of the datastore
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// metadata is a list of metadata objects for the datastore
	Metadata []*DatastoreMetadata `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty"`
	// env is the datastore's env group
	Env *EnvGroup `protobuf:"bytes,4,opt,name=env,proto3" json:"env,omitempty"`
	// connected_cluster_id is the id of the cluster that this datastore is connected to
	ConnectedClusterId int64 `protobuf:"varint,5,opt,name=connected_cluster_id,json=connectedClusterId,proto3" json:"connected_cluster_id,omitempty"`
}

func (x *Datastore) Reset() {
	*x = Datastore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datastore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datastore) ProtoMessage() {}

func (x *Datastore) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datastore.ProtoReflect.Descriptor instead.
func (*Datastore) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{178}
}

func (x *Datastore) GetType() EnumDatastore {
	if x != nil {
		return x.Type
	}
	return EnumDatastore_ENUM_DATASTORE_UNSPECIFIED
}

func (x *Datastore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Datastore) GetMetadata() []*DatastoreMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Datastore) GetEnv() *EnvGroup {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Datastore) GetConnectedClusterId() int64 {
	if x != nil {
		return x.ConnectedClusterId
	}
	return 0
}

// DatastoreMetadata represents an object containing metadata for a given datastore
type DatastoreMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name for the metadata field
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// value is value for the metadata field
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DatastoreMetadata) Reset() {
	*x = DatastoreMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatastoreMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatastoreMetadata) ProtoMessage() {}

func (x *DatastoreMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatastoreMetadata.ProtoReflect.Descriptor instead.
func (*DatastoreMetadata) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{179}
}

func (x *DatastoreMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatastoreMetadata) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// RegistryStatusRequest is the request object for fetching the status of a docker registry associated to a project
type RegistryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id id of the project that the ecr registry belongs to
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// registry_id id of the ecr registry
	RegistryId int64 `protobuf:"varint,2,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
}

func (x *RegistryStatusRequest) Reset() {
	*x = RegistryStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryStatusRequest) ProtoMessage() {}

func (x *RegistryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryStatusRequest.ProtoReflect.Descriptor instead.
func (*RegistryStatusRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{180}
}

func (x *RegistryStatusRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *RegistryStatusRequest) GetRegistryId() int64 {
	if x != nil {
		return x.RegistryId
	}
	return 0
}

// RegistryStatusResponse is the response object containing the status of the docker registry
type RegistryStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// is_vulnerability_scanning_enabled is a boolean containing whether scanning is properly enabled or not
	IsVulnerabilityScanningEnabled bool `protobuf:"varint,1,opt,name=is_vulnerability_scanning_enabled,json=isVulnerabilityScanningEnabled,proto3" json:"is_vulnerability_scanning_enabled,omitempty"`
}

func (x *RegistryStatusResponse) Reset() {
	*x = RegistryStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryStatusResponse) ProtoMessage() {}

func (x *RegistryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryStatusResponse.ProtoReflect.Descriptor instead.
func (*RegistryStatusResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{181}
}

func (x *RegistryStatusResponse) GetIsVulnerabilityScanningEnabled() bool {
	if x != nil {
		return x.IsVulnerabilityScanningEnabled
	}
	return false
}

// SharedNetworkSettingsRequest is the request object for fetching cloud provider network settings for where a service should be provisioned relative to a cluster
type SharedNetworkSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id id of the project that the service will be provisioned in
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cluster_id id of the cluster that the service will be peered to in
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// service_type type of the service
	ServiceType string `protobuf:"bytes,3,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
}

func (x *SharedNetworkSettingsRequest) Reset() {
	*x = SharedNetworkSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedNetworkSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedNetworkSettingsRequest) ProtoMessage() {}

func (x *SharedNetworkSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedNetworkSettingsRequest.ProtoReflect.Descriptor instead.
func (*SharedNetworkSettingsRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{182}
}

func (x *SharedNetworkSettingsRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SharedNetworkSettingsRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *SharedNetworkSettingsRequest) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

// SharedNetworkSettingsResponse is the response object containing cloud provider network settings for a service provisioned relative to a cluster
type SharedNetworkSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// region is the cloud provider region in which the cluster is located
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// cidr_range is the cidr range of the VPC
	CidrRange string `protobuf:"bytes,2,opt,name=cidr_range,json=cidrRange,proto3" json:"cidr_range,omitempty"`
	// subnet_ids contains a string list of cloud provider subnets associated with the cluster
	SubnetIds []string `protobuf:"bytes,3,rep,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
	// cloud_provider the given cloud provider for the cluster being queried
	CloudProvider EnumCloudProvider `protobuf:"varint,4,opt,name=cloud_provider,json=cloudProvider,proto3,enum=porter.v1.EnumCloudProvider" json:"cloud_provider,omitempty"`
	// cloud_provider_network contains the relevant cluster network config for the cloud provider on which the cluster exists
	//
	// Types that are assignable to CloudProviderNetwork:
	//
	//	*SharedNetworkSettingsResponse_EksCloudProviderNetwork
	CloudProviderNetwork isSharedNetworkSettingsResponse_CloudProviderNetwork `protobuf_oneof:"cloud_provider_network"`
}

func (x *SharedNetworkSettingsResponse) Reset() {
	*x = SharedNetworkSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedNetworkSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedNetworkSettingsResponse) ProtoMessage() {}

func (x *SharedNetworkSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedNetworkSettingsResponse.ProtoReflect.Descriptor instead.
func (*SharedNetworkSettingsResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{183}
}

func (x *SharedNetworkSettingsResponse) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SharedNetworkSettingsResponse) GetCidrRange() string {
	if x != nil {
		return x.CidrRange
	}
	return ""
}

func (x *SharedNetworkSettingsResponse) GetSubnetIds() []string {
	if x != nil {
		return x.SubnetIds
	}
	return nil
}

func (x *SharedNetworkSettingsResponse) GetCloudProvider() EnumCloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return EnumCloudProvider_ENUM_CLOUD_PROVIDER_UNSPECIFIED
}

func (m *SharedNetworkSettingsResponse) GetCloudProviderNetwork() isSharedNetworkSettingsResponse_CloudProviderNetwork {
	if m != nil {
		return m.CloudProviderNetwork
	}
	return nil
}

func (x *SharedNetworkSettingsResponse) GetEksCloudProviderNetwork() *AWSVpc {
	if x, ok := x.GetCloudProviderNetwork().(*SharedNetworkSettingsResponse_EksCloudProviderNetwork); ok {
		return x.EksCloudProviderNetwork
	}
	return nil
}

type isSharedNetworkSettingsResponse_CloudProviderNetwork interface {
	isSharedNetworkSettingsResponse_CloudProviderNetwork()
}

type SharedNetworkSettingsResponse_EksCloudProviderNetwork struct {
	// eks_cloud_provider_network is the aws vpc for the cluster
	EksCloudProviderNetwork *AWSVpc `protobuf:"bytes,5,opt,name=eks_cloud_provider_network,json=eksCloudProviderNetwork,proto3,oneof"`
}

func (*SharedNetworkSettingsResponse_EksCloudProviderNetwork) isSharedNetworkSettingsResponse_CloudProviderNetwork() {
}

// SystemStatusHistoryRequest is the request object for fetching the system status history in a cluster
type SystemStatusHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project this cluster is in
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// cluster_id is the id of the cluster
	ClusterId int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// cloud_provider is the cloud provider this cluster is located in
	CloudProvider EnumCloudProvider `protobuf:"varint,3,opt,name=cloud_provider,json=cloudProvider,proto3,enum=porter.v1.EnumCloudProvider" json:"cloud_provider,omitempty"`
}

func (x *SystemStatusHistoryRequest) Reset() {
	*x = SystemStatusHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemStatusHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStatusHistoryRequest) ProtoMessage() {}

func (x *SystemStatusHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStatusHistoryRequest.ProtoReflect.Descriptor instead.
func (*SystemStatusHistoryRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{184}
}

func (x *SystemStatusHistoryRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SystemStatusHistoryRequest) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *SystemStatusHistoryRequest) GetCloudProvider() EnumCloudProvider {
	if x != nil {
		return x.CloudProvider
	}
	return EnumCloudProvider_ENUM_CLOUD_PROVIDER_UNSPECIFIED
}

// SystemStatusHistoryResponse is the response object for fetching the system status history in a cluster
type SystemStatusHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster_status_histories holds  timeseries for the different cluster health types
	// there should be a maximum of one timeseries per health type
	ClusterStatusHistories []*ClusterStatusHistory `protobuf:"bytes,1,rep,name=cluster_status_histories,json=clusterStatusHistories,proto3" json:"cluster_status_histories,omitempty"`
	// system_service_status_histories is a list of status timeseries for system services. Users can assume there is only one entry per a system service.
	SystemServiceStatusHistories []*ServiceStatusHistory `protobuf:"bytes,2,rep,name=system_service_status_histories,json=systemServiceStatusHistories,proto3" json:"system_service_status_histories,omitempty"`
}

func (x *SystemStatusHistoryResponse) Reset() {
	*x = SystemStatusHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemStatusHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStatusHistoryResponse) ProtoMessage() {}

func (x *SystemStatusHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStatusHistoryResponse.ProtoReflect.Descriptor instead.
func (*SystemStatusHistoryResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{185}
}

func (x *SystemStatusHistoryResponse) GetClusterStatusHistories() []*ClusterStatusHistory {
	if x != nil {
		return x.ClusterStatusHistories
	}
	return nil
}

func (x *SystemStatusHistoryResponse) GetSystemServiceStatusHistories() []*ServiceStatusHistory {
	if x != nil {
		return x.SystemServiceStatusHistories
	}
	return nil
}

// AppEventWebhooksRequest is a request to list AppEventWebhooks configured on an app
type AppEventWebhooksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target where the app is installed
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,2,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// app_name is the name of the application
	AppName string `protobuf:"bytes,3,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *AppEventWebhooksRequest) Reset() {
	*x = AppEventWebhooksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppEventWebhooksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppEventWebhooksRequest) ProtoMessage() {}

func (x *AppEventWebhooksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppEventWebhooksRequest.ProtoReflect.Descriptor instead.
func (*AppEventWebhooksRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{186}
}

func (x *AppEventWebhooksRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AppEventWebhooksRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *AppEventWebhooksRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

// AppEventWebhooks is a response to a request to list AppEventWebhook
type AppEventWebhooksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_event_webhooks are all webhooks configured on a certain app
	AppEventWebhooks []*AppEventWebhook `protobuf:"bytes,1,rep,name=app_event_webhooks,json=appEventWebhooks,proto3" json:"app_event_webhooks,omitempty"`
}

func (x *AppEventWebhooksResponse) Reset() {
	*x = AppEventWebhooksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppEventWebhooksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppEventWebhooksResponse) ProtoMessage() {}

func (x *AppEventWebhooksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppEventWebhooksResponse.ProtoReflect.Descriptor instead.
func (*AppEventWebhooksResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{187}
}

func (x *AppEventWebhooksResponse) GetAppEventWebhooks() []*AppEventWebhook {
	if x != nil {
		return x.AppEventWebhooks
	}
	return nil
}

// UpdateAppEventWebhooksRequest is the request to update the webhook config for an application
type UpdateAppEventWebhooksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project_id is the id of the project
	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// deployment_target_identifier is the object that identifies the deployment target where the app is installed
	DeploymentTargetIdentifier *DeploymentTargetIdentifier `protobuf:"bytes,2,opt,name=deployment_target_identifier,json=deploymentTargetIdentifier,proto3" json:"deployment_target_identifier,omitempty"`
	// app_name is the name of the application
	AppName string `protobuf:"bytes,3,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// app_event_webhook is a list of webhooks to configure
	AppEventWebhooks []*AppEventWebhook `protobuf:"bytes,4,rep,name=app_event_webhooks,json=appEventWebhooks,proto3" json:"app_event_webhooks,omitempty"`
}

func (x *UpdateAppEventWebhooksRequest) Reset() {
	*x = UpdateAppEventWebhooksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppEventWebhooksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppEventWebhooksRequest) ProtoMessage() {}

func (x *UpdateAppEventWebhooksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppEventWebhooksRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppEventWebhooksRequest) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{188}
}

func (x *UpdateAppEventWebhooksRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UpdateAppEventWebhooksRequest) GetDeploymentTargetIdentifier() *DeploymentTargetIdentifier {
	if x != nil {
		return x.DeploymentTargetIdentifier
	}
	return nil
}

func (x *UpdateAppEventWebhooksRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *UpdateAppEventWebhooksRequest) GetAppEventWebhooks() []*AppEventWebhook {
	if x != nil {
		return x.AppEventWebhooks
	}
	return nil
}

// UpdateAppEventWebhooksResposne is a response to a request to update webhook config for an app
type UpdateAppEventWebhooksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAppEventWebhooksResponse) Reset() {
	*x = UpdateAppEventWebhooksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppEventWebhooksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppEventWebhooksResponse) ProtoMessage() {}

func (x *UpdateAppEventWebhooksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_cluster_control_plane_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppEventWebhooksResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppEventWebhooksResponse) Descriptor() ([]byte, []int) {
	return file_porter_v1_cluster_control_plane_proto_rawDescGZIP(), []int{189}
}

var File_porter_v1_cluster_control_plane_proto protoreflect.FileDescriptor

var file_porter_v1_cluster_control_plane_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70,
	0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x76,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a,
	0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x01,
	0x0a, 0x14, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x19, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x17,
	0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xbe, 0x03, 0x0a, 0x14, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x0e,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x51,
	0x0a, 0x14, 0x67, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x4b, 0x45, 0x50, 0x72, 0x65, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x12, 0x67,
	0x6b, 0x65, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x51, 0x0a, 0x14, 0x65, 0x6b, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4b, 0x53, 0x50,
	0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x12, 0x65, 0x6b, 0x73, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x15, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc1, 0x03, 0x0a, 0x15, 0x50, 0x72,
	0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x45, 0x0a, 0x1d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1a, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x14, 0x67, 0x6b, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x4b, 0x45, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x12, 0x67, 0x6b, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x55, 0x0a,
	0x14, 0x65, 0x6b, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4b, 0x53, 0x50, 0x72, 0x65, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x12, 0x65, 0x6b, 0x73, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x3a, 0x02, 0x18, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x70, 0x72, 0x65,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xd5, 0x01,
	0x0a, 0x16, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x1a, 0x54, 0x0a, 0x14, 0x50,
	0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x55, 0x0a, 0x22, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x87, 0x01, 0x0a,
	0x23, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72,
	0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x18, 0x66, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x16,
	0x66, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x1b, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x50, 0x72, 0x65,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x21, 0x0a,
	0x1b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x02, 0x18, 0x01,
	0x22, 0xa8, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x75, 0x6d,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x6e, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x61, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x6e, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xdd,
	0x01, 0x0a, 0x1b, 0x53, 0x61, 0x76, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x78,
	0x0a, 0x1c, 0x53, 0x61, 0x76, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x16, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x5b, 0x0a, 0x1b, 0x4b, 0x75, 0x62, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x1c, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x48, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2f, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x22, 0x62, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x15, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x60, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x55, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x72, 0x69,
	0x22, 0x60, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x32, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x7f, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x72, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x02, 0x18, 0x01,
	0x22, 0x55, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12,
	0x36, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x09, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x76, 0x0a, 0x17, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55,
	0x72, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a,
	0x18, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x22, 0x5f, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x3a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xb5, 0x01, 0x0a,
	0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x45, 0x0a,
	0x0d, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0c, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x22, 0xcd, 0x03, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x32, 0x0a,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x39, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x0c,
	0x61, 0x70, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x19,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x16, 0x62, 0x61, 0x73, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x22, 0x43, 0x0a, 0x19, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0xb7, 0x03, 0x0a, 0x15, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70,
	0x12, 0x33, 0x0a, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x65, 0x6e,
	0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x06, 0x61, 0x70, 0x70, 0x45, 0x6e, 0x76, 0x12, 0x2b, 0x0a,
	0x12, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x48, 0x61, 0x72,
	0x64, 0x45, 0x6e, 0x76, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x4c, 0x49, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x06, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x70, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70,
	0x70, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x5f, 0x65, 0x6e, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x06, 0x61, 0x70, 0x70, 0x45, 0x6e, 0x76,
	0x12, 0x32, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x45, 0x6e, 0x76, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x50, 0x72, 0x65, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52,
	0x0e, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x36, 0x34, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x62, 0x36, 0x34, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x11, 0x61, 0x70, 0x70, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x45, 0x6e, 0x76, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x4c, 0x49, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x02,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x05, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x76,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x08, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x22, 0x15,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x46, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x17, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x78, 0x0a, 0x18, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x30, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22,
	0xf5, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x67,
	0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x67, 0x0a,
	0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x20, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x19, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcf, 0x03, 0x0a, 0x0b, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x70,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61,
	0x70, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x36, 0x34, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x36,
	0x34, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x18,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xa3, 0x04, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72, 0x65, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x72,
	0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x72, 0x65, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x49, 0x6e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb1, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x29,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0b, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x4d, 0x0a, 0x13, 0x70, 0x72,
	0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x22, 0x52, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x22, 0xd6, 0x01,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41, 0x70, 0x70, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x18, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x16,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x57, 0x0a, 0x1a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x8d, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x57, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x61,
	0x70, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf8, 0x01, 0x0a, 0x19, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x1a, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5e,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x53,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22,
	0xcb, 0x01, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x35, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x06, 0x61, 0x70, 0x70, 0x45, 0x6e, 0x76, 0x12, 0x44, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x52, 0x0e, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x52, 0x0a,
	0x15, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x39, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x22, 0x73, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e,
	0x76, 0x56, 0x61, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x08, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x07, 0x65,
	0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x22, 0xc5, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x65, 0x6e,
	0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x06, 0x61, 0x70, 0x70, 0x45, 0x6e, 0x76, 0x12, 0x44, 0x0a,
	0x0f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x76, 0x56,
	0x61, 0x72, 0x73, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x61, 0x73, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x1b,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x13,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x45, 0x6e, 0x76, 0x22, 0x5f, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x65,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x70, 0x72,
	0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xde, 0x01,
	0x0a, 0x1e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x8d,
	0x02, 0x0a, 0x1f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x38, 0x0a, 0x16, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x10, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xae,
	0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22,
	0x52, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x18, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x67, 0x0a,
	0x19, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x5e, 0x0a, 0x1e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x1f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x22, 0xae, 0x03, 0x0a, 0x17, 0x53, 0x65, 0x65, 0x64, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x5f, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x48, 0x65, 0x6c, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x18, 0x53, 0x65, 0x65, 0x64, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x66, 0x66, 0x22, 0x8a, 0x02, 0x0a, 0x18, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x08, 0x65, 0x6e,
	0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22,
	0x69, 0x0a, 0x19, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x13,
	0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x11, 0x65, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x22, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74,
	0x68, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x1c,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x23, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x09, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x08, 0x65, 0x6e, 0x76, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x4c, 0x0a, 0x13, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x11, 0x65,
	0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x22, 0xda, 0x01, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a,
	0x17, 0x41, 0x70, 0x70, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x65, 0x6e, 0x76, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x65,
	0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x67,
	0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x36, 0x34, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x62, 0x36, 0x34, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x72, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x05, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x22, 0x41, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x76, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x24,
	0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x73, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x02, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x48, 0x65, 0x6c, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x48, 0x65, 0x6c,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xeb,
	0x02, 0x0a, 0x17, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x67, 0x0a, 0x1c,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xde, 0x01, 0x0a,
	0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x6a,
	0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x16, 0x0a,
	0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x0a, 0x18, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x14, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x6a,
	0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52,
	0x06, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x22, 0xdd, 0x01, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x52,
	0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x67,
	0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x0f, 0x4a, 0x6f, 0x62, 0x52, 0x75,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x6a, 0x6f,
	0x62, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52,
	0x07, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x73, 0x22, 0x2e, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x0e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x22, 0xbd, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0x57, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x61,
	0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x1b,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a,
	0x1c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x4d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x41, 0x70, 0x70,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x22, 0xf8, 0x03, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x67,
	0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x15, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x61, 0x77, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x61, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1c, 0x0a,
	0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x24,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x22, 0x47, 0x0a, 0x1d, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x27, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a,
	0x2a, 0x41, 0x72, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x76, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x2b, 0x41, 0x72,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x72, 0x65, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x14, 0x6b, 0x38, 0x73, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x12, 0x6b, 0x38, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x76, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x22, 0x66, 0x0a, 0x26, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x27,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e,
	0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb7, 0x04, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x17, 0x65, 0x6e, 0x76, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x65,
	0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x76,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x6e, 0x76,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x65, 0x6e,
	0x76, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x56,
	0x61, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x45, 0x6e, 0x76, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x65,
	0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x65, 0x6e,
	0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x41, 0x70, 0x70, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x12, 0x3c, 0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x69, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x65, 0x6e, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x69, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x45, 0x6e, 0x76, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x69, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e,
	0x76, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e,
	0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x17, 0x65,
	0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x76,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x18, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x73,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x22, 0x7d, 0x0a, 0x1c, 0x41, 0x70, 0x70, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x54, 0x6f, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x70, 0x70,
	0x73, 0x22, 0x7d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x22, 0x4b, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x6e, 0x76,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x09, 0x65, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xdf, 0x01,
	0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a,
	0x14, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x6c, 0x61,
	0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x58, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x19, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x1a, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x3c, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x3d,
	0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x99, 0x01,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x5e, 0x0a, 0x1a, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x22, 0xc1, 0x02, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x48, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x39, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x64, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x5c, 0x0a, 0x19, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x22, 0x59, 0x0a, 0x15, 0x45, 0x4b, 0x53, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x32, 0x0a, 0x16, 0x45,
	0x4b, 0x53, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x02, 0x18, 0x01, 0x22,
	0x63, 0x0a, 0x1f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x3a, 0x02, 0x18, 0x01, 0x22, 0x64, 0x0a, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x42, 0x0a, 0x1d, 0x41, 0x73,
	0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x65,
	0x0a, 0x1e, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x7d, 0x0a, 0x1a, 0x45, 0x43, 0x52, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x77,
	0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x3a, 0x02, 0x18, 0x01, 0x22, 0x6b, 0x0a, 0x1b, 0x45, 0x43, 0x52, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x3a, 0x02, 0x18,
	0x01, 0x22, 0x67, 0x0a, 0x1c, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x1d, 0x41,
	0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x77, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x6a, 0x0a, 0x22, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x72, 0x69, 0x3a, 0x02,
	0x18, 0x01, 0x22, 0x57, 0x0a, 0x23, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x5d, 0x0a, 0x1d, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x1e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x1a, 0x65, 0x6b, 0x73,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x63,
	0x48, 0x00, 0x52, 0x17, 0x65, 0x6b, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x18, 0x0a, 0x16, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xdd, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4e, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x31, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a,
	0x03, 0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x03, 0x65, 0x6e, 0x76, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x3d, 0x0a, 0x11, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x57, 0x0a, 0x15, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x49, 0x64, 0x22, 0x63, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x21,
	0x69, 0x73, 0x5f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x69, 0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x7f, 0x0a, 0x1c, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa6, 0x02, 0x0a, 0x1d, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69, 0x64, 0x72, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x1a, 0x65, 0x6b, 0x73, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x63, 0x48, 0x00, 0x52, 0x17,
	0x65, 0x6b, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x18, 0x0a, 0x16, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x22, 0x9f, 0x01, 0x0a, 0x1a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x22, 0xe0, 0x01, 0x0a, 0x1b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x18, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x16, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x66,
	0x0a, 0x1f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x1c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x67, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x10, 0x61, 0x70, 0x70, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x1c,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x48, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x10, 0x61, 0x70, 0x70, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x5a, 0x0a, 0x11,
	0x45, 0x6e, 0x75, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x52, 0x4f,
	0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x2a, 0xab, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x75,
	0x6d, 0x50, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x45, 0x50, 0x4c,
	0x4f, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x50, 0x52, 0x45, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x24, 0x0a, 0x20, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x45, 0x50, 0x4c,
	0x4f, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x46, 0x55, 0x4c, 0x10, 0x03, 0x2a, 0xf9, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x75, 0x6d, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x1f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45,
	0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f,
	0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x56, 0x50, 0x43,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41,
	0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x57, 0x53, 0x5f, 0x56, 0x43,
	0x50, 0x55, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x51, 0x55, 0x4f,
	0x54, 0x41, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x57, 0x53, 0x5f,
	0x45, 0x49, 0x50, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x51, 0x55,
	0x4f, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x57, 0x53,
	0x5f, 0x4e, 0x41, 0x54, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x51,
	0x55, 0x4f, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x47, 0x43,
	0x50, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x51, 0x55, 0x4f, 0x54,
	0x41, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45,
	0x10, 0x06, 0x2a, 0x8a, 0x01, 0x0a, 0x0d, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x4c, 0x49, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x4c, 0x49,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x4c,
	0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52,
	0x41, 0x43, 0x4b, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x03, 0x2a,
	0xdf, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x52,
	0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x25, 0x0a, 0x21, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x52,
	0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x10,
	0x04, 0x2a, 0xd4, 0x01, 0x0a, 0x1b, 0x45, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x2a, 0x0a, 0x26, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x29, 0x0a,
	0x25, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45,
	0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xb6, 0x01, 0x0a, 0x1f, 0x45, 0x6e, 0x75,
	0x6d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x2f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x02, 0x2a, 0x7a, 0x0a, 0x1a, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x2a, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x2c, 0x0a, 0x28, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x2a, 0xea, 0x01,
	0x0a, 0x0d, 0x45, 0x6e, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x52, 0x44, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x51, 0x4c,
	0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x44, 0x53, 0x5f, 0x41, 0x55, 0x52, 0x4f, 0x52, 0x41, 0x5f,
	0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x51, 0x4c, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x45,
	0x4c, 0x41, 0x53, 0x54, 0x49, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53,
	0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x5f, 0x45, 0x4c, 0x41, 0x53, 0x54, 0x49, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x5f, 0x4d, 0x45, 0x4d, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x52,
	0x44, 0x53, 0x5f, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x10, 0x05, 0x32, 0x85, 0x48, 0x0a, 0x1a, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x30, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x13,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x50, 0x72, 0x65, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x5a, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x88, 0x02, 0x01, 0x12, 0x7e, 0x0a, 0x1b, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x2d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x65, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x27, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x88, 0x02, 0x01, 0x12, 0x6c, 0x0a, 0x14, 0x53, 0x61, 0x76, 0x65, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x26, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88,
	0x02, 0x01, 0x12, 0x69, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x54, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46,
	0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x12, 0x2a, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x11, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x12, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01,
	0x12, 0x5a, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x48, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x12, 0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x60, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x12, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x24, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x41, 0x70, 0x70,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x0f, 0x50, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x17, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x60, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x72, 0x0a, 0x17, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x53, 0x65, 0x65, 0x64, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x65, 0x64, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x65, 0x64, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x1b, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57,
	0x69, 0x74, 0x68, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x45, 0x6e, 0x76,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x45, 0x6e, 0x76, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x54, 0x6f, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x73, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x41, 0x70, 0x70,
	0x48, 0x65, 0x6c, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x65, 0x6c, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x65, 0x6c, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x10, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x75, 0x6e, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x12, 0x1e,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f,
	0x62, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f,
	0x62, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x73, 0x12,
	0x19, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52,
	0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x15, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x18, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x15, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x12, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75,
	0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x1d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x69, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x21,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x26, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66,
	0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x1e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x63, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x1b, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x2d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x69, 0x0a, 0x13, 0x45,
	0x43, 0x52, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x12, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x43, 0x52, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x43, 0x52, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x6f, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x27, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x75,
	0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x72, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x75, 0x6d,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x12, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x78, 0x0a, 0x18, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x5a, 0x0a, 0x0e, 0x45, 0x4b, 0x53, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4b, 0x53, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4b, 0x53, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02,
	0x01, 0x12, 0x81, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x12, 0x2d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x75, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x29, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x57, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x20,
	0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x88, 0x02, 0x01, 0x12, 0x57, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01,
	0x0a, 0x1f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x31, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x76, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x23, 0x41,
	0x72, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x35, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x72, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e,
	0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a,
	0x14, 0x41, 0x70, 0x70, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x76,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e,
	0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x73, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x13, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6f, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0xb3, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x42, 0x18, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x09, 0x50, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x50, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_porter_v1_cluster_control_plane_proto_rawDescOnce sync.Once
	file_porter_v1_cluster_control_plane_proto_rawDescData = file_porter_v1_cluster_control_plane_proto_rawDesc
)

func file_porter_v1_cluster_control_plane_proto_rawDescGZIP() []byte {
	file_porter_v1_cluster_control_plane_proto_rawDescOnce.Do(func() {
		file_porter_v1_cluster_control_plane_proto_rawDescData = protoimpl.X.CompressGZIP(file_porter_v1_cluster_control_plane_proto_rawDescData)
	})
	return file_porter_v1_cluster_control_plane_proto_rawDescData
}

var file_porter_v1_cluster_control_plane_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_porter_v1_cluster_control_plane_proto_msgTypes = make([]protoimpl.MessageInfo, 192)
var file_porter_v1_cluster_control_plane_proto_goTypes = []interface{}{
	(EnumUpdateTrigger)(0),                              // 0: porter.v1.EnumUpdateTrigger
	(EnumPredeployStatus)(0),                            // 1: porter.v1.EnumPredeployStatus
	(EnumQuotaIncrease)(0),                              // 2: porter.v1.EnumQuotaIncrease
	(EnumCLIAction)(0),                                  // 3: porter.v1.EnumCLIAction
	(EnumRevisionStatus)(0),                             // 4: porter.v1.EnumRevisionStatus
	(EnumServiceDeploymentStatus)(0),                    // 5: porter.v1.EnumServiceDeploymentStatus
	(EnumPatchCloudContractOperation)(0),                // 6: porter.v1.EnumPatchCloudContractOperation
	(EnumPatchCloudContractType)(0),                     // 7: porter.v1.EnumPatchCloudContractType
	(EnumDatastore)(0),                                  // 8: porter.v1.EnumDatastore
	(*MachineTypesRequest)(nil),                         // 9: porter.v1.MachineTypesRequest
	(*MachineTypesResponse)(nil),                        // 10: porter.v1.MachineTypesResponse
	(*QuotaIncreaseRequest)(nil),                        // 11: porter.v1.QuotaIncreaseRequest
	(*QuotaIncreaseResponse)(nil),                       // 12: porter.v1.QuotaIncreaseResponse
	(*PreflightCheckRequest)(nil),                       // 13: porter.v1.PreflightCheckRequest
	(*PreflightCheckResponse)(nil),                      // 14: porter.v1.PreflightCheckResponse
	(*CloudContractPreflightCheckRequest)(nil),          // 15: porter.v1.CloudContractPreflightCheckRequest
	(*CloudContractPreflightCheckResponse)(nil),         // 16: porter.v1.CloudContractPreflightCheckResponse
	(*CloudContractPreflightCheck)(nil),                 // 17: porter.v1.CloudContractPreflightCheck
	(*QuotaPreflightCheckRequest)(nil),                  // 18: porter.v1.QuotaPreflightCheckRequest
	(*QuotaPreflightCheckResponse)(nil),                 // 19: porter.v1.QuotaPreflightCheckResponse
	(*CreateAssumeRoleChainRequest)(nil),                // 20: porter.v1.CreateAssumeRoleChainRequest
	(*CreateAssumeRoleChainResponse)(nil),               // 21: porter.v1.CreateAssumeRoleChainResponse
	(*SaveAzureCredentialsRequest)(nil),                 // 22: porter.v1.SaveAzureCredentialsRequest
	(*SaveAzureCredentialsResponse)(nil),                // 23: porter.v1.SaveAzureCredentialsResponse
	(*KubeConfigForClusterRequest)(nil),                 // 24: porter.v1.KubeConfigForClusterRequest
	(*KubeConfigForClusterResponse)(nil),                // 25: porter.v1.KubeConfigForClusterResponse
	(*UpdateContractRequest)(nil),                       // 26: porter.v1.UpdateContractRequest
	(*UpdateContractResponse)(nil),                      // 27: porter.v1.UpdateContractResponse
	(*ClusterStatusRequest)(nil),                        // 28: porter.v1.ClusterStatusRequest
	(*ClusterStatusResponse)(nil),                       // 29: porter.v1.ClusterStatusResponse
	(*DeleteClusterRequest)(nil),                        // 30: porter.v1.DeleteClusterRequest
	(*DeleteClusterResponse)(nil),                       // 31: porter.v1.DeleteClusterResponse
	(*ListRepositoriesForRegistryRequest)(nil),          // 32: porter.v1.ListRepositoriesForRegistryRequest
	(*ListRepositoriesForRegistryResponse)(nil),         // 33: porter.v1.ListRepositoriesForRegistryResponse
	(*Repository)(nil),                                  // 34: porter.v1.Repository
	(*ListImagesForRepositoryRequest)(nil),              // 35: porter.v1.ListImagesForRepositoryRequest
	(*ListImagesForRepositoryResponse)(nil),             // 36: porter.v1.ListImagesForRepositoryResponse
	(*Image)(nil),                                       // 37: porter.v1.Image
	(*ImageInfo)(nil),                                   // 38: porter.v1.ImageInfo
	(*ImageArtifact)(nil),                               // 39: porter.v1.ImageArtifact
	(*TokenForRegistryRequest)(nil),                     // 40: porter.v1.TokenForRegistryRequest
	(*TokenForRegistryResponse)(nil),                    // 41: porter.v1.TokenForRegistryResponse
	(*ReadContractRequest)(nil),                         // 42: porter.v1.ReadContractRequest
	(*ReadContractResponse)(nil),                        // 43: porter.v1.ReadContractResponse
	(*ContractComplianceChecksRequest)(nil),             // 44: porter.v1.ContractComplianceChecksRequest
	(*ContractComplianceChecksResponse)(nil),            // 45: porter.v1.ContractComplianceChecksResponse
	(*ValidatePorterAppRequest)(nil),                    // 46: porter.v1.ValidatePorterAppRequest
	(*ValidatePorterAppResponse)(nil),                   // 47: porter.v1.ValidatePorterAppResponse
	(*ApplyPorterAppRequest)(nil),                       // 48: porter.v1.ApplyPorterAppRequest
	(*ApplyPorterAppResponse)(nil),                      // 49: porter.v1.ApplyPorterAppResponse
	(*UpdateAppRequest)(nil),                            // 50: porter.v1.UpdateAppRequest
	(*UpdateAppResponse)(nil),                           // 51: porter.v1.UpdateAppResponse
	(*UpdateAddonRequest)(nil),                          // 52: porter.v1.UpdateAddonRequest
	(*UpdateAddonResponse)(nil),                         // 53: porter.v1.UpdateAddonResponse
	(*DeleteAddonRequest)(nil),                          // 54: porter.v1.DeleteAddonRequest
	(*DeleteAddonResponse)(nil),                         // 55: porter.v1.DeleteAddonResponse
	(*UpdateRevisionStatusRequest)(nil),                 // 56: porter.v1.UpdateRevisionStatusRequest
	(*UpdateRevisionStatusResponse)(nil),                // 57: porter.v1.UpdateRevisionStatusResponse
	(*RollbackRevisionRequest)(nil),                     // 58: porter.v1.RollbackRevisionRequest
	(*RollbackRevisionResponse)(nil),                    // 59: porter.v1.RollbackRevisionResponse
	(*DeletePorterAppRequest)(nil),                      // 60: porter.v1.DeletePorterAppRequest
	(*DeletePorterAppResponse)(nil),                     // 61: porter.v1.DeletePorterAppResponse
	(*DeleteAppDeploymentRequest)(nil),                  // 62: porter.v1.DeleteAppDeploymentRequest
	(*DeleteAppDeploymentResponse)(nil),                 // 63: porter.v1.DeleteAppDeploymentResponse
	(*DeleteDeploymentTargetRequest)(nil),               // 64: porter.v1.DeleteDeploymentTargetRequest
	(*DeleteDeploymentTargetResponse)(nil),              // 65: porter.v1.DeleteDeploymentTargetResponse
	(*CurrentAppRevisionRequest)(nil),                   // 66: porter.v1.CurrentAppRevisionRequest
	(*AppRevision)(nil),                                 // 67: porter.v1.AppRevision
	(*AppRevisionStatusRequest)(nil),                    // 68: porter.v1.AppRevisionStatusRequest
	(*AppRevisionStatusResponse)(nil),                   // 69: porter.v1.AppRevisionStatusResponse
	(*UpdateRevisionPayload)(nil),                       // 70: porter.v1.UpdateRevisionPayload
	(*UpdateAddonPayload)(nil),                          // 71: porter.v1.UpdateAddonPayload
	(*RequireAppPayload)(nil),                           // 72: porter.v1.RequireAppPayload
	(*CurrentAppRevisionResponse)(nil),                  // 73: porter.v1.CurrentAppRevisionResponse
	(*ListAppRevisionsRequest)(nil),                     // 74: porter.v1.ListAppRevisionsRequest
	(*ListAppRevisionsResponse)(nil),                    // 75: porter.v1.ListAppRevisionsResponse
	(*LatestAppRevisionsRequest)(nil),                   // 76: porter.v1.LatestAppRevisionsRequest
	(*LatestAppRevisionsResponse)(nil),                  // 77: porter.v1.LatestAppRevisionsResponse
	(*GetAppRevisionRequest)(nil),                       // 78: porter.v1.GetAppRevisionRequest
	(*GetAppRevisionResponse)(nil),                      // 79: porter.v1.GetAppRevisionResponse
	(*AppTemplateRequest)(nil),                          // 80: porter.v1.AppTemplateRequest
	(*AppTemplateResponse)(nil),                         // 81: porter.v1.AppTemplateResponse
	(*AddonTemplatesPayload)(nil),                       // 82: porter.v1.AddonTemplatesPayload
	(*AddonWithEnvVars)(nil),                            // 83: porter.v1.AddonWithEnvVars
	(*UpdateAppTemplateRequest)(nil),                    // 84: porter.v1.UpdateAppTemplateRequest
	(*UpdateAppTemplateResponse)(nil),                   // 85: porter.v1.UpdateAppTemplateResponse
	(*LatestAddonsRequest)(nil),                         // 86: porter.v1.LatestAddonsRequest
	(*LatestAddonsResponse)(nil),                        // 87: porter.v1.LatestAddonsResponse
	(*PredeployStatusRequest)(nil),                      // 88: porter.v1.PredeployStatusRequest
	(*PredeployStatusResponse)(nil),                     // 89: porter.v1.PredeployStatusResponse
	(*DeploymentTargetDetailsRequest)(nil),              // 90: porter.v1.DeploymentTargetDetailsRequest
	(*DeploymentTargetDetailsResponse)(nil),             // 91: porter.v1.DeploymentTargetDetailsResponse
	(*CreateDeploymentTargetRequest)(nil),               // 92: porter.v1.CreateDeploymentTargetRequest
	(*CreateDeploymentTargetResponse)(nil),              // 93: porter.v1.CreateDeploymentTargetResponse
	(*DeploymentTargetsRequest)(nil),                    // 94: porter.v1.DeploymentTargetsRequest
	(*DeploymentTargetsResponse)(nil),                   // 95: porter.v1.DeploymentTargetsResponse
	(*DefaultDeploymentTargetRequest)(nil),              // 96: porter.v1.DefaultDeploymentTargetRequest
	(*DefaultDeploymentTargetResponse)(nil),             // 97: porter.v1.DefaultDeploymentTargetResponse
	(*SeedAppRevisionsRequest)(nil),                     // 98: porter.v1.SeedAppRevisionsRequest
	(*SeedAppRevisionsResponse)(nil),                    // 99: porter.v1.SeedAppRevisionsResponse
	(*EnvGroupVariablesRequest)(nil),                    // 100: porter.v1.EnvGroupVariablesRequest
	(*EnvGroupVariablesResponse)(nil),                   // 101: porter.v1.EnvGroupVariablesResponse
	(*LatestEnvGroupWithVariablesRequest)(nil),          // 102: porter.v1.LatestEnvGroupWithVariablesRequest
	(*LatestEnvGroupWithVariablesResponse)(nil),         // 103: porter.v1.LatestEnvGroupWithVariablesResponse
	(*AppEnvVariablesRequest)(nil),                      // 104: porter.v1.AppEnvVariablesRequest
	(*AppEnvVariablesResponse)(nil),                     // 105: porter.v1.AppEnvVariablesResponse
	(*UpdateAppImageRequest)(nil),                       // 106: porter.v1.UpdateAppImageRequest
	(*UpdateAppImageResponse)(nil),                      // 107: porter.v1.UpdateAppImageResponse
	(*UpdateAppBuildSettingsRequest)(nil),               // 108: porter.v1.UpdateAppBuildSettingsRequest
	(*UpdateAppBuildSettingsResponse)(nil),              // 109: porter.v1.UpdateAppBuildSettingsResponse
	(*UpdateAppsLinkedToEnvGroupRequest)(nil),           // 110: porter.v1.UpdateAppsLinkedToEnvGroupRequest
	(*UpdateAppsLinkedToEnvGroupResponse)(nil),          // 111: porter.v1.UpdateAppsLinkedToEnvGroupResponse
	(*AppHelmValuesRequest)(nil),                        // 112: porter.v1.AppHelmValuesRequest
	(*AppHelmValuesResponse)(nil),                       // 113: porter.v1.AppHelmValuesResponse
	(*ManualServiceRunRequest)(nil),                     // 114: porter.v1.ManualServiceRunRequest
	(*CancelJobRunRequest)(nil),                         // 115: porter.v1.CancelJobRunRequest
	(*CancelJobRunResponse)(nil),                        // 116: porter.v1.CancelJobRunResponse
	(*ManualServiceRunResponse)(nil),                    // 117: porter.v1.ManualServiceRunResponse
	(*JobRunStatusRequest)(nil),                         // 118: porter.v1.JobRunStatusRequest
	(*JobRunStatusResponse)(nil),                        // 119: porter.v1.JobRunStatusResponse
	(*JobRunsRequest)(nil),                              // 120: porter.v1.JobRunsRequest
	(*JobRunsResponse)(nil),                             // 121: porter.v1.JobRunsResponse
	(*ImagesRequest)(nil),                               // 122: porter.v1.ImagesRequest
	(*ImagesResponse)(nil),                              // 123: porter.v1.ImagesResponse
	(*CreateAppInstanceRequest)(nil),                    // 124: porter.v1.CreateAppInstanceRequest
	(*CreateAppInstanceResponse)(nil),                   // 125: porter.v1.CreateAppInstanceResponse
	(*DeleteAppInstanceRequest)(nil),                    // 126: porter.v1.DeleteAppInstanceRequest
	(*DeleteAppInstanceResponse)(nil),                   // 127: porter.v1.DeleteAppInstanceResponse
	(*ListAppInstancesRequest)(nil),                     // 128: porter.v1.ListAppInstancesRequest
	(*ListAppInstancesResponse)(nil),                    // 129: porter.v1.ListAppInstancesResponse
	(*TemplateAppManifestsRequest)(nil),                 // 130: porter.v1.TemplateAppManifestsRequest
	(*TemplateAppManifestsResponse)(nil),                // 131: porter.v1.TemplateAppManifestsResponse
	(*AppInstance)(nil),                                 // 132: porter.v1.AppInstance
	(*CreateNotificationRequest)(nil),                   // 133: porter.v1.CreateNotificationRequest
	(*CreateNotificationResponse)(nil),                  // 134: porter.v1.CreateNotificationResponse
	(*UpdateServiceDeploymentStatusRequest)(nil),        // 135: porter.v1.UpdateServiceDeploymentStatusRequest
	(*RecordPrometheusAlertRequest)(nil),                // 136: porter.v1.RecordPrometheusAlertRequest
	(*RecordPrometheusAlertResponse)(nil),               // 137: porter.v1.RecordPrometheusAlertResponse
	(*UpdateServiceDeploymentStatusResponse)(nil),       // 138: porter.v1.UpdateServiceDeploymentStatusResponse
	(*AreExternalEnvGroupProvidersEnabledRequest)(nil),  // 139: porter.v1.AreExternalEnvGroupProvidersEnabledRequest
	(*AreExternalEnvGroupProvidersEnabledResponse)(nil), // 140: porter.v1.AreExternalEnvGroupProvidersEnabledResponse
	(*EnableExternalEnvGroupProvidersRequest)(nil),      // 141: porter.v1.EnableExternalEnvGroupProvidersRequest
	(*EnableExternalEnvGroupProvidersResponse)(nil),     // 142: porter.v1.EnableExternalEnvGroupProvidersResponse
	(*CreateOrUpdateEnvGroupRequest)(nil),               // 143: porter.v1.CreateOrUpdateEnvGroupRequest
	(*CreateOrUpdateEnvGroupResponse)(nil),              // 144: porter.v1.CreateOrUpdateEnvGroupResponse
	(*DeleteEnvGroupRequest)(nil),                       // 145: porter.v1.DeleteEnvGroupRequest
	(*DeleteEnvGroupResponse)(nil),                      // 146: porter.v1.DeleteEnvGroupResponse
	(*AppsLinkedToEnvGroupRequest)(nil),                 // 147: porter.v1.AppsLinkedToEnvGroupRequest
	(*AppsLinkedToEnvGroupResponse)(nil),                // 148: porter.v1.AppsLinkedToEnvGroupResponse
	(*ListEnvGroupsRequest)(nil),                        // 149: porter.v1.ListEnvGroupsRequest
	(*ListEnvGroupsResponse)(nil),                       // 150: porter.v1.ListEnvGroupsResponse
	(*UpdateNotificationConfigRequest)(nil),             // 151: porter.v1.UpdateNotificationConfigRequest
	(*UpdateNotificationConfigResponse)(nil),            // 152: porter.v1.UpdateNotificationConfigResponse
	(*NotificationConfigRequest)(nil),                   // 153: porter.v1.NotificationConfigRequest
	(*NotificationConfigResponse)(nil),                  // 154: porter.v1.NotificationConfigResponse
	(*ConnectHostedProjectRequest)(nil),                 // 155: porter.v1.ConnectHostedProjectRequest
	(*ConnectHostedProjectResponse)(nil),                // 156: porter.v1.ConnectHostedProjectResponse
	(*UpdateDatastoreRequest)(nil),                      // 157: porter.v1.UpdateDatastoreRequest
	(*UpdateDatastoreResponse)(nil),                     // 158: porter.v1.UpdateDatastoreResponse
	(*DeleteDatastoreRequest)(nil),                      // 159: porter.v1.DeleteDatastoreRequest
	(*DeleteDatastoreResponse)(nil),                     // 160: porter.v1.DeleteDatastoreResponse
	(*CreateDatastoreProxyRequest)(nil),                 // 161: porter.v1.CreateDatastoreProxyRequest
	(*CreateDatastoreProxyResponse)(nil),                // 162: porter.v1.CreateDatastoreProxyResponse
	(*DatastoreCredentialRequest)(nil),                  // 163: porter.v1.DatastoreCredentialRequest
	(*DatastoreCredentialResponse)(nil),                 // 164: porter.v1.DatastoreCredentialResponse
	(*PatchCloudContractRequest)(nil),                   // 165: porter.v1.PatchCloudContractRequest
	(*PatchCloudContractResponse)(nil),                  // 166: porter.v1.PatchCloudContractResponse
	(*ReadCloudContractRequest)(nil),                    // 167: porter.v1.ReadCloudContractRequest
	(*ReadCloudContractResponse)(nil),                   // 168: porter.v1.ReadCloudContractResponse
	(*EKSBearerTokenRequest)(nil),                       // 169: porter.v1.EKSBearerTokenRequest
	(*EKSBearerTokenResponse)(nil),                      // 170: porter.v1.EKSBearerTokenResponse
	(*CertificateAuthorityDataRequest)(nil),             // 171: porter.v1.CertificateAuthorityDataRequest
	(*CertificateAuthorityDataResponse)(nil),            // 172: porter.v1.CertificateAuthorityDataResponse
	(*AssumeRoleChainTargetsRequest)(nil),               // 173: porter.v1.AssumeRoleChainTargetsRequest
	(*AssumeRoleChainTargetsResponse)(nil),              // 174: porter.v1.AssumeRoleChainTargetsResponse
	(*ECRTokenForRegistryRequest)(nil),                  // 175: porter.v1.ECRTokenForRegistryRequest
	(*ECRTokenForRegistryResponse)(nil),                 // 176: porter.v1.ECRTokenForRegistryResponse
	(*AssumeRoleCredentialsRequest)(nil),                // 177: porter.v1.AssumeRoleCredentialsRequest
	(*AssumeRoleCredentialsResponse)(nil),               // 178: porter.v1.AssumeRoleCredentialsResponse
	(*DockerConfigFileForRegistryRequest)(nil),          // 179: porter.v1.DockerConfigFileForRegistryRequest
	(*DockerConfigFileForRegistryResponse)(nil),         // 180: porter.v1.DockerConfigFileForRegistryResponse
	(*ClusterNetworkSettingsRequest)(nil),               // 181: porter.v1.ClusterNetworkSettingsRequest
	(*ClusterNetworkSettingsResponse)(nil),              // 182: porter.v1.ClusterNetworkSettingsResponse
	(*ListDatastoresRequest)(nil),                       // 183: porter.v1.ListDatastoresRequest
	(*ListDatastoresResponse)(nil),                      // 184: porter.v1.ListDatastoresResponse
	(*DatastoreStatusRequest)(nil),                      // 185: porter.v1.DatastoreStatusRequest
	(*DatastoreStatusResponse)(nil),                     // 186: porter.v1.DatastoreStatusResponse
	(*Datastore)(nil),                                   // 187: porter.v1.Datastore
	(*DatastoreMetadata)(nil),                           // 188: porter.v1.DatastoreMetadata
	(*RegistryStatusRequest)(nil),                       // 189: porter.v1.RegistryStatusRequest
	(*RegistryStatusResponse)(nil),                      // 190: porter.v1.RegistryStatusResponse
	(*SharedNetworkSettingsRequest)(nil),                // 191: porter.v1.SharedNetworkSettingsRequest
	(*SharedNetworkSettingsResponse)(nil),               // 192: porter.v1.SharedNetworkSettingsResponse
	(*SystemStatusHistoryRequest)(nil),                  // 193: porter.v1.SystemStatusHistoryRequest
	(*SystemStatusHistoryResponse)(nil),                 // 194: porter.v1.SystemStatusHistoryResponse
	(*AppEventWebhooksRequest)(nil),                     // 195: porter.v1.AppEventWebhooksRequest
	(*AppEventWebhooksResponse)(nil),                    // 196: porter.v1.AppEventWebhooksResponse
	(*UpdateAppEventWebhooksRequest)(nil),               // 197: porter.v1.UpdateAppEventWebhooksRequest
	(*UpdateAppEventWebhooksResponse)(nil),              // 198: porter.v1.UpdateAppEventWebhooksResponse
	nil,                                                 // 199: porter.v1.PreflightCheckResponse.PreflightChecksEntry
	nil,                                                 // 200: porter.v1.CloudContractPreflightCheck.MetadataEntry
	(EnumCloudProvider)(0),                              // 201: porter.v1.EnumCloudProvider
	(*MachineType)(nil),                                 // 202: porter.v1.MachineType
	(*GKEPreflightValues)(nil),                          // 203: porter.v1.GKEPreflightValues
	(*EKSPreflightValues)(nil),                          // 204: porter.v1.EKSPreflightValues
	(*Error)(nil),                                       // 205: porter.v1.Error
	(*Contract)(nil),                                    // 206: porter.v1.Contract
	(*ContractRevision)(nil),                            // 207: porter.v1.ContractRevision
	(*timestamppb.Timestamp)(nil),                       // 208: google.protobuf.Timestamp
	(EnumComplianceVendor)(0),                           // 209: porter.v1.EnumComplianceVendor
	(EnumComplianceProfile)(0),                          // 210: porter.v1.EnumComplianceProfile
	(*ContractComplianceCheckGroup)(nil),                // 211: porter.v1.ContractComplianceCheckGroup
	(*VendorComplianceCheck)(nil),                       // 212: porter.v1.VendorComplianceCheck
	(*PorterApp)(nil),                                   // 213: porter.v1.PorterApp
	(*Deletions)(nil),                                   // 214: porter.v1.Deletions
	(*DeploymentTargetIdentifier)(nil),                  // 215: porter.v1.DeploymentTargetIdentifier
	(*EnvGroupVariables)(nil),                           // 216: porter.v1.EnvGroupVariables
	(*Addon)(nil),                                       // 217: porter.v1.Addon
	(EnumAppRevisionStatus)(0),                          // 218: porter.v1.EnumAppRevisionStatus
	(*AppImage)(nil),                                    // 219: porter.v1.AppImage
	(*PrerequisiteAddon)(nil),                           // 220: porter.v1.PrerequisiteAddon
	(*DeploymentTarget)(nil),                            // 221: porter.v1.DeploymentTarget
	(*EnvGroup)(nil),                                    // 222: porter.v1.EnvGroup
	(*Build)(nil),                                       // 223: porter.v1.Build
	(*JobRun)(nil),                                      // 224: porter.v1.JobRun
	(AppEventType)(0),                                   // 225: porter.v1.AppEventType
	(*Alert)(nil),                                       // 226: porter.v1.Alert
	(*ExternalEnvGroupProviderEnabledStatus)(nil),       // 227: porter.v1.ExternalEnvGroupProviderEnabledStatus
	(EnumEnvGroupProviderType)(0),                       // 228: porter.v1.EnumEnvGroupProviderType
	(*EnvVariableDeletions)(nil),                        // 229: porter.v1.EnvVariableDeletions
	(*InfisicalEnv)(nil),                                // 230: porter.v1.InfisicalEnv
	(*NotificationConfig)(nil),                          // 231: porter.v1.NotificationConfig
	(*ManagedDatastore)(nil),                            // 232: porter.v1.ManagedDatastore
	(*DatastoreCredential)(nil),                         // 233: porter.v1.DatastoreCredential
	(*CloudContract)(nil),                               // 234: porter.v1.CloudContract
	(*AssumeRoleChainLink)(nil),                         // 235: porter.v1.AssumeRoleChainLink
	(*AWSVpc)(nil),                                      // 236: porter.v1.AWSVpc
	(*ClusterStatusHistory)(nil),                        // 237: porter.v1.ClusterStatusHistory
	(*ServiceStatusHistory)(nil),                        // 238: porter.v1.ServiceStatusHistory
	(*AppEventWebhook)(nil),                             // 239: porter.v1.AppEventWebhook
	(*UpdateCloudProviderCredentialsRequest)(nil),       // 240: porter.v1.UpdateCloudProviderCredentialsRequest
	(*CloudProviderPermissionsStatusRequest)(nil),       // 241: porter.v1.CloudProviderPermissionsStatusRequest
	(*UpdateCloudProviderCredentialsResponse)(nil),      // 242: porter.v1.UpdateCloudProviderCredentialsResponse
	(*CloudProviderPermissionsStatusResponse)(nil),      // 243: porter.v1.CloudProviderPermissionsStatusResponse
}
var file_porter_v1_cluster_control_plane_proto_depIdxs = []int32{
	201, // 0: porter.v1.MachineTypesRequest.cloud_provider:type_name -> porter.v1.EnumCloudProvider
	202, // 1: porter.v1.MachineTypesResponse.machine_types:type_name -> porter.v1.MachineType
	202, // 2: porter.v1.MachineTypesResponse.unsupported_machine_types:type_name -> porter.v1.MachineType
	201, // 3: porter.v1.QuotaIncreaseRequest.cloud_provider:type_name -> porter.v1.EnumCloudProvider
	2,   // 4: porter.v1.QuotaIncreaseRequest.quota_increases:type_name -> porter.v1.EnumQuotaIncrease
	203, // 5: porter.v1.QuotaIncreaseRequest.gke_preflight_values:type_name -> porter.v1.GKEPreflightValues
	204, // 6: porter.v1.QuotaIncreaseRequest.eks_preflight_values:type_name -> porter.v1.EKSPreflightValues
	205, // 7: porter.v1.QuotaIncreaseResponse.error:type_name -> porter.v1.Error
	201, // 8: porter.v1.PreflightCheckRequest.cloud_provider:type_name -> porter.v1.EnumCloudProvider
	203, // 9: porter.v1.PreflightCheckRequest.gke_preflight_values:type_name -> porter.v1.GKEPreflightValues
	204, // 10: porter.v1.PreflightCheckRequest.eks_preflight_values:type_name -> porter.v1.EKSPreflightValues
	206, // 11: porter.v1.PreflightCheckRequest.contract:type_name -> porter.v1.Contract
	199, // 12: porter.v1.PreflightCheckResponse.preflight_checks:type_name -> porter.v1.PreflightCheckResponse.PreflightChecksEntry
	206, // 13: porter.v1.CloudContractPreflightCheckRequest.contract:type_name -> porter.v1.Contract
	17,  // 14: porter.v1.CloudContractPreflightCheckResponse.failing_preflight_checks:type_name -> porter.v1.CloudContractPreflightCheck
	200, // 15: porter.v1.CloudContractPreflightCheck.metadata:type_name -> porter.v1.CloudContractPreflightCheck.MetadataEntry
	206, // 16: porter.v1.UpdateContractRequest.contract:type_name -> porter.v1.Contract
	207, // 17: porter.v1.UpdateContractResponse.contract_revision:type_name -> porter.v1.ContractRevision
	207, // 18: porter.v1.DeleteClusterRequest.contract_revision:type_name -> porter.v1.ContractRevision
	34,  // 19: porter.v1.ListRepositoriesForRegistryResponse.repositories:type_name -> porter.v1.Repository
	37,  // 20: porter.v1.ListImagesForRepositoryResponse.images:type_name -> porter.v1.Image
	208, // 21: porter.v1.Image.updated_at:type_name -> google.protobuf.Timestamp
	39,  // 22: porter.v1.ImageInfo.artifacts:type_name -> porter.v1.ImageArtifact
	208, // 23: porter.v1.ImageArtifact.updated_at:type_name -> google.protobuf.Timestamp
	208, // 24: porter.v1.TokenForRegistryResponse.expiry:type_name -> google.protobuf.Timestamp
	207, // 25: porter.v1.ReadContractRequest.contract_revision:type_name -> porter.v1.ContractRevision
	209, // 26: porter.v1.ContractComplianceChecksRequest.vendor:type_name -> porter.v1.EnumComplianceVendor
	210, // 27: porter.v1.ContractComplianceChecksRequest.profile:type_name -> porter.v1.EnumComplianceProfile
	211, // 28: porter.v1.ContractComplianceChecksResponse.check_groups:type_name -> porter.v1.ContractComplianceCheckGroup
	212, // 29: porter.v1.ContractComplianceChecksResponse.vendor_checks:type_name -> porter.v1.VendorComplianceCheck
	213, // 30: porter.v1.ValidatePorterAppRequest.app:type_name -> porter.v1.PorterApp
	214, // 31: porter.v1.ValidatePorterAppRequest.deletions:type_name -> porter.v1.Deletions
	213, // 32: porter.v1.ValidatePorterAppRequest.app_overrides:type_name -> porter.v1.PorterApp
	215, // 33: porter.v1.ValidatePorterAppRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	213, // 34: porter.v1.ValidatePorterAppResponse.app:type_name -> porter.v1.PorterApp
	213, // 35: porter.v1.ApplyPorterAppRequest.app:type_name -> porter.v1.PorterApp
	216, // 36: porter.v1.ApplyPorterAppRequest.app_env:type_name -> porter.v1.EnvGroupVariables
	215, // 37: porter.v1.ApplyPorterAppRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	3,   // 38: porter.v1.ApplyPorterAppResponse.cli_action:type_name -> porter.v1.EnumCLIAction
	215, // 39: porter.v1.UpdateAppRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	213, // 40: porter.v1.UpdateAppRequest.app:type_name -> porter.v1.PorterApp
	216, // 41: porter.v1.UpdateAppRequest.app_env:type_name -> porter.v1.EnvGroupVariables
	214, // 42: porter.v1.UpdateAppRequest.deletions:type_name -> porter.v1.Deletions
	213, // 43: porter.v1.UpdateAppRequest.app_overrides:type_name -> porter.v1.PorterApp
	217, // 44: porter.v1.UpdateAppRequest.addons:type_name -> porter.v1.Addon
	217, // 45: porter.v1.UpdateAppRequest.addon_overrides:type_name -> porter.v1.Addon
	216, // 46: porter.v1.UpdateAppRequest.app_env_overrides:type_name -> porter.v1.EnvGroupVariables
	3,   // 47: porter.v1.UpdateAppResponse.cli_action:type_name -> porter.v1.EnumCLIAction
	215, // 48: porter.v1.UpdateAddonRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	217, // 49: porter.v1.UpdateAddonRequest.addon:type_name -> porter.v1.Addon
	216, // 50: porter.v1.UpdateAddonRequest.addon_env:type_name -> porter.v1.EnvGroupVariables
	215, // 51: porter.v1.DeleteAddonRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	4,   // 52: porter.v1.UpdateRevisionStatusRequest.revision_status:type_name -> porter.v1.EnumRevisionStatus
	215, // 53: porter.v1.RollbackRevisionRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	215, // 54: porter.v1.DeleteAppDeploymentRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	215, // 55: porter.v1.DeleteDeploymentTargetRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	215, // 56: porter.v1.CurrentAppRevisionRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	213, // 57: porter.v1.AppRevision.app:type_name -> porter.v1.PorterApp
	208, // 58: porter.v1.AppRevision.created_at:type_name -> google.protobuf.Timestamp
	208, // 59: porter.v1.AppRevision.updated_at:type_name -> google.protobuf.Timestamp
	218, // 60: porter.v1.AppRevisionStatusResponse.status:type_name -> porter.v1.EnumAppRevisionStatus
	219, // 61: porter.v1.UpdateRevisionPayload.image:type_name -> porter.v1.AppImage
	0,   // 62: porter.v1.UpdateRevisionPayload.triggered_by:type_name -> porter.v1.EnumUpdateTrigger
	220, // 63: porter.v1.UpdateRevisionPayload.prerequisite_addons:type_name -> porter.v1.PrerequisiteAddon
	215, // 64: porter.v1.RequireAppPayload.source_deployment_target:type_name -> porter.v1.DeploymentTargetIdentifier
	67,  // 65: porter.v1.CurrentAppRevisionResponse.app_revision:type_name -> porter.v1.AppRevision
	215, // 66: porter.v1.ListAppRevisionsRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	67,  // 67: porter.v1.ListAppRevisionsResponse.app_revisions:type_name -> porter.v1.AppRevision
	215, // 68: porter.v1.LatestAppRevisionsRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	67,  // 69: porter.v1.LatestAppRevisionsResponse.app_revisions:type_name -> porter.v1.AppRevision
	67,  // 70: porter.v1.GetAppRevisionResponse.app_revision:type_name -> porter.v1.AppRevision
	213, // 71: porter.v1.AppTemplateResponse.app_template:type_name -> porter.v1.PorterApp
	216, // 72: porter.v1.AppTemplateResponse.app_env:type_name -> porter.v1.EnvGroupVariables
	83,  // 73: porter.v1.AppTemplateResponse.addon_templates:type_name -> porter.v1.AddonWithEnvVars
	217, // 74: porter.v1.AddonTemplatesPayload.addon_templates:type_name -> porter.v1.Addon
	217, // 75: porter.v1.AddonWithEnvVars.addon:type_name -> porter.v1.Addon
	216, // 76: porter.v1.AddonWithEnvVars.env_vars:type_name -> porter.v1.EnvGroupVariables
	213, // 77: porter.v1.UpdateAppTemplateRequest.app_template:type_name -> porter.v1.PorterApp
	216, // 78: porter.v1.UpdateAppTemplateRequest.app_env:type_name -> porter.v1.EnvGroupVariables
	83,  // 79: porter.v1.UpdateAppTemplateRequest.addon_templates:type_name -> porter.v1.AddonWithEnvVars
	215, // 80: porter.v1.LatestAddonsRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	217, // 81: porter.v1.LatestAddonsResponse.addons:type_name -> porter.v1.Addon
	83,  // 82: porter.v1.LatestAddonsResponse.addons_with_env:type_name -> porter.v1.AddonWithEnvVars
	1,   // 83: porter.v1.PredeployStatusResponse.predeploy_status:type_name -> porter.v1.EnumPredeployStatus
	215, // 84: porter.v1.DeploymentTargetDetailsRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	221, // 85: porter.v1.DeploymentTargetDetailsResponse.deployment_target:type_name -> porter.v1.DeploymentTarget
	221, // 86: porter.v1.DeploymentTargetsResponse.deployment_targets:type_name -> porter.v1.DeploymentTarget
	221, // 87: porter.v1.DefaultDeploymentTargetResponse.deployment_target:type_name -> porter.v1.DeploymentTarget
	222, // 88: porter.v1.EnvGroupVariablesRequest.env_group:type_name -> porter.v1.EnvGroup
	215, // 89: porter.v1.EnvGroupVariablesRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	216, // 90: porter.v1.EnvGroupVariablesResponse.env_group_variables:type_name -> porter.v1.EnvGroupVariables
	215, // 91: porter.v1.LatestEnvGroupWithVariablesRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	222, // 92: porter.v1.LatestEnvGroupWithVariablesResponse.env_group:type_name -> porter.v1.EnvGroup
	216, // 93: porter.v1.LatestEnvGroupWithVariablesResponse.env_group_variables:type_name -> porter.v1.EnvGroupVariables
	215, // 94: porter.v1.AppEnvVariablesRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	216, // 95: porter.v1.AppEnvVariablesResponse.env_variables:type_name -> porter.v1.EnvGroupVariables
	215, // 96: porter.v1.UpdateAppImageRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	215, // 97: porter.v1.UpdateAppBuildSettingsRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	223, // 98: porter.v1.UpdateAppBuildSettingsRequest.build:type_name -> porter.v1.Build
	215, // 99: porter.v1.AppHelmValuesRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	215, // 100: porter.v1.ManualServiceRunRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	219, // 101: porter.v1.ManualServiceRunRequest.image:type_name -> porter.v1.AppImage
	215, // 102: porter.v1.CancelJobRunRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	215, // 103: porter.v1.JobRunStatusRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	224, // 104: porter.v1.JobRunStatusResponse.job_run:type_name -> porter.v1.JobRun
	215, // 105: porter.v1.JobRunsRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	224, // 106: porter.v1.JobRunsResponse.job_runs:type_name -> porter.v1.JobRun
	38,  // 107: porter.v1.ImagesResponse.images:type_name -> porter.v1.ImageInfo
	215, // 108: porter.v1.CreateAppInstanceRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	215, // 109: porter.v1.DeleteAppInstanceRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	215, // 110: porter.v1.ListAppInstancesRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	132, // 111: porter.v1.ListAppInstancesResponse.app_instances:type_name -> porter.v1.AppInstance
	215, // 112: porter.v1.TemplateAppManifestsRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	215, // 113: porter.v1.CreateNotificationRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	225, // 114: porter.v1.CreateNotificationRequest.app_event_type:type_name -> porter.v1.AppEventType
	215, // 115: porter.v1.UpdateServiceDeploymentStatusRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	5,   // 116: porter.v1.UpdateServiceDeploymentStatusRequest.status:type_name -> porter.v1.EnumServiceDeploymentStatus
	226, // 117: porter.v1.RecordPrometheusAlertRequest.alerts:type_name -> porter.v1.Alert
	205, // 118: porter.v1.RecordPrometheusAlertResponse.error:type_name -> porter.v1.Error
	227, // 119: porter.v1.AreExternalEnvGroupProvidersEnabledResponse.operators:type_name -> porter.v1.ExternalEnvGroupProviderEnabledStatus
	228, // 120: porter.v1.CreateOrUpdateEnvGroupRequest.env_group_provider_type:type_name -> porter.v1.EnumEnvGroupProviderType
	216, // 121: porter.v1.CreateOrUpdateEnvGroupRequest.env_vars:type_name -> porter.v1.EnvGroupVariables
	229, // 122: porter.v1.CreateOrUpdateEnvGroupRequest.env_variable_deletions:type_name -> porter.v1.EnvVariableDeletions
	230, // 123: porter.v1.CreateOrUpdateEnvGroupRequest.infisical_env:type_name -> porter.v1.InfisicalEnv
	228, // 124: porter.v1.DeleteEnvGroupRequest.env_group_provider_type:type_name -> porter.v1.EnumEnvGroupProviderType
	132, // 125: porter.v1.AppsLinkedToEnvGroupResponse.linked_apps:type_name -> porter.v1.AppInstance
	222, // 126: porter.v1.ListEnvGroupsResponse.env_groups:type_name -> porter.v1.EnvGroup
	231, // 127: porter.v1.UpdateNotificationConfigRequest.config:type_name -> porter.v1.NotificationConfig
	231, // 128: porter.v1.NotificationConfigResponse.config:type_name -> porter.v1.NotificationConfig
	232, // 129: porter.v1.UpdateDatastoreRequest.datastore:type_name -> porter.v1.ManagedDatastore
	233, // 130: porter.v1.CreateDatastoreProxyResponse.credential:type_name -> porter.v1.DatastoreCredential
	233, // 131: porter.v1.DatastoreCredentialResponse.credential:type_name -> porter.v1.DatastoreCredential
	6,   // 132: porter.v1.PatchCloudContractRequest.operation:type_name -> porter.v1.EnumPatchCloudContractOperation
	7,   // 133: porter.v1.PatchCloudContractRequest.resource_type:type_name -> porter.v1.EnumPatchCloudContractType
	232, // 134: porter.v1.PatchCloudContractRequest.datastore:type_name -> porter.v1.ManagedDatastore
	234, // 135: porter.v1.PatchCloudContractResponse.cloud_contract:type_name -> porter.v1.CloudContract
	234, // 136: porter.v1.ReadCloudContractResponse.cloud_contract:type_name -> porter.v1.CloudContract
	235, // 137: porter.v1.AssumeRoleChainTargetsResponse.chain_links:type_name -> porter.v1.AssumeRoleChainLink
	208, // 138: porter.v1.ECRTokenForRegistryResponse.expiry:type_name -> google.protobuf.Timestamp
	201, // 139: porter.v1.ClusterNetworkSettingsResponse.cloud_provider:type_name -> porter.v1.EnumCloudProvider
	236, // 140: porter.v1.ClusterNetworkSettingsResponse.eks_cloud_provider_network:type_name -> porter.v1.AWSVpc
	201, // 141: porter.v1.ListDatastoresRequest.cloud_provider:type_name -> porter.v1.EnumCloudProvider
	8,   // 142: porter.v1.ListDatastoresRequest.type:type_name -> porter.v1.EnumDatastore
	187, // 143: porter.v1.ListDatastoresResponse.datastores:type_name -> porter.v1.Datastore
	8,   // 144: porter.v1.DatastoreStatusRequest.type:type_name -> porter.v1.EnumDatastore
	8,   // 145: porter.v1.Datastore.type:type_name -> porter.v1.EnumDatastore
	188, // 146: porter.v1.Datastore.metadata:type_name -> porter.v1.DatastoreMetadata
	222, // 147: porter.v1.Datastore.env:type_name -> porter.v1.EnvGroup
	201, // 148: porter.v1.SharedNetworkSettingsResponse.cloud_provider:type_name -> porter.v1.EnumCloudProvider
	236, // 149: porter.v1.SharedNetworkSettingsResponse.eks_cloud_provider_network:type_name -> porter.v1.AWSVpc
	201, // 150: porter.v1.SystemStatusHistoryRequest.cloud_provider:type_name -> porter.v1.EnumCloudProvider
	237, // 151: porter.v1.SystemStatusHistoryResponse.cluster_status_histories:type_name -> porter.v1.ClusterStatusHistory
	238, // 152: porter.v1.SystemStatusHistoryResponse.system_service_status_histories:type_name -> porter.v1.ServiceStatusHistory
	215, // 153: porter.v1.AppEventWebhooksRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	239, // 154: porter.v1.AppEventWebhooksResponse.app_event_webhooks:type_name -> porter.v1.AppEventWebhook
	215, // 155: porter.v1.UpdateAppEventWebhooksRequest.deployment_target_identifier:type_name -> porter.v1.DeploymentTargetIdentifier
	239, // 156: porter.v1.UpdateAppEventWebhooksRequest.app_event_webhooks:type_name -> porter.v1.AppEventWebhook
	205, // 157: porter.v1.PreflightCheckResponse.PreflightChecksEntry.value:type_name -> porter.v1.Error
	9,   // 158: porter.v1.ClusterControlPlaneService.MachineTypes:input_type -> porter.v1.MachineTypesRequest
	11,  // 159: porter.v1.ClusterControlPlaneService.QuotaIncrease:input_type -> porter.v1.QuotaIncreaseRequest
	240, // 160: porter.v1.ClusterControlPlaneService.UpdateCloudProviderCredentials:input_type -> porter.v1.UpdateCloudProviderCredentialsRequest
	18,  // 161: porter.v1.ClusterControlPlaneService.QuotaPreflightCheck:input_type -> porter.v1.QuotaPreflightCheckRequest
	13,  // 162: porter.v1.ClusterControlPlaneService.PreflightCheck:input_type -> porter.v1.PreflightCheckRequest
	15,  // 163: porter.v1.ClusterControlPlaneService.CloudContractPreflightCheck:input_type -> porter.v1.CloudContractPreflightCheckRequest
	20,  // 164: porter.v1.ClusterControlPlaneService.CreateAssumeRoleChain:input_type -> porter.v1.CreateAssumeRoleChainRequest
	22,  // 165: porter.v1.ClusterControlPlaneService.SaveAzureCredentials:input_type -> porter.v1.SaveAzureCredentialsRequest
	24,  // 166: porter.v1.ClusterControlPlaneService.KubeConfigForCluster:input_type -> porter.v1.KubeConfigForClusterRequest
	26,  // 167: porter.v1.ClusterControlPlaneService.UpdateContract:input_type -> porter.v1.UpdateContractRequest
	42,  // 168: porter.v1.ClusterControlPlaneService.ReadContract:input_type -> porter.v1.ReadContractRequest
	28,  // 169: porter.v1.ClusterControlPlaneService.ClusterStatus:input_type -> porter.v1.ClusterStatusRequest
	30,  // 170: porter.v1.ClusterControlPlaneService.DeleteCluster:input_type -> porter.v1.DeleteClusterRequest
	40,  // 171: porter.v1.ClusterControlPlaneService.TokenForRegistry:input_type -> porter.v1.TokenForRegistryRequest
	44,  // 172: porter.v1.ClusterControlPlaneService.ContractComplianceChecks:input_type -> porter.v1.ContractComplianceChecksRequest
	46,  // 173: porter.v1.ClusterControlPlaneService.ValidatePorterApp:input_type -> porter.v1.ValidatePorterAppRequest
	48,  // 174: porter.v1.ClusterControlPlaneService.ApplyPorterApp:input_type -> porter.v1.ApplyPorterAppRequest
	50,  // 175: porter.v1.ClusterControlPlaneService.UpdateApp:input_type -> porter.v1.UpdateAppRequest
	52,  // 176: porter.v1.ClusterControlPlaneService.UpdateAddon:input_type -> porter.v1.UpdateAddonRequest
	54,  // 177: porter.v1.ClusterControlPlaneService.DeleteAddon:input_type -> porter.v1.DeleteAddonRequest
	58,  // 178: porter.v1.ClusterControlPlaneService.RollbackRevision:input_type -> porter.v1.RollbackRevisionRequest
	56,  // 179: porter.v1.ClusterControlPlaneService.UpdateRevisionStatus:input_type -> porter.v1.UpdateRevisionStatusRequest
	68,  // 180: porter.v1.ClusterControlPlaneService.AppRevisionStatus:input_type -> porter.v1.AppRevisionStatusRequest
	60,  // 181: porter.v1.ClusterControlPlaneService.DeletePorterApp:input_type -> porter.v1.DeletePorterAppRequest
	62,  // 182: porter.v1.ClusterControlPlaneService.DeleteAppDeployment:input_type -> porter.v1.DeleteAppDeploymentRequest
	64,  // 183: porter.v1.ClusterControlPlaneService.DeleteDeploymentTarget:input_type -> porter.v1.DeleteDeploymentTargetRequest
	66,  // 184: porter.v1.ClusterControlPlaneService.CurrentAppRevision:input_type -> porter.v1.CurrentAppRevisionRequest
	74,  // 185: porter.v1.ClusterControlPlaneService.ListAppRevisions:input_type -> porter.v1.ListAppRevisionsRequest
	76,  // 186: porter.v1.ClusterControlPlaneService.LatestAppRevisions:input_type -> porter.v1.LatestAppRevisionsRequest
	78,  // 187: porter.v1.ClusterControlPlaneService.GetAppRevision:input_type -> porter.v1.GetAppRevisionRequest
	80,  // 188: porter.v1.ClusterControlPlaneService.AppTemplate:input_type -> porter.v1.AppTemplateRequest
	84,  // 189: porter.v1.ClusterControlPlaneService.UpdateAppTemplate:input_type -> porter.v1.UpdateAppTemplateRequest
	86,  // 190: porter.v1.ClusterControlPlaneService.LatestAddons:input_type -> porter.v1.LatestAddonsRequest
	88,  // 191: porter.v1.ClusterControlPlaneService.PredeployStatus:input_type -> porter.v1.PredeployStatusRequest
	90,  // 192: porter.v1.ClusterControlPlaneService.DeploymentTargetDetails:input_type -> porter.v1.DeploymentTargetDetailsRequest
	92,  // 193: porter.v1.ClusterControlPlaneService.CreateDeploymentTarget:input_type -> porter.v1.CreateDeploymentTargetRequest
	94,  // 194: porter.v1.ClusterControlPlaneService.DeploymentTargets:input_type -> porter.v1.DeploymentTargetsRequest
	96,  // 195: porter.v1.ClusterControlPlaneService.DefaultDeploymentTarget:input_type -> porter.v1.DefaultDeploymentTargetRequest
	98,  // 196: porter.v1.ClusterControlPlaneService.SeedAppRevisions:input_type -> porter.v1.SeedAppRevisionsRequest
	100, // 197: porter.v1.ClusterControlPlaneService.EnvGroupVariables:input_type -> porter.v1.EnvGroupVariablesRequest
	102, // 198: porter.v1.ClusterControlPlaneService.LatestEnvGroupWithVariables:input_type -> porter.v1.LatestEnvGroupWithVariablesRequest
	104, // 199: porter.v1.ClusterControlPlaneService.AppEnvVariables:input_type -> porter.v1.AppEnvVariablesRequest
	106, // 200: porter.v1.ClusterControlPlaneService.UpdateAppImage:input_type -> porter.v1.UpdateAppImageRequest
	108, // 201: porter.v1.ClusterControlPlaneService.UpdateAppBuildSettings:input_type -> porter.v1.UpdateAppBuildSettingsRequest
	110, // 202: porter.v1.ClusterControlPlaneService.UpdateAppsLinkedToEnvGroup:input_type -> porter.v1.UpdateAppsLinkedToEnvGroupRequest
	112, // 203: porter.v1.ClusterControlPlaneService.AppHelmValues:input_type -> porter.v1.AppHelmValuesRequest
	114, // 204: porter.v1.ClusterControlPlaneService.ManualServiceRun:input_type -> porter.v1.ManualServiceRunRequest
	115, // 205: porter.v1.ClusterControlPlaneService.CancelJobRun:input_type -> porter.v1.CancelJobRunRequest
	118, // 206: porter.v1.ClusterControlPlaneService.JobRunStatus:input_type -> porter.v1.JobRunStatusRequest
	120, // 207: porter.v1.ClusterControlPlaneService.JobRuns:input_type -> porter.v1.JobRunsRequest
	181, // 208: porter.v1.ClusterControlPlaneService.ClusterNetworkSettings:input_type -> porter.v1.ClusterNetworkSettingsRequest
	191, // 209: porter.v1.ClusterControlPlaneService.SharedNetworkSettings:input_type -> porter.v1.SharedNetworkSettingsRequest
	122, // 210: porter.v1.ClusterControlPlaneService.Images:input_type -> porter.v1.ImagesRequest
	124, // 211: porter.v1.ClusterControlPlaneService.CreateAppInstance:input_type -> porter.v1.CreateAppInstanceRequest
	126, // 212: porter.v1.ClusterControlPlaneService.DeleteAppInstance:input_type -> porter.v1.DeleteAppInstanceRequest
	128, // 213: porter.v1.ClusterControlPlaneService.ListAppInstances:input_type -> porter.v1.ListAppInstancesRequest
	130, // 214: porter.v1.ClusterControlPlaneService.TemplateAppManifests:input_type -> porter.v1.TemplateAppManifestsRequest
	133, // 215: porter.v1.ClusterControlPlaneService.CreateNotification:input_type -> porter.v1.CreateNotificationRequest
	136, // 216: porter.v1.ClusterControlPlaneService.RecordPrometheusAlert:input_type -> porter.v1.RecordPrometheusAlertRequest
	135, // 217: porter.v1.ClusterControlPlaneService.UpdateServiceDeploymentStatus:input_type -> porter.v1.UpdateServiceDeploymentStatusRequest
	155, // 218: porter.v1.ClusterControlPlaneService.ConnectHostedProject:input_type -> porter.v1.ConnectHostedProjectRequest
	157, // 219: porter.v1.ClusterControlPlaneService.UpdateDatastore:input_type -> porter.v1.UpdateDatastoreRequest
	159, // 220: porter.v1.ClusterControlPlaneService.DeleteDatastore:input_type -> porter.v1.DeleteDatastoreRequest
	161, // 221: porter.v1.ClusterControlPlaneService.CreateDatastoreProxy:input_type -> porter.v1.CreateDatastoreProxyRequest
	163, // 222: porter.v1.ClusterControlPlaneService.DatastoreCredential:input_type -> porter.v1.DatastoreCredentialRequest
	241, // 223: porter.v1.ClusterControlPlaneService.CloudProviderPermissionsStatus:input_type -> porter.v1.CloudProviderPermissionsStatusRequest
	165, // 224: porter.v1.ClusterControlPlaneService.PatchCloudContract:input_type -> porter.v1.PatchCloudContractRequest
	167, // 225: porter.v1.ClusterControlPlaneService.ReadCloudContract:input_type -> porter.v1.ReadCloudContractRequest
	179, // 226: porter.v1.ClusterControlPlaneService.DockerConfigFileForRegistry:input_type -> porter.v1.DockerConfigFileForRegistryRequest
	175, // 227: porter.v1.ClusterControlPlaneService.ECRTokenForRegistry:input_type -> porter.v1.ECRTokenForRegistryRequest
	177, // 228: porter.v1.ClusterControlPlaneService.AssumeRoleCredentials:input_type -> porter.v1.AssumeRoleCredentialsRequest
	173, // 229: porter.v1.ClusterControlPlaneService.AssumeRoleChainTargets:input_type -> porter.v1.AssumeRoleChainTargetsRequest
	171, // 230: porter.v1.ClusterControlPlaneService.CertificateAuthorityData:input_type -> porter.v1.CertificateAuthorityDataRequest
	169, // 231: porter.v1.ClusterControlPlaneService.EKSBearerToken:input_type -> porter.v1.EKSBearerTokenRequest
	32,  // 232: porter.v1.ClusterControlPlaneService.ListRepositoriesForRegistry:input_type -> porter.v1.ListRepositoriesForRegistryRequest
	35,  // 233: porter.v1.ClusterControlPlaneService.ListImagesForRepository:input_type -> porter.v1.ListImagesForRepositoryRequest
	183, // 234: porter.v1.ClusterControlPlaneService.ListDatastores:input_type -> porter.v1.ListDatastoresRequest
	185, // 235: porter.v1.ClusterControlPlaneService.DatastoreStatus:input_type -> porter.v1.DatastoreStatusRequest
	189, // 236: porter.v1.ClusterControlPlaneService.RegistryStatus:input_type -> porter.v1.RegistryStatusRequest
	141, // 237: porter.v1.ClusterControlPlaneService.EnableExternalEnvGroupProviders:input_type -> porter.v1.EnableExternalEnvGroupProvidersRequest
	139, // 238: porter.v1.ClusterControlPlaneService.AreExternalEnvGroupProvidersEnabled:input_type -> porter.v1.AreExternalEnvGroupProvidersEnabledRequest
	143, // 239: porter.v1.ClusterControlPlaneService.CreateOrUpdateEnvGroup:input_type -> porter.v1.CreateOrUpdateEnvGroupRequest
	145, // 240: porter.v1.ClusterControlPlaneService.DeleteEnvGroup:input_type -> porter.v1.DeleteEnvGroupRequest
	147, // 241: porter.v1.ClusterControlPlaneService.AppsLinkedToEnvGroup:input_type -> porter.v1.AppsLinkedToEnvGroupRequest
	149, // 242: porter.v1.ClusterControlPlaneService.ListEnvGroups:input_type -> porter.v1.ListEnvGroupsRequest
	151, // 243: porter.v1.ClusterControlPlaneService.UpdateNotificationConfig:input_type -> porter.v1.UpdateNotificationConfigRequest
	153, // 244: porter.v1.ClusterControlPlaneService.NotificationConfig:input_type -> porter.v1.NotificationConfigRequest
	193, // 245: porter.v1.ClusterControlPlaneService.SystemStatusHistory:input_type -> porter.v1.SystemStatusHistoryRequest
	195, // 246: porter.v1.ClusterControlPlaneService.AppEventWebhooks:input_type -> porter.v1.AppEventWebhooksRequest
	197, // 247: porter.v1.ClusterControlPlaneService.UpdateAppEventWebhooks:input_type -> porter.v1.UpdateAppEventWebhooksRequest
	10,  // 248: porter.v1.ClusterControlPlaneService.MachineTypes:output_type -> porter.v1.MachineTypesResponse
	12,  // 249: porter.v1.ClusterControlPlaneService.QuotaIncrease:output_type -> porter.v1.QuotaIncreaseResponse
	242, // 250: porter.v1.ClusterControlPlaneService.UpdateCloudProviderCredentials:output_type -> porter.v1.UpdateCloudProviderCredentialsResponse
	19,  // 251: porter.v1.ClusterControlPlaneService.QuotaPreflightCheck:output_type -> porter.v1.QuotaPreflightCheckResponse
	14,  // 252: porter.v1.ClusterControlPlaneService.PreflightCheck:output_type -> porter.v1.PreflightCheckResponse
	16,  // 253: porter.v1.ClusterControlPlaneService.CloudContractPreflightCheck:output_type -> porter.v1.CloudContractPreflightCheckResponse
	21,  // 254: porter.v1.ClusterControlPlaneService.CreateAssumeRoleChain:output_type -> porter.v1.CreateAssumeRoleChainResponse
	23,  // 255: porter.v1.ClusterControlPlaneService.SaveAzureCredentials:output_type -> porter.v1.SaveAzureCredentialsResponse
	25,  // 256: porter.v1.ClusterControlPlaneService.KubeConfigForCluster:output_type -> porter.v1.KubeConfigForClusterResponse
	27,  // 257: porter.v1.ClusterControlPlaneService.UpdateContract:output_type -> porter.v1.UpdateContractResponse
	43,  // 258: porter.v1.ClusterControlPlaneService.ReadContract:output_type -> porter.v1.ReadContractResponse
	29,  // 259: porter.v1.ClusterControlPlaneService.ClusterStatus:output_type -> porter.v1.ClusterStatusResponse
	31,  // 260: porter.v1.ClusterControlPlaneService.DeleteCluster:output_type -> porter.v1.DeleteClusterResponse
	41,  // 261: porter.v1.ClusterControlPlaneService.TokenForRegistry:output_type -> porter.v1.TokenForRegistryResponse
	45,  // 262: porter.v1.ClusterControlPlaneService.ContractComplianceChecks:output_type -> porter.v1.ContractComplianceChecksResponse
	47,  // 263: porter.v1.ClusterControlPlaneService.ValidatePorterApp:output_type -> porter.v1.ValidatePorterAppResponse
	49,  // 264: porter.v1.ClusterControlPlaneService.ApplyPorterApp:output_type -> porter.v1.ApplyPorterAppResponse
	51,  // 265: porter.v1.ClusterControlPlaneService.UpdateApp:output_type -> porter.v1.UpdateAppResponse
	53,  // 266: porter.v1.ClusterControlPlaneService.UpdateAddon:output_type -> porter.v1.UpdateAddonResponse
	55,  // 267: porter.v1.ClusterControlPlaneService.DeleteAddon:output_type -> porter.v1.DeleteAddonResponse
	59,  // 268: porter.v1.ClusterControlPlaneService.RollbackRevision:output_type -> porter.v1.RollbackRevisionResponse
	57,  // 269: porter.v1.ClusterControlPlaneService.UpdateRevisionStatus:output_type -> porter.v1.UpdateRevisionStatusResponse
	69,  // 270: porter.v1.ClusterControlPlaneService.AppRevisionStatus:output_type -> porter.v1.AppRevisionStatusResponse
	61,  // 271: porter.v1.ClusterControlPlaneService.DeletePorterApp:output_type -> porter.v1.DeletePorterAppResponse
	63,  // 272: porter.v1.ClusterControlPlaneService.DeleteAppDeployment:output_type -> porter.v1.DeleteAppDeploymentResponse
	65,  // 273: porter.v1.ClusterControlPlaneService.DeleteDeploymentTarget:output_type -> porter.v1.DeleteDeploymentTargetResponse
	73,  // 274: porter.v1.ClusterControlPlaneService.CurrentAppRevision:output_type -> porter.v1.CurrentAppRevisionResponse
	75,  // 275: porter.v1.ClusterControlPlaneService.ListAppRevisions:output_type -> porter.v1.ListAppRevisionsResponse
	77,  // 276: porter.v1.ClusterControlPlaneService.LatestAppRevisions:output_type -> porter.v1.LatestAppRevisionsResponse
	79,  // 277: porter.v1.ClusterControlPlaneService.GetAppRevision:output_type -> porter.v1.GetAppRevisionResponse
	81,  // 278: porter.v1.ClusterControlPlaneService.AppTemplate:output_type -> porter.v1.AppTemplateResponse
	85,  // 279: porter.v1.ClusterControlPlaneService.UpdateAppTemplate:output_type -> porter.v1.UpdateAppTemplateResponse
	87,  // 280: porter.v1.ClusterControlPlaneService.LatestAddons:output_type -> porter.v1.LatestAddonsResponse
	89,  // 281: porter.v1.ClusterControlPlaneService.PredeployStatus:output_type -> porter.v1.PredeployStatusResponse
	91,  // 282: porter.v1.ClusterControlPlaneService.DeploymentTargetDetails:output_type -> porter.v1.DeploymentTargetDetailsResponse
	93,  // 283: porter.v1.ClusterControlPlaneService.CreateDeploymentTarget:output_type -> porter.v1.CreateDeploymentTargetResponse
	95,  // 284: porter.v1.ClusterControlPlaneService.DeploymentTargets:output_type -> porter.v1.DeploymentTargetsResponse
	97,  // 285: porter.v1.ClusterControlPlaneService.DefaultDeploymentTarget:output_type -> porter.v1.DefaultDeploymentTargetResponse
	99,  // 286: porter.v1.ClusterControlPlaneService.SeedAppRevisions:output_type -> porter.v1.SeedAppRevisionsResponse
	101, // 287: porter.v1.ClusterControlPlaneService.EnvGroupVariables:output_type -> porter.v1.EnvGroupVariablesResponse
	103, // 288: porter.v1.ClusterControlPlaneService.LatestEnvGroupWithVariables:output_type -> porter.v1.LatestEnvGroupWithVariablesResponse
	105, // 289: porter.v1.ClusterControlPlaneService.AppEnvVariables:output_type -> porter.v1.AppEnvVariablesResponse
	107, // 290: porter.v1.ClusterControlPlaneService.UpdateAppImage:output_type -> porter.v1.UpdateAppImageResponse
	109, // 291: porter.v1.ClusterControlPlaneService.UpdateAppBuildSettings:output_type -> porter.v1.UpdateAppBuildSettingsResponse
	111, // 292: porter.v1.ClusterControlPlaneService.UpdateAppsLinkedToEnvGroup:output_type -> porter.v1.UpdateAppsLinkedToEnvGroupResponse
	113, // 293: porter.v1.ClusterControlPlaneService.AppHelmValues:output_type -> porter.v1.AppHelmValuesResponse
	117, // 294: porter.v1.ClusterControlPlaneService.ManualServiceRun:output_type -> porter.v1.ManualServiceRunResponse
	116, // 295: porter.v1.ClusterControlPlaneService.CancelJobRun:output_type -> porter.v1.CancelJobRunResponse
	119, // 296: porter.v1.ClusterControlPlaneService.JobRunStatus:output_type -> porter.v1.JobRunStatusResponse
	121, // 297: porter.v1.ClusterControlPlaneService.JobRuns:output_type -> porter.v1.JobRunsResponse
	182, // 298: porter.v1.ClusterControlPlaneService.ClusterNetworkSettings:output_type -> porter.v1.ClusterNetworkSettingsResponse
	192, // 299: porter.v1.ClusterControlPlaneService.SharedNetworkSettings:output_type -> porter.v1.SharedNetworkSettingsResponse
	123, // 300: porter.v1.ClusterControlPlaneService.Images:output_type -> porter.v1.ImagesResponse
	125, // 301: porter.v1.ClusterControlPlaneService.CreateAppInstance:output_type -> porter.v1.CreateAppInstanceResponse
	127, // 302: porter.v1.ClusterControlPlaneService.DeleteAppInstance:output_type -> porter.v1.DeleteAppInstanceResponse
	129, // 303: porter.v1.ClusterControlPlaneService.ListAppInstances:output_type -> porter.v1.ListAppInstancesResponse
	131, // 304: porter.v1.ClusterControlPlaneService.TemplateAppManifests:output_type -> porter.v1.TemplateAppManifestsResponse
	134, // 305: porter.v1.ClusterControlPlaneService.CreateNotification:output_type -> porter.v1.CreateNotificationResponse
	137, // 306: porter.v1.ClusterControlPlaneService.RecordPrometheusAlert:output_type -> porter.v1.RecordPrometheusAlertResponse
	138, // 307: porter.v1.ClusterControlPlaneService.UpdateServiceDeploymentStatus:output_type -> porter.v1.UpdateServiceDeploymentStatusResponse
	156, // 308: porter.v1.ClusterControlPlaneService.ConnectHostedProject:output_type -> porter.v1.ConnectHostedProjectResponse
	158, // 309: porter.v1.ClusterControlPlaneService.UpdateDatastore:output_type -> porter.v1.UpdateDatastoreResponse
	160, // 310: porter.v1.ClusterControlPlaneService.DeleteDatastore:output_type -> porter.v1.DeleteDatastoreResponse
	162, // 311: porter.v1.ClusterControlPlaneService.CreateDatastoreProxy:output_type -> porter.v1.CreateDatastoreProxyResponse
	164, // 312: porter.v1.ClusterControlPlaneService.DatastoreCredential:output_type -> porter.v1.DatastoreCredentialResponse
	243, // 313: porter.v1.ClusterControlPlaneService.CloudProviderPermissionsStatus:output_type -> porter.v1.CloudProviderPermissionsStatusResponse
	166, // 314: porter.v1.ClusterControlPlaneService.PatchCloudContract:output_type -> porter.v1.PatchCloudContractResponse
	168, // 315: porter.v1.ClusterControlPlaneService.ReadCloudContract:output_type -> porter.v1.ReadCloudContractResponse
	180, // 316: porter.v1.ClusterControlPlaneService.DockerConfigFileForRegistry:output_type -> porter.v1.DockerConfigFileForRegistryResponse
	176, // 317: porter.v1.ClusterControlPlaneService.ECRTokenForRegistry:output_type -> porter.v1.ECRTokenForRegistryResponse
	178, // 318: porter.v1.ClusterControlPlaneService.AssumeRoleCredentials:output_type -> porter.v1.AssumeRoleCredentialsResponse
	174, // 319: porter.v1.ClusterControlPlaneService.AssumeRoleChainTargets:output_type -> porter.v1.AssumeRoleChainTargetsResponse
	172, // 320: porter.v1.ClusterControlPlaneService.CertificateAuthorityData:output_type -> porter.v1.CertificateAuthorityDataResponse
	170, // 321: porter.v1.ClusterControlPlaneService.EKSBearerToken:output_type -> porter.v1.EKSBearerTokenResponse
	33,  // 322: porter.v1.ClusterControlPlaneService.ListRepositoriesForRegistry:output_type -> porter.v1.ListRepositoriesForRegistryResponse
	36,  // 323: porter.v1.ClusterControlPlaneService.ListImagesForRepository:output_type -> porter.v1.ListImagesForRepositoryResponse
	184, // 324: porter.v1.ClusterControlPlaneService.ListDatastores:output_type -> porter.v1.ListDatastoresResponse
	186, // 325: porter.v1.ClusterControlPlaneService.DatastoreStatus:output_type -> porter.v1.DatastoreStatusResponse
	190, // 326: porter.v1.ClusterControlPlaneService.RegistryStatus:output_type -> porter.v1.RegistryStatusResponse
	142, // 327: porter.v1.ClusterControlPlaneService.EnableExternalEnvGroupProviders:output_type -> porter.v1.EnableExternalEnvGroupProvidersResponse
	140, // 328: porter.v1.ClusterControlPlaneService.AreExternalEnvGroupProvidersEnabled:output_type -> porter.v1.AreExternalEnvGroupProvidersEnabledResponse
	144, // 329: porter.v1.ClusterControlPlaneService.CreateOrUpdateEnvGroup:output_type -> porter.v1.CreateOrUpdateEnvGroupResponse
	146, // 330: porter.v1.ClusterControlPlaneService.DeleteEnvGroup:output_type -> porter.v1.DeleteEnvGroupResponse
	148, // 331: porter.v1.ClusterControlPlaneService.AppsLinkedToEnvGroup:output_type -> porter.v1.AppsLinkedToEnvGroupResponse
	150, // 332: porter.v1.ClusterControlPlaneService.ListEnvGroups:output_type -> porter.v1.ListEnvGroupsResponse
	152, // 333: porter.v1.ClusterControlPlaneService.UpdateNotificationConfig:output_type -> porter.v1.UpdateNotificationConfigResponse
	154, // 334: porter.v1.ClusterControlPlaneService.NotificationConfig:output_type -> porter.v1.NotificationConfigResponse
	194, // 335: porter.v1.ClusterControlPlaneService.SystemStatusHistory:output_type -> porter.v1.SystemStatusHistoryResponse
	196, // 336: porter.v1.ClusterControlPlaneService.AppEventWebhooks:output_type -> porter.v1.AppEventWebhooksResponse
	198, // 337: porter.v1.ClusterControlPlaneService.UpdateAppEventWebhooks:output_type -> porter.v1.UpdateAppEventWebhooksResponse
	248, // [248:338] is the sub-list for method output_type
	158, // [158:248] is the sub-list for method input_type
	158, // [158:158] is the sub-list for extension type_name
	158, // [158:158] is the sub-list for extension extendee
	0,   // [0:158] is the sub-list for field type_name
}

func init() { file_porter_v1_cluster_control_plane_proto_init() }
func file_porter_v1_cluster_control_plane_proto_init() {
	if File_porter_v1_cluster_control_plane_proto != nil {
		return
	}
	file_porter_v1_addons_proto_init()
	file_porter_v1_agent_app_event_types_proto_init()
	file_porter_v1_app_event_webhook_proto_init()
	file_porter_v1_aws_assume_role_proto_init()
	file_porter_v1_cloud_contract_proto_init()
	file_porter_v1_cloud_provider_credentials_proto_init()
	file_porter_v1_cluster_proto_init()
	file_porter_v1_compliance_proto_init()
	file_porter_v1_contract_proto_init()
	file_porter_v1_datastore_proto_init()
	file_porter_v1_eks_proto_init()
	file_porter_v1_env_group_proto_init()
	file_porter_v1_errors_proto_init()
	file_porter_v1_gke_proto_init()
	file_porter_v1_notification_proto_init()
	file_porter_v1_porter_app_proto_init()
	file_porter_v1_prometheus_alerts_proto_init()
	file_porter_v1_system_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_porter_v1_cluster_control_plane_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaIncreaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaIncreaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreflightCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreflightCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudContractPreflightCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudContractPreflightCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudContractPreflightCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaPreflightCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaPreflightCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAssumeRoleChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAssumeRoleChainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveAzureCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveAzureCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeConfigForClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeConfigForClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepositoriesForRegistryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepositoriesForRegistryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImagesForRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImagesForRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenForRegistryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenForRegistryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractComplianceChecksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractComplianceChecksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatePorterAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatePorterAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyPorterAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyPorterAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRevisionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRevisionStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackRevisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePorterAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePorterAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeploymentTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeploymentTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentAppRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppRevision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppRevisionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppRevisionStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRevisionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddonPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequireAppPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentAppRevisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAppRevisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAppRevisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestAppRevisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestAppRevisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppRevisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonTemplatesPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddonWithEnvVars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestAddonsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestAddonsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredeployStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredeployStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentTargetDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentTargetDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeploymentTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeploymentTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentTargetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentTargetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultDeploymentTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultDeploymentTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedAppRevisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeedAppRevisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvGroupVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvGroupVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestEnvGroupWithVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestEnvGroupWithVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppEnvVariablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppEnvVariablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppBuildSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppBuildSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppsLinkedToEnvGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppsLinkedToEnvGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppHelmValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppHelmValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualServiceRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelJobRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelJobRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualServiceRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobRunStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobRunStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAppInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAppInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateAppManifestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateAppManifestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServiceDeploymentStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordPrometheusAlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordPrometheusAlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServiceDeploymentStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreExternalEnvGroupProvidersEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreExternalEnvGroupProvidersEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableExternalEnvGroupProvidersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableExternalEnvGroupProvidersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateEnvGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateEnvGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEnvGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEnvGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppsLinkedToEnvGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppsLinkedToEnvGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnvGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnvGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotificationConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotificationConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectHostedProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectHostedProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatastoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDatastoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatastoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDatastoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDatastoreProxyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDatastoreProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatastoreCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatastoreCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchCloudContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchCloudContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCloudContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCloudContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EKSBearerTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EKSBearerTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateAuthorityDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateAuthorityDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssumeRoleChainTargetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssumeRoleChainTargetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECRTokenForRegistryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECRTokenForRegistryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssumeRoleCredentialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssumeRoleCredentialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerConfigFileForRegistryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerConfigFileForRegistryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNetworkSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNetworkSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatastoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatastoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatastoreStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatastoreStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Datastore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatastoreMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistryStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedNetworkSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedNetworkSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemStatusHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemStatusHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppEventWebhooksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppEventWebhooksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppEventWebhooksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_cluster_control_plane_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppEventWebhooksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_porter_v1_cluster_control_plane_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*QuotaIncreaseRequest_GkePreflightValues)(nil),
		(*QuotaIncreaseRequest_EksPreflightValues)(nil),
	}
	file_porter_v1_cluster_control_plane_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*PreflightCheckRequest_GkePreflightValues)(nil),
		(*PreflightCheckRequest_EksPreflightValues)(nil),
	}
	file_porter_v1_cluster_control_plane_proto_msgTypes[105].OneofWrappers = []interface{}{}
	file_porter_v1_cluster_control_plane_proto_msgTypes[156].OneofWrappers = []interface{}{
		(*PatchCloudContractRequest_Datastore)(nil),
	}
	file_porter_v1_cluster_control_plane_proto_msgTypes[173].OneofWrappers = []interface{}{
		(*ClusterNetworkSettingsResponse_EksCloudProviderNetwork)(nil),
	}
	file_porter_v1_cluster_control_plane_proto_msgTypes[174].OneofWrappers = []interface{}{}
	file_porter_v1_cluster_control_plane_proto_msgTypes[183].OneofWrappers = []interface{}{
		(*SharedNetworkSettingsResponse_EksCloudProviderNetwork)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_porter_v1_cluster_control_plane_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   192,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_porter_v1_cluster_control_plane_proto_goTypes,
		DependencyIndexes: file_porter_v1_cluster_control_plane_proto_depIdxs,
		EnumInfos:         file_porter_v1_cluster_control_plane_proto_enumTypes,
		MessageInfos:      file_porter_v1_cluster_control_plane_proto_msgTypes,
	}.Build()
	File_porter_v1_cluster_control_plane_proto = out.File
	file_porter_v1_cluster_control_plane_proto_rawDesc = nil
	file_porter_v1_cluster_control_plane_proto_goTypes = nil
	file_porter_v1_cluster_control_plane_proto_depIdxs = nil
}
