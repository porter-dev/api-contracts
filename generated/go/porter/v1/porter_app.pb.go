// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: porter/v1/porter_app.proto

package porterv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EnvVariableSource is the source type from which to pull the environment variable
type EnvVariableSource int32

const (
	EnvVariableSource_ENV_VARIABLE_SOURCE_UNSPECIFIED EnvVariableSource = 0
	EnvVariableSource_ENV_VARIABLE_SOURCE_VALUE       EnvVariableSource = 1
	EnvVariableSource_ENV_VARIABLE_SOURCE_FROM_APP    EnvVariableSource = 2
)

// Enum value maps for EnvVariableSource.
var (
	EnvVariableSource_name = map[int32]string{
		0: "ENV_VARIABLE_SOURCE_UNSPECIFIED",
		1: "ENV_VARIABLE_SOURCE_VALUE",
		2: "ENV_VARIABLE_SOURCE_FROM_APP",
	}
	EnvVariableSource_value = map[string]int32{
		"ENV_VARIABLE_SOURCE_UNSPECIFIED": 0,
		"ENV_VARIABLE_SOURCE_VALUE":       1,
		"ENV_VARIABLE_SOURCE_FROM_APP":    2,
	}
)

func (x EnvVariableSource) Enum() *EnvVariableSource {
	p := new(EnvVariableSource)
	*p = x
	return p
}

func (x EnvVariableSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnvVariableSource) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_porter_app_proto_enumTypes[0].Descriptor()
}

func (EnvVariableSource) Type() protoreflect.EnumType {
	return &file_porter_v1_porter_app_proto_enumTypes[0]
}

func (x EnvVariableSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnvVariableSource.Descriptor instead.
func (EnvVariableSource) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{0}
}

// EnvValueFromApp is an enum of the possible values to use in the EnvVariableFromApp definition
type EnvValueFromApp int32

const (
	EnvValueFromApp_ENV_VALUE_FROM_APP_UNSPECIFIED     EnvValueFromApp = 0
	EnvValueFromApp_ENV_VALUE_FROM_APP_PUBLIC_DOMAIN   EnvValueFromApp = 1
	EnvValueFromApp_ENV_VALUE_FROM_APP_INTERNAL_DOMAIN EnvValueFromApp = 2
)

// Enum value maps for EnvValueFromApp.
var (
	EnvValueFromApp_name = map[int32]string{
		0: "ENV_VALUE_FROM_APP_UNSPECIFIED",
		1: "ENV_VALUE_FROM_APP_PUBLIC_DOMAIN",
		2: "ENV_VALUE_FROM_APP_INTERNAL_DOMAIN",
	}
	EnvValueFromApp_value = map[string]int32{
		"ENV_VALUE_FROM_APP_UNSPECIFIED":     0,
		"ENV_VALUE_FROM_APP_PUBLIC_DOMAIN":   1,
		"ENV_VALUE_FROM_APP_INTERNAL_DOMAIN": 2,
	}
)

func (x EnvValueFromApp) Enum() *EnvValueFromApp {
	p := new(EnvValueFromApp)
	*p = x
	return p
}

func (x EnvValueFromApp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnvValueFromApp) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_porter_app_proto_enumTypes[1].Descriptor()
}

func (EnvValueFromApp) Type() protoreflect.EnumType {
	return &file_porter_v1_porter_app_proto_enumTypes[1]
}

func (x EnvValueFromApp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnvValueFromApp.Descriptor instead.
func (EnvValueFromApp) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{1}
}

// EnumAppRevisionStatus describes the status of an app revision
type EnumAppRevisionStatus int32

const (
	EnumAppRevisionStatus_ENUM_APP_REVISION_STATUS_UNSPECIFIED EnumAppRevisionStatus = 0
	EnumAppRevisionStatus_ENUM_APP_REVISION_STATUS_PROGRESSING EnumAppRevisionStatus = 1
	EnumAppRevisionStatus_ENUM_APP_REVISION_STATUS_SUCCESSFUL  EnumAppRevisionStatus = 2
	EnumAppRevisionStatus_ENUM_APP_REVISION_STATUS_FAILED      EnumAppRevisionStatus = 3
)

// Enum value maps for EnumAppRevisionStatus.
var (
	EnumAppRevisionStatus_name = map[int32]string{
		0: "ENUM_APP_REVISION_STATUS_UNSPECIFIED",
		1: "ENUM_APP_REVISION_STATUS_PROGRESSING",
		2: "ENUM_APP_REVISION_STATUS_SUCCESSFUL",
		3: "ENUM_APP_REVISION_STATUS_FAILED",
	}
	EnumAppRevisionStatus_value = map[string]int32{
		"ENUM_APP_REVISION_STATUS_UNSPECIFIED": 0,
		"ENUM_APP_REVISION_STATUS_PROGRESSING": 1,
		"ENUM_APP_REVISION_STATUS_SUCCESSFUL":  2,
		"ENUM_APP_REVISION_STATUS_FAILED":      3,
	}
)

func (x EnumAppRevisionStatus) Enum() *EnumAppRevisionStatus {
	p := new(EnumAppRevisionStatus)
	*p = x
	return p
}

func (x EnumAppRevisionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumAppRevisionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_porter_app_proto_enumTypes[2].Descriptor()
}

func (EnumAppRevisionStatus) Type() protoreflect.EnumType {
	return &file_porter_v1_porter_app_proto_enumTypes[2]
}

func (x EnumAppRevisionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumAppRevisionStatus.Descriptor instead.
func (EnumAppRevisionStatus) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{2}
}

// EnumJobRunStatus describes the status of a job run
type EnumJobRunStatus int32

const (
	EnumJobRunStatus_ENUM_JOB_RUN_STATUS_UNSPECIFIED EnumJobRunStatus = 0
	EnumJobRunStatus_ENUM_JOB_RUN_STATUS_RUNNING     EnumJobRunStatus = 1
	EnumJobRunStatus_ENUM_JOB_RUN_STATUS_SUCCESSFUL  EnumJobRunStatus = 2
	EnumJobRunStatus_ENUM_JOB_RUN_STATUS_FAILED      EnumJobRunStatus = 3
)

// Enum value maps for EnumJobRunStatus.
var (
	EnumJobRunStatus_name = map[int32]string{
		0: "ENUM_JOB_RUN_STATUS_UNSPECIFIED",
		1: "ENUM_JOB_RUN_STATUS_RUNNING",
		2: "ENUM_JOB_RUN_STATUS_SUCCESSFUL",
		3: "ENUM_JOB_RUN_STATUS_FAILED",
	}
	EnumJobRunStatus_value = map[string]int32{
		"ENUM_JOB_RUN_STATUS_UNSPECIFIED": 0,
		"ENUM_JOB_RUN_STATUS_RUNNING":     1,
		"ENUM_JOB_RUN_STATUS_SUCCESSFUL":  2,
		"ENUM_JOB_RUN_STATUS_FAILED":      3,
	}
)

func (x EnumJobRunStatus) Enum() *EnumJobRunStatus {
	p := new(EnumJobRunStatus)
	*p = x
	return p
}

func (x EnumJobRunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumJobRunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_porter_v1_porter_app_proto_enumTypes[3].Descriptor()
}

func (EnumJobRunStatus) Type() protoreflect.EnumType {
	return &file_porter_v1_porter_app_proto_enumTypes[3]
}

func (x EnumJobRunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumJobRunStatus.Descriptor instead.
func (EnumJobRunStatus) EnumDescriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{3}
}

// DeploymentTargetIdentifier is the object that identifies a deployment target. One of id or name must be provided, with id taking precedence.
type DeploymentTargetIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the id of the deployment target
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// name is the name of the deployment target
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeploymentTargetIdentifier) Reset() {
	*x = DeploymentTargetIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentTargetIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentTargetIdentifier) ProtoMessage() {}

func (x *DeploymentTargetIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentTargetIdentifier.ProtoReflect.Descriptor instead.
func (*DeploymentTargetIdentifier) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{0}
}

func (x *DeploymentTargetIdentifier) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeploymentTargetIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeploymentTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// name is the vanity name for the deployment target
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// namespace is the namespace that the deployment target points to
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// cluster_id is the id of the cluster that the deployment target points to
	ClusterId int64 `protobuf:"varint,4,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// is_preview indicates whether this is a preview deployment target or not
	IsPreview bool `protobuf:"varint,5,opt,name=is_preview,json=isPreview,proto3" json:"is_preview,omitempty"`
	// is_default indicates whether this is the default deployment target for the cluster
	IsDefault bool `protobuf:"varint,6,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	// id is the id of the deployment target
	Id string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeploymentTarget) Reset() {
	*x = DeploymentTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentTarget) ProtoMessage() {}

func (x *DeploymentTarget) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentTarget.ProtoReflect.Descriptor instead.
func (*DeploymentTarget) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{1}
}

func (x *DeploymentTarget) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeploymentTarget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeploymentTarget) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeploymentTarget) GetClusterId() int64 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *DeploymentTarget) GetIsPreview() bool {
	if x != nil {
		return x.IsPreview
	}
	return false
}

func (x *DeploymentTarget) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *DeploymentTarget) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// PorterApp is the top-level configuration for a Porter application, usually found in porter.yaml
type PorterApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the application
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// services is a map of service names to service configurations
	//
	// Deprecated: Marked as deprecated in porter/v1/porter_app.proto.
	Services map[string]*Service `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// env is a list of environment variables to set on the application
	Env []*EnvVariable `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty"`
	// build is the build settings for the application
	Build *Build `protobuf:"bytes,4,opt,name=build,proto3" json:"build,omitempty"`
	// predeploy is a job service to run before deploying the application
	Predeploy *Service `protobuf:"bytes,5,opt,name=predeploy,proto3" json:"predeploy,omitempty"`
	// image is the image to use for a given revision of the application
	Image *AppImage `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	// env_groups is a map of environment variable group names to environment variable group configurations
	EnvGroups []*EnvGroup `protobuf:"bytes,7,rep,name=env_groups,json=envGroups,proto3" json:"env_groups,omitempty"`
	// helm_overrides is stringified json of raw Helm overrides to use for the application. These will override any values generated by the contract.
	HelmOverrides *HelmOverrides `protobuf:"bytes,8,opt,name=helm_overrides,json=helmOverrides,proto3" json:"helm_overrides,omitempty"`
	// service_list is a list of service configurations
	ServiceList []*Service `protobuf:"bytes,9,rep,name=service_list,json=serviceList,proto3" json:"service_list,omitempty"`
	// efs_storage shared storage across service
	EfsStorage *EFS `protobuf:"bytes,10,opt,name=efs_storage,json=efsStorage,proto3" json:"efs_storage,omitempty"`
	// required_apps are other porter apps that this app expects to be deployed alongside it
	RequiredApps []*RequiredApp `protobuf:"bytes,11,rep,name=required_apps,json=requiredApps,proto3" json:"required_apps,omitempty"`
	// AutoRollback describes whether the app will be rolled back automatically on deployment failure
	AutoRollback *AutoRollback `protobuf:"bytes,12,opt,name=auto_rollback,json=autoRollback,proto3" json:"auto_rollback,omitempty"`
	// cloud_sql is the values to configure CloudSQL settings for an app
	CloudSql *CloudSql `protobuf:"bytes,13,opt,name=cloud_sql,json=cloudSql,proto3" json:"cloud_sql,omitempty"`
}

func (x *PorterApp) Reset() {
	*x = PorterApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PorterApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PorterApp) ProtoMessage() {}

func (x *PorterApp) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PorterApp.ProtoReflect.Descriptor instead.
func (*PorterApp) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{2}
}

func (x *PorterApp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Marked as deprecated in porter/v1/porter_app.proto.
func (x *PorterApp) GetServices() map[string]*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *PorterApp) GetEnv() []*EnvVariable {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *PorterApp) GetBuild() *Build {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *PorterApp) GetPredeploy() *Service {
	if x != nil {
		return x.Predeploy
	}
	return nil
}

func (x *PorterApp) GetImage() *AppImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *PorterApp) GetEnvGroups() []*EnvGroup {
	if x != nil {
		return x.EnvGroups
	}
	return nil
}

func (x *PorterApp) GetHelmOverrides() *HelmOverrides {
	if x != nil {
		return x.HelmOverrides
	}
	return nil
}

func (x *PorterApp) GetServiceList() []*Service {
	if x != nil {
		return x.ServiceList
	}
	return nil
}

func (x *PorterApp) GetEfsStorage() *EFS {
	if x != nil {
		return x.EfsStorage
	}
	return nil
}

func (x *PorterApp) GetRequiredApps() []*RequiredApp {
	if x != nil {
		return x.RequiredApps
	}
	return nil
}

func (x *PorterApp) GetAutoRollback() *AutoRollback {
	if x != nil {
		return x.AutoRollback
	}
	return nil
}

func (x *PorterApp) GetCloudSql() *CloudSql {
	if x != nil {
		return x.CloudSql
	}
	return nil
}

// RequiredApp specifies another porter app that this app expects to be deployed alongside it
// These are used for preview environments to pull in the latest deployed version of an app from a different deployment target
type RequiredApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the required app
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// from_target is the deployment target from which to pull the contract for the required app
	// If not provided, the contract will be pulled from the default deployment target
	FromTarget *DeploymentTargetIdentifier `protobuf:"bytes,2,opt,name=from_target,json=fromTarget,proto3" json:"from_target,omitempty"`
}

func (x *RequiredApp) Reset() {
	*x = RequiredApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequiredApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequiredApp) ProtoMessage() {}

func (x *RequiredApp) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequiredApp.ProtoReflect.Descriptor instead.
func (*RequiredApp) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{3}
}

func (x *RequiredApp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RequiredApp) GetFromTarget() *DeploymentTargetIdentifier {
	if x != nil {
		return x.FromTarget
	}
	return nil
}

// HelmOverrides is a wrapper over stringified json of raw Helm overrides to use for the application. HelmOverrides will only be removed if values is explicitly set to an empty string.
type HelmOverrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values is base64-encoded, stringified json of Helm values. We use a string because Typescript does not have a native bytes type.
	B64Values string `protobuf:"bytes,1,opt,name=b64_values,json=b64Values,proto3" json:"b64_values,omitempty"`
}

func (x *HelmOverrides) Reset() {
	*x = HelmOverrides{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelmOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmOverrides) ProtoMessage() {}

func (x *HelmOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmOverrides.ProtoReflect.Descriptor instead.
func (*HelmOverrides) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{4}
}

func (x *HelmOverrides) GetB64Values() string {
	if x != nil {
		return x.B64Values
	}
	return ""
}

// EnvGroup represents the metadata for an env group. We do not want to store the actual variables with the PorterApp.
type EnvGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the environment variable group
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// version is the version of the environment variable group
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// linked_applications is an optional list of applications linked to the env group
	LinkedApplications []string `protobuf:"bytes,3,rep,name=linked_applications,json=linkedApplications,proto3" json:"linked_applications,omitempty"`
	// variables is an optional map of non-sensitive variable names to values
	Variables map[string]string `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// secret is an optional map of sensitive variable names to values
	SecretVariables map[string]string `protobuf:"bytes,5,rep,name=secret_variables,json=secretVariables,proto3" json:"secret_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// type is the type of the environment variable group
	Type EnumEnvGroupProviderType `protobuf:"varint,6,opt,name=type,proto3,enum=porter.v1.EnumEnvGroupProviderType" json:"type,omitempty"`
	// created_at is the time the env group was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *EnvGroup) Reset() {
	*x = EnvGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvGroup) ProtoMessage() {}

func (x *EnvGroup) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvGroup.ProtoReflect.Descriptor instead.
func (*EnvGroup) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{5}
}

func (x *EnvGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvGroup) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *EnvGroup) GetLinkedApplications() []string {
	if x != nil {
		return x.LinkedApplications
	}
	return nil
}

func (x *EnvGroup) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *EnvGroup) GetSecretVariables() map[string]string {
	if x != nil {
		return x.SecretVariables
	}
	return nil
}

func (x *EnvGroup) GetType() EnumEnvGroupProviderType {
	if x != nil {
		return x.Type
	}
	return EnumEnvGroupProviderType_ENUM_ENV_GROUP_PROVIDER_TYPE_UNSPECIFIED
}

func (x *EnvGroup) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// EnvGroupVariables represents the variables for an env group.
type EnvGroupVariables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// normal is a map of non-sensitive variable names to values
	Normal map[string]string `protobuf:"bytes,1,rep,name=normal,proto3" json:"normal,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// secret is a map of sensitive variable names to values
	Secret map[string]string `protobuf:"bytes,2,rep,name=secret,proto3" json:"secret,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EnvGroupVariables) Reset() {
	*x = EnvGroupVariables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvGroupVariables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvGroupVariables) ProtoMessage() {}

func (x *EnvGroupVariables) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvGroupVariables.ProtoReflect.Descriptor instead.
func (*EnvGroupVariables) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{6}
}

func (x *EnvGroupVariables) GetNormal() map[string]string {
	if x != nil {
		return x.Normal
	}
	return nil
}

func (x *EnvGroupVariables) GetSecret() map[string]string {
	if x != nil {
		return x.Secret
	}
	return nil
}

// ServiceDeletions contains all explicit deletions from a service
type ServiceDeletions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domain_names is a list of domain names to delete
	DomainNames []string `protobuf:"bytes,1,rep,name=domain_names,json=domainNames,proto3" json:"domain_names,omitempty"`
	// ingress_annotations is a list of ingress annotation keys to delete
	IngressAnnotations []string `protobuf:"bytes,2,rep,name=ingress_annotations,json=ingressAnnotations,proto3" json:"ingress_annotations,omitempty"`
}

func (x *ServiceDeletions) Reset() {
	*x = ServiceDeletions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceDeletions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDeletions) ProtoMessage() {}

func (x *ServiceDeletions) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDeletions.ProtoReflect.Descriptor instead.
func (*ServiceDeletions) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceDeletions) GetDomainNames() []string {
	if x != nil {
		return x.DomainNames
	}
	return nil
}

func (x *ServiceDeletions) GetIngressAnnotations() []string {
	if x != nil {
		return x.IngressAnnotations
	}
	return nil
}

// EnvVariableDeletions contains the keys to remove from the app's normal and secret environment variables
type EnvVariableDeletions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// variables is a list of environment variable names to delete
	Variables []string `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty"`
	// secrets is a list of secret environment variable names to delete
	Secrets []string `protobuf:"bytes,2,rep,name=secrets,proto3" json:"secrets,omitempty"`
}

func (x *EnvVariableDeletions) Reset() {
	*x = EnvVariableDeletions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVariableDeletions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVariableDeletions) ProtoMessage() {}

func (x *EnvVariableDeletions) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVariableDeletions.ProtoReflect.Descriptor instead.
func (*EnvVariableDeletions) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{8}
}

func (x *EnvVariableDeletions) GetVariables() []string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *EnvVariableDeletions) GetSecrets() []string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// Deletions contains all explicit deletions from a PorterApp
type Deletions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// service_names is a list of service names to delete
	ServiceNames []string `protobuf:"bytes,1,rep,name=service_names,json=serviceNames,proto3" json:"service_names,omitempty"`
	// env_group_names is a list of environment variable group names to delete
	EnvGroupNames []string `protobuf:"bytes,2,rep,name=env_group_names,json=envGroupNames,proto3" json:"env_group_names,omitempty"`
	// predeploy_names is a list of predeploy jobs to delete. Even though there is only one predeploy job, it is a list to be consistent with the service deletions.
	PredeployNames []string `protobuf:"bytes,3,rep,name=predeploy_names,json=predeployNames,proto3" json:"predeploy_names,omitempty"`
	// env_variable_names is deprecated in favor of env_group_names. It was a list of environment variable names to delete
	//
	// Deprecated: Marked as deprecated in porter/v1/porter_app.proto.
	EnvVariableNames []string `protobuf:"bytes,4,rep,name=env_variable_names,json=envVariableNames,proto3" json:"env_variable_names,omitempty"`
	// service_domains is a map of service names to a list of domains to delete
	//
	// Deprecated: Marked as deprecated in porter/v1/porter_app.proto.
	ServiceDomains map[string]*DomainNameList `protobuf:"bytes,5,rep,name=service_domains,json=serviceDomains,proto3" json:"service_domains,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// service_deletions is a map of service names to a list of deletions to perform on the service
	ServiceDeletions map[string]*ServiceDeletions `protobuf:"bytes,6,rep,name=service_deletions,json=serviceDeletions,proto3" json:"service_deletions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// env_variable_deletions contains the keys to remove from the app's normal and secret environment variables
	EnvVariableDeletions *EnvVariableDeletions `protobuf:"bytes,7,opt,name=env_variable_deletions,json=envVariableDeletions,proto3" json:"env_variable_deletions,omitempty"`
}

func (x *Deletions) Reset() {
	*x = Deletions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deletions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deletions) ProtoMessage() {}

func (x *Deletions) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deletions.ProtoReflect.Descriptor instead.
func (*Deletions) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{9}
}

func (x *Deletions) GetServiceNames() []string {
	if x != nil {
		return x.ServiceNames
	}
	return nil
}

func (x *Deletions) GetEnvGroupNames() []string {
	if x != nil {
		return x.EnvGroupNames
	}
	return nil
}

func (x *Deletions) GetPredeployNames() []string {
	if x != nil {
		return x.PredeployNames
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/porter_app.proto.
func (x *Deletions) GetEnvVariableNames() []string {
	if x != nil {
		return x.EnvVariableNames
	}
	return nil
}

// Deprecated: Marked as deprecated in porter/v1/porter_app.proto.
func (x *Deletions) GetServiceDomains() map[string]*DomainNameList {
	if x != nil {
		return x.ServiceDomains
	}
	return nil
}

func (x *Deletions) GetServiceDeletions() map[string]*ServiceDeletions {
	if x != nil {
		return x.ServiceDeletions
	}
	return nil
}

func (x *Deletions) GetEnvVariableDeletions() *EnvVariableDeletions {
	if x != nil {
		return x.EnvVariableDeletions
	}
	return nil
}

type DomainNameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// domain_names is a list of domain names
	DomainNames []string `protobuf:"bytes,1,rep,name=domain_names,json=domainNames,proto3" json:"domain_names,omitempty"`
}

func (x *DomainNameList) Reset() {
	*x = DomainNameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainNameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainNameList) ProtoMessage() {}

func (x *DomainNameList) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainNameList.ProtoReflect.Descriptor instead.
func (*DomainNameList) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{10}
}

func (x *DomainNameList) GetDomainNames() []string {
	if x != nil {
		return x.DomainNames
	}
	return nil
}

// Build is the build settings for the application
type Build struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// context is the path to the build context
	Context string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// method is the build method to use, being one of "pack", "docker", or "registry"
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// builder is the builder to use for the "pack" build method
	Builder string `protobuf:"bytes,3,opt,name=builder,proto3" json:"builder,omitempty"`
	// buildpacks is a list of buildpacks to use for the "pack" build method
	Buildpacks []string `protobuf:"bytes,4,rep,name=buildpacks,proto3" json:"buildpacks,omitempty"`
	// dockerfile is the path to the Dockerfile to use for the "docker" build method
	Dockerfile string `protobuf:"bytes,5,opt,name=dockerfile,proto3" json:"dockerfile,omitempty"`
	// commit_sha is the commit SHA at which to build the application
	CommitSha string `protobuf:"bytes,6,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
}

func (x *Build) Reset() {
	*x = Build{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Build) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Build) ProtoMessage() {}

func (x *Build) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Build.ProtoReflect.Descriptor instead.
func (*Build) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{11}
}

func (x *Build) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *Build) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Build) GetBuilder() string {
	if x != nil {
		return x.Builder
	}
	return ""
}

func (x *Build) GetBuildpacks() []string {
	if x != nil {
		return x.Buildpacks
	}
	return nil
}

func (x *Build) GetDockerfile() string {
	if x != nil {
		return x.Dockerfile
	}
	return ""
}

func (x *Build) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

// AppImage is the image to use for a given revision of the application
type AppImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repository is the repository to use for the image
	Repository string `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	// tag is the tag to use for the image
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *AppImage) Reset() {
	*x = AppImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppImage) ProtoMessage() {}

func (x *AppImage) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppImage.ProtoReflect.Descriptor instead.
func (*AppImage) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{12}
}

func (x *AppImage) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *AppImage) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// EFS is the values to configure EFS settings
type EFS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enabled enabes shared storage across services
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// file_system_id is the AWS EFS File System ID to mount
	FileSystemId string `protobuf:"bytes,2,opt,name=file_system_id,json=fileSystemId,proto3" json:"file_system_id,omitempty"`
}

func (x *EFS) Reset() {
	*x = EFS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EFS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EFS) ProtoMessage() {}

func (x *EFS) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EFS.ProtoReflect.Descriptor instead.
func (*EFS) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{13}
}

func (x *EFS) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *EFS) GetFileSystemId() string {
	if x != nil {
		return x.FileSystemId
	}
	return ""
}

// AutoRollback describes whether the app will be rolled back automatically on deployment failure
type AutoRollback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enabled describes if the feature is enabled
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AutoRollback) Reset() {
	*x = AutoRollback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoRollback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoRollback) ProtoMessage() {}

func (x *AutoRollback) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoRollback.ProtoReflect.Descriptor instead.
func (*AutoRollback) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{14}
}

func (x *AutoRollback) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type EnvVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the name of the environment variable
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// source specifies how the env variable should be set
	Source EnvVariableSource `protobuf:"varint,2,opt,name=source,proto3,enum=porter.v1.EnvVariableSource" json:"source,omitempty"`
	// value is the value of the environment variable. This is only used if case is ENV_VARIABLE_SOURCE_VALUE
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// definition is an object that defines how the environment variable should be set
	//
	// Types that are assignable to Definition:
	//
	//	*EnvVariable_FromApp
	Definition isEnvVariable_Definition `protobuf_oneof:"definition"`
}

func (x *EnvVariable) Reset() {
	*x = EnvVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVariable) ProtoMessage() {}

func (x *EnvVariable) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVariable.ProtoReflect.Descriptor instead.
func (*EnvVariable) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{15}
}

func (x *EnvVariable) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EnvVariable) GetSource() EnvVariableSource {
	if x != nil {
		return x.Source
	}
	return EnvVariableSource_ENV_VARIABLE_SOURCE_UNSPECIFIED
}

func (x *EnvVariable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (m *EnvVariable) GetDefinition() isEnvVariable_Definition {
	if m != nil {
		return m.Definition
	}
	return nil
}

func (x *EnvVariable) GetFromApp() *EnvVariableFromApp {
	if x, ok := x.GetDefinition().(*EnvVariable_FromApp); ok {
		return x.FromApp
	}
	return nil
}

type isEnvVariable_Definition interface {
	isEnvVariable_Definition()
}

type EnvVariable_FromApp struct {
	FromApp *EnvVariableFromApp `protobuf:"bytes,4,opt,name=from_app,json=fromApp,proto3,oneof"`
}

func (*EnvVariable_FromApp) isEnvVariable_Definition() {}

type EnvVariableFromApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app_name is the name of the app
	AppName string `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// value is one of a discrete set of configured values on the app that can be used for the environment variable
	Value EnvValueFromApp `protobuf:"varint,2,opt,name=value,proto3,enum=porter.v1.EnvValueFromApp" json:"value,omitempty"`
	// service_name is the name of the service where the value is defined
	ServiceName string `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *EnvVariableFromApp) Reset() {
	*x = EnvVariableFromApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVariableFromApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVariableFromApp) ProtoMessage() {}

func (x *EnvVariableFromApp) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVariableFromApp.ProtoReflect.Descriptor instead.
func (*EnvVariableFromApp) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{16}
}

func (x *EnvVariableFromApp) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *EnvVariableFromApp) GetValue() EnvValueFromApp {
	if x != nil {
		return x.Value
	}
	return EnvValueFromApp_ENV_VALUE_FROM_APP_UNSPECIFIED
}

func (x *EnvVariableFromApp) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

// JobRun contains details about a job run
type JobRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the id of the job run
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// job_name is the name of the job
	JobName string `protobuf:"bytes,2,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	// status is the status of the job run
	Status EnumJobRunStatus `protobuf:"varint,3,opt,name=status,proto3,enum=porter.v1.EnumJobRunStatus" json:"status,omitempty"`
	// created_at is the time the job run was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// finished_at is the time the job run finished
	FinishedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	// app_revision_id is the id of the app revision that the job run is associated with
	AppRevisionId string `protobuf:"bytes,6,opt,name=app_revision_id,json=appRevisionId,proto3" json:"app_revision_id,omitempty"`
	// service_name is the name of the job service in the app
	ServiceName string `protobuf:"bytes,7,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *JobRun) Reset() {
	*x = JobRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRun) ProtoMessage() {}

func (x *JobRun) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRun.ProtoReflect.Descriptor instead.
func (*JobRun) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{17}
}

func (x *JobRun) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobRun) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *JobRun) GetStatus() EnumJobRunStatus {
	if x != nil {
		return x.Status
	}
	return EnumJobRunStatus_ENUM_JOB_RUN_STATUS_UNSPECIFIED
}

func (x *JobRun) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *JobRun) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *JobRun) GetAppRevisionId() string {
	if x != nil {
		return x.AppRevisionId
	}
	return ""
}

func (x *JobRun) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

// CloudSQL is the values to configure CloudSQL settings
type CloudSql struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enabled enables cloudsql proxying across all services in the app
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// service_account_json_secret is the name of the secret where the service account JSON for accessing the CloudSQL instance is stored
	ServiceAccountJsonSecret string `protobuf:"bytes,2,opt,name=service_account_json_secret,json=serviceAccountJsonSecret,proto3" json:"service_account_json_secret,omitempty"`
	// connection_name is the connection name for the CloudSQL instance
	ConnectionName string `protobuf:"bytes,3,opt,name=connection_name,json=connectionName,proto3" json:"connection_name,omitempty"`
	// db_port is the port for the CloudSQL instance
	DbPort int32 `protobuf:"varint,4,opt,name=db_port,json=dbPort,proto3" json:"db_port,omitempty"`
}

func (x *CloudSql) Reset() {
	*x = CloudSql{}
	if protoimpl.UnsafeEnabled {
		mi := &file_porter_v1_porter_app_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudSql) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudSql) ProtoMessage() {}

func (x *CloudSql) ProtoReflect() protoreflect.Message {
	mi := &file_porter_v1_porter_app_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudSql.ProtoReflect.Descriptor instead.
func (*CloudSql) Descriptor() ([]byte, []int) {
	return file_porter_v1_porter_app_proto_rawDescGZIP(), []int{18}
}

func (x *CloudSql) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CloudSql) GetServiceAccountJsonSecret() string {
	if x != nil {
		return x.ServiceAccountJsonSecret
	}
	return ""
}

func (x *CloudSql) GetConnectionName() string {
	if x != nil {
		return x.ConnectionName
	}
	return ""
}

func (x *CloudSql) GetDbPort() int32 {
	if x != nil {
		return x.DbPort
	}
	return 0
}

var File_porter_v1_porter_app_proto protoreflect.FileDescriptor

var file_porter_v1_porter_app_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x1a,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd0,
	0x01, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xed, 0x05, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x65, 0x6e,
	0x76, 0x12, 0x26, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x72, 0x65,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x09, 0x65, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x68, 0x65,
	0x6c, 0x6d, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x65, 0x6c, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0d, 0x68, 0x65,
	0x6c, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x65, 0x66, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x46, 0x53, 0x52, 0x0a, 0x65, 0x66, 0x73, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x70, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x70, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70, 0x73,
	0x12, 0x3c, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x30,
	0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x71, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x53, 0x71, 0x6c, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x71, 0x6c,
	0x1a, 0x4f, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x69, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x2e, 0x0a, 0x0d,
	0x48, 0x65, 0x6c, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xf6, 0x03, 0x0a,
	0x08, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x10, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e,
	0x76, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x42, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x02, 0x0a, 0x11, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x40, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a,
	0x39, 0x0a, 0x0b, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x66, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4e, 0x0a,
	0x14, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x22, 0xfa, 0x04,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x12, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x10, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x16, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x5c, 0x0a, 0x13, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x0e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0xb2, 0x01, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x70, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x70, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x73, 0x68, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x53, 0x68, 0x61, 0x22, 0x3c, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x22, 0x45, 0x0a, 0x03, 0x45, 0x46, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x0c, 0x41, 0x75, 0x74,
	0x6f, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41,
	0x70, 0x70, 0x48, 0x00, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x42, 0x0c, 0x0a,
	0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x12,
	0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41,
	0x70, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x06, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xa5, 0x01, 0x0a, 0x08, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x71, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x73, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x64, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x2a, 0x79, 0x0a, 0x11, 0x45, 0x6e, 0x76, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a,
	0x1f, 0x45, 0x4e, 0x56, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x56, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x56, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x41, 0x50,
	0x50, 0x10, 0x02, 0x2a, 0x83, 0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4e, 0x56, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x45,
	0x4e, 0x56, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x41, 0x50,
	0x50, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x4e, 0x56, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x46,
	0x52, 0x4f, 0x4d, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x2a, 0xb9, 0x01, 0x0a, 0x15, 0x45, 0x6e,
	0x75, 0x6d, 0x41, 0x70, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x41, 0x50, 0x50, 0x5f,
	0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a,
	0x24, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x41, 0x50, 0x50, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x10, 0x02,
	0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x52, 0x45, 0x56,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x9c, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x75, 0x6d, 0x4a, 0x6f,
	0x62, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46,
	0x55, 0x4c, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4a, 0x4f, 0x42,
	0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x42, 0xa9, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2d, 0x64, 0x65, 0x76, 0x2f,
	0x61, 0x70, 0x69, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x50, 0x58, 0x58, 0xaa, 0x02, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x50, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_porter_v1_porter_app_proto_rawDescOnce sync.Once
	file_porter_v1_porter_app_proto_rawDescData = file_porter_v1_porter_app_proto_rawDesc
)

func file_porter_v1_porter_app_proto_rawDescGZIP() []byte {
	file_porter_v1_porter_app_proto_rawDescOnce.Do(func() {
		file_porter_v1_porter_app_proto_rawDescData = protoimpl.X.CompressGZIP(file_porter_v1_porter_app_proto_rawDescData)
	})
	return file_porter_v1_porter_app_proto_rawDescData
}

var file_porter_v1_porter_app_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_porter_v1_porter_app_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_porter_v1_porter_app_proto_goTypes = []interface{}{
	(EnvVariableSource)(0),             // 0: porter.v1.EnvVariableSource
	(EnvValueFromApp)(0),               // 1: porter.v1.EnvValueFromApp
	(EnumAppRevisionStatus)(0),         // 2: porter.v1.EnumAppRevisionStatus
	(EnumJobRunStatus)(0),              // 3: porter.v1.EnumJobRunStatus
	(*DeploymentTargetIdentifier)(nil), // 4: porter.v1.DeploymentTargetIdentifier
	(*DeploymentTarget)(nil),           // 5: porter.v1.DeploymentTarget
	(*PorterApp)(nil),                  // 6: porter.v1.PorterApp
	(*RequiredApp)(nil),                // 7: porter.v1.RequiredApp
	(*HelmOverrides)(nil),              // 8: porter.v1.HelmOverrides
	(*EnvGroup)(nil),                   // 9: porter.v1.EnvGroup
	(*EnvGroupVariables)(nil),          // 10: porter.v1.EnvGroupVariables
	(*ServiceDeletions)(nil),           // 11: porter.v1.ServiceDeletions
	(*EnvVariableDeletions)(nil),       // 12: porter.v1.EnvVariableDeletions
	(*Deletions)(nil),                  // 13: porter.v1.Deletions
	(*DomainNameList)(nil),             // 14: porter.v1.DomainNameList
	(*Build)(nil),                      // 15: porter.v1.Build
	(*AppImage)(nil),                   // 16: porter.v1.AppImage
	(*EFS)(nil),                        // 17: porter.v1.EFS
	(*AutoRollback)(nil),               // 18: porter.v1.AutoRollback
	(*EnvVariable)(nil),                // 19: porter.v1.EnvVariable
	(*EnvVariableFromApp)(nil),         // 20: porter.v1.EnvVariableFromApp
	(*JobRun)(nil),                     // 21: porter.v1.JobRun
	(*CloudSql)(nil),                   // 22: porter.v1.CloudSql
	nil,                                // 23: porter.v1.PorterApp.ServicesEntry
	nil,                                // 24: porter.v1.EnvGroup.VariablesEntry
	nil,                                // 25: porter.v1.EnvGroup.SecretVariablesEntry
	nil,                                // 26: porter.v1.EnvGroupVariables.NormalEntry
	nil,                                // 27: porter.v1.EnvGroupVariables.SecretEntry
	nil,                                // 28: porter.v1.Deletions.ServiceDomainsEntry
	nil,                                // 29: porter.v1.Deletions.ServiceDeletionsEntry
	(*Service)(nil),                    // 30: porter.v1.Service
	(EnumEnvGroupProviderType)(0),      // 31: porter.v1.EnumEnvGroupProviderType
	(*timestamppb.Timestamp)(nil),      // 32: google.protobuf.Timestamp
}
var file_porter_v1_porter_app_proto_depIdxs = []int32{
	23, // 0: porter.v1.PorterApp.services:type_name -> porter.v1.PorterApp.ServicesEntry
	19, // 1: porter.v1.PorterApp.env:type_name -> porter.v1.EnvVariable
	15, // 2: porter.v1.PorterApp.build:type_name -> porter.v1.Build
	30, // 3: porter.v1.PorterApp.predeploy:type_name -> porter.v1.Service
	16, // 4: porter.v1.PorterApp.image:type_name -> porter.v1.AppImage
	9,  // 5: porter.v1.PorterApp.env_groups:type_name -> porter.v1.EnvGroup
	8,  // 6: porter.v1.PorterApp.helm_overrides:type_name -> porter.v1.HelmOverrides
	30, // 7: porter.v1.PorterApp.service_list:type_name -> porter.v1.Service
	17, // 8: porter.v1.PorterApp.efs_storage:type_name -> porter.v1.EFS
	7,  // 9: porter.v1.PorterApp.required_apps:type_name -> porter.v1.RequiredApp
	18, // 10: porter.v1.PorterApp.auto_rollback:type_name -> porter.v1.AutoRollback
	22, // 11: porter.v1.PorterApp.cloud_sql:type_name -> porter.v1.CloudSql
	4,  // 12: porter.v1.RequiredApp.from_target:type_name -> porter.v1.DeploymentTargetIdentifier
	24, // 13: porter.v1.EnvGroup.variables:type_name -> porter.v1.EnvGroup.VariablesEntry
	25, // 14: porter.v1.EnvGroup.secret_variables:type_name -> porter.v1.EnvGroup.SecretVariablesEntry
	31, // 15: porter.v1.EnvGroup.type:type_name -> porter.v1.EnumEnvGroupProviderType
	32, // 16: porter.v1.EnvGroup.created_at:type_name -> google.protobuf.Timestamp
	26, // 17: porter.v1.EnvGroupVariables.normal:type_name -> porter.v1.EnvGroupVariables.NormalEntry
	27, // 18: porter.v1.EnvGroupVariables.secret:type_name -> porter.v1.EnvGroupVariables.SecretEntry
	28, // 19: porter.v1.Deletions.service_domains:type_name -> porter.v1.Deletions.ServiceDomainsEntry
	29, // 20: porter.v1.Deletions.service_deletions:type_name -> porter.v1.Deletions.ServiceDeletionsEntry
	12, // 21: porter.v1.Deletions.env_variable_deletions:type_name -> porter.v1.EnvVariableDeletions
	0,  // 22: porter.v1.EnvVariable.source:type_name -> porter.v1.EnvVariableSource
	20, // 23: porter.v1.EnvVariable.from_app:type_name -> porter.v1.EnvVariableFromApp
	1,  // 24: porter.v1.EnvVariableFromApp.value:type_name -> porter.v1.EnvValueFromApp
	3,  // 25: porter.v1.JobRun.status:type_name -> porter.v1.EnumJobRunStatus
	32, // 26: porter.v1.JobRun.created_at:type_name -> google.protobuf.Timestamp
	32, // 27: porter.v1.JobRun.finished_at:type_name -> google.protobuf.Timestamp
	30, // 28: porter.v1.PorterApp.ServicesEntry.value:type_name -> porter.v1.Service
	14, // 29: porter.v1.Deletions.ServiceDomainsEntry.value:type_name -> porter.v1.DomainNameList
	11, // 30: porter.v1.Deletions.ServiceDeletionsEntry.value:type_name -> porter.v1.ServiceDeletions
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_porter_v1_porter_app_proto_init() }
func file_porter_v1_porter_app_proto_init() {
	if File_porter_v1_porter_app_proto != nil {
		return
	}
	file_porter_v1_env_group_proto_init()
	file_porter_v1_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_porter_v1_porter_app_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentTargetIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PorterApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequiredApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelmOverrides); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvGroupVariables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceDeletions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVariableDeletions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deletions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainNameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Build); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EFS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoRollback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVariableFromApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_porter_v1_porter_app_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudSql); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_porter_v1_porter_app_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*EnvVariable_FromApp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_porter_v1_porter_app_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_porter_v1_porter_app_proto_goTypes,
		DependencyIndexes: file_porter_v1_porter_app_proto_depIdxs,
		EnumInfos:         file_porter_v1_porter_app_proto_enumTypes,
		MessageInfos:      file_porter_v1_porter_app_proto_msgTypes,
	}.Build()
	File_porter_v1_porter_app_proto = out.File
	file_porter_v1_porter_app_proto_rawDesc = nil
	file_porter_v1_porter_app_proto_goTypes = nil
	file_porter_v1_porter_app_proto_depIdxs = nil
}
