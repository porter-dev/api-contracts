// @generated by protoc-gen-es v1.1.0 with parameter "target=ts"
// @generated from file porter/v1/porter.proto (package porter.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Cluster } from "./cluster_pb.js";

/**
 * @generated from message porter.v1.Porter
 */
export class Porter extends Message<Porter> {
  /**
   * @generated from field: porter.v1.Cluster cluster = 1;
   */
  cluster?: Cluster;

  constructor(data?: PartialMessage<Porter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "porter.v1.Porter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: Cluster },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Porter {
    return new Porter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Porter {
    return new Porter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Porter {
    return new Porter().fromJsonString(jsonString, options);
  }

  static equals(a: Porter | PlainMessage<Porter> | undefined, b: Porter | PlainMessage<Porter> | undefined): boolean {
    return proto3.util.equals(Porter, a, b);
  }
}

