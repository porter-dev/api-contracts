// @generated by protoc-gen-es v1.1.0 with parameter "target=ts,import_extension=none"
// @generated from file porter/v1/eks.proto (package porter.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum porter.v1.NodeGroupType
 */
export enum NodeGroupType {
  /**
   * @generated from enum value: NODE_GROUP_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: NODE_GROUP_TYPE_SYSTEM = 1;
   */
  SYSTEM = 1,

  /**
   * @generated from enum value: NODE_GROUP_TYPE_MONITORING = 2;
   */
  MONITORING = 2,

  /**
   * @generated from enum value: NODE_GROUP_TYPE_APPLICATION = 3;
   */
  APPLICATION = 3,

  /**
   * @generated from enum value: NODE_GROUP_TYPE_CUSTOM = 4;
   */
  CUSTOM = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(NodeGroupType)
proto3.util.setEnumType(NodeGroupType, "porter.v1.NodeGroupType", [
  { no: 0, name: "NODE_GROUP_TYPE_UNSPECIFIED" },
  { no: 1, name: "NODE_GROUP_TYPE_SYSTEM" },
  { no: 2, name: "NODE_GROUP_TYPE_MONITORING" },
  { no: 3, name: "NODE_GROUP_TYPE_APPLICATION" },
  { no: 4, name: "NODE_GROUP_TYPE_CUSTOM" },
]);

/**
 * @generated from message porter.v1.EKS
 */
export class EKS extends Message<EKS> {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * @generated from field: string cluster_version = 2;
   */
  clusterVersion = "";

  /**
   * @generated from field: string cidr_range = 3;
   */
  cidrRange = "";

  /**
   * @generated from field: string region = 4;
   */
  region = "";

  /**
   * @generated from field: repeated porter.v1.EKSNodeGroup node_groups = 5;
   */
  nodeGroups: EKSNodeGroup[] = [];

  constructor(data?: PartialMessage<EKS>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "porter.v1.EKS";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cluster_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cidr_range", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "node_groups", kind: "message", T: EKSNodeGroup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EKS {
    return new EKS().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EKS {
    return new EKS().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EKS {
    return new EKS().fromJsonString(jsonString, options);
  }

  static equals(a: EKS | PlainMessage<EKS> | undefined, b: EKS | PlainMessage<EKS> | undefined): boolean {
    return proto3.util.equals(EKS, a, b);
  }
}

/**
 * @generated from message porter.v1.EKSNodeGroup
 */
export class EKSNodeGroup extends Message<EKSNodeGroup> {
  /**
   * @generated from field: string instance_type = 1;
   */
  instanceType = "";

  /**
   * @generated from field: uint32 min_instances = 2;
   */
  minInstances = 0;

  /**
   * @generated from field: uint32 max_instances = 3;
   */
  maxInstances = 0;

  /**
   * @generated from field: porter.v1.NodeGroupType node_group_type = 4;
   */
  nodeGroupType = NodeGroupType.UNSPECIFIED;

  /**
   * @generated from field: bool is_stateful = 5;
   */
  isStateful = false;

  constructor(data?: PartialMessage<EKSNodeGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "porter.v1.EKSNodeGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "min_instances", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "max_instances", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "node_group_type", kind: "enum", T: proto3.getEnumType(NodeGroupType) },
    { no: 5, name: "is_stateful", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EKSNodeGroup {
    return new EKSNodeGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EKSNodeGroup {
    return new EKSNodeGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EKSNodeGroup {
    return new EKSNodeGroup().fromJsonString(jsonString, options);
  }

  static equals(a: EKSNodeGroup | PlainMessage<EKSNodeGroup> | undefined, b: EKSNodeGroup | PlainMessage<EKSNodeGroup> | undefined): boolean {
    return proto3.util.equals(EKSNodeGroup, a, b);
  }
}

