// @generated by protoc-gen-es v1.1.0 with parameter "target=ts"
// @generated from file porter/v1/system_applications.proto (package porter.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum porter.v1.EnumApplicationProvider
 */
export enum EnumApplicationProvider {
  /**
   * @generated from enum value: ENUM_APPLICATION_PROVIDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ENUM_APPLICATION_PROVIDER_HELM = 1;
   */
  HELM = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(EnumApplicationProvider)
proto3.util.setEnumType(EnumApplicationProvider, "porter.v1.EnumApplicationProvider", [
  { no: 0, name: "ENUM_APPLICATION_PROVIDER_UNSPECIFIED" },
  { no: 1, name: "ENUM_APPLICATION_PROVIDER_HELM" },
]);

/**
 * @generated from message porter.v1.SystemApplication
 */
export class SystemApplication extends Message<SystemApplication> {
  /**
   * @generated from field: int32 project_id = 1;
   */
  projectId = 0;

  /**
   * @generated from field: int32 cluster_id = 2;
   */
  clusterId = 0;

  /**
   * @generated from field: porter.v1.EnumApplicationProvider provider = 3;
   */
  provider = EnumApplicationProvider.UNSPECIFIED;

  /**
   * @generated from oneof porter.v1.SystemApplication.provider_values
   */
  providerValues: {
    /**
     * @generated from field: porter.v1.ProviderHelm helm = 4;
     */
    value: ProviderHelm;
    case: "helm";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SystemApplication>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "porter.v1.SystemApplication";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "cluster_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "provider", kind: "enum", T: proto3.getEnumType(EnumApplicationProvider) },
    { no: 4, name: "helm", kind: "message", T: ProviderHelm, oneof: "provider_values" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SystemApplication {
    return new SystemApplication().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SystemApplication {
    return new SystemApplication().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SystemApplication {
    return new SystemApplication().fromJsonString(jsonString, options);
  }

  static equals(a: SystemApplication | PlainMessage<SystemApplication> | undefined, b: SystemApplication | PlainMessage<SystemApplication> | undefined): boolean {
    return proto3.util.equals(SystemApplication, a, b);
  }
}

/**
 * @generated from message porter.v1.ProviderHelm
 */
export class ProviderHelm extends Message<ProviderHelm> {
  /**
   * @generated from field: string repo_url = 1;
   */
  repoUrl = "";

  /**
   * @generated from field: string chart_name = 2;
   */
  chartName = "";

  /**
   * @generated from field: string values = 3;
   */
  values = "";

  constructor(data?: PartialMessage<ProviderHelm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "porter.v1.ProviderHelm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "chart_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProviderHelm {
    return new ProviderHelm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProviderHelm {
    return new ProviderHelm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProviderHelm {
    return new ProviderHelm().fromJsonString(jsonString, options);
  }

  static equals(a: ProviderHelm | PlainMessage<ProviderHelm> | undefined, b: ProviderHelm | PlainMessage<ProviderHelm> | undefined): boolean {
    return proto3.util.equals(ProviderHelm, a, b);
  }
}

