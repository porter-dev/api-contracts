// @generated by protoc-gen-es v1.9.0
// @generated from file porter/v1/eks.proto (package porter.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum porter.v1.NodeGroupType
 */
export declare enum NodeGroupType {
  /**
   * @generated from enum value: NODE_GROUP_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: NODE_GROUP_TYPE_SYSTEM = 1;
   */
  SYSTEM = 1,

  /**
   * @generated from enum value: NODE_GROUP_TYPE_MONITORING = 2;
   */
  MONITORING = 2,

  /**
   * @generated from enum value: NODE_GROUP_TYPE_APPLICATION = 3;
   */
  APPLICATION = 3,

  /**
   * NODE_GROUP_TYPE_CUSTOM indicates a GPU node group. For custom node group management, use NODE_GROUP_TYPE_USER.
   *
   * @generated from enum value: NODE_GROUP_TYPE_CUSTOM = 4;
   */
  CUSTOM = 4,

  /**
   * NODE_GROUP_TYPE_USER indicates a user-managed node group (can be created, edited, and deleted). Node groups of this type must specify a unique node_group_name.
   *
   * @generated from enum value: NODE_GROUP_TYPE_USER = 5;
   */
  USER = 5,
}

/**
 * @generated from enum porter.v1.LoadBalancerType
 */
export declare enum LoadBalancerType {
  /**
   * @generated from enum value: LOAD_BALANCER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LOAD_BALANCER_TYPE_NLB = 1;
   */
  NLB = 1,

  /**
   * @generated from enum value: LOAD_BALANCER_TYPE_ALB = 2;
   */
  ALB = 2,
}

/**
 * @generated from message porter.v1.EKS
 */
export declare class EKS extends Message<EKS> {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * @generated from field: string cluster_version = 2;
   */
  clusterVersion: string;

  /**
   * use network.vpc_cidr instead
   *
   * @generated from field: string cidr_range = 3 [deprecated = true];
   * @deprecated
   */
  cidrRange: string;

  /**
   * @generated from field: string region = 4;
   */
  region: string;

  /**
   * @generated from field: repeated porter.v1.EKSNodeGroup node_groups = 5;
   */
  nodeGroups: EKSNodeGroup[];

  /**
   * @generated from field: porter.v1.LoadBalancer load_balancer = 6;
   */
  loadBalancer?: LoadBalancer;

  /**
   * @generated from field: bool enable_guard_duty = 7;
   */
  enableGuardDuty: boolean;

  /**
   * @generated from field: porter.v1.EKSLogging logging = 8;
   */
  logging?: EKSLogging;

  /**
   * enable_kms_encryption triggers a KMS key creation and enables encryption on the EKS cluster with that key.  Once enabled, encryption can never be disabled.
   *
   * @generated from field: bool enable_kms_encryption = 9;
   */
  enableKmsEncryption: boolean;

  /**
   * network is the network configuration for the EKS cluster.
   * If both cidr_range and network.vpc_cidr are set, network.vpc_cidr will be used.
   *
   * @generated from field: porter.v1.AWSClusterNetwork network = 10;
   */
  network?: AWSClusterNetwork;

  /**
   * enable_ecr_scanning controls whether continuous scanning should be enabled for all AWS registries associated with the cluster
   *
   * @generated from field: bool enable_ecr_scanning = 11;
   */
  enableEcrScanning: boolean;

  /**
   * cloudwatch_alarm contains the configuration for setting up cloudwatch on a cluster
   *
   * @generated from field: porter.v1.CloudwatchAlarm cloudwatch_alarm = 12;
   */
  cloudwatchAlarm?: CloudwatchAlarm;

  /**
   * control_plane_cidr_allowlist is an optional list of CIDRs that are allowed to access the control plane
   *
   * @generated from field: repeated string control_plane_cidr_allowlist = 13;
   */
  controlPlaneCidrAllowlist: string[];

  constructor(data?: PartialMessage<EKS>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "porter.v1.EKS";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EKS;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EKS;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EKS;

  static equals(a: EKS | PlainMessage<EKS> | undefined, b: EKS | PlainMessage<EKS> | undefined): boolean;
}

/**
 * CloudwatchAlarm contains all the information required to configure cloudwatch alarms on a cluster
 *
 * @generated from message porter.v1.CloudwatchAlarm
 */
export declare class CloudwatchAlarm extends Message<CloudwatchAlarm> {
  /**
   * enable toggles whether cloudwatch alarms are setup or not
   *
   * @generated from field: bool enable = 1;
   */
  enable: boolean;

  /**
   * emails is a list of email addresses to send alarms to
   *
   * @generated from field: repeated string emails = 2;
   */
  emails: string[];

  constructor(data?: PartialMessage<CloudwatchAlarm>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "porter.v1.CloudwatchAlarm";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloudwatchAlarm;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloudwatchAlarm;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloudwatchAlarm;

  static equals(a: CloudwatchAlarm | PlainMessage<CloudwatchAlarm> | undefined, b: CloudwatchAlarm | PlainMessage<CloudwatchAlarm> | undefined): boolean;
}

/**
 * AWSClusterNetwork contains all information required to configure the AWS cluster's network
 *
 * @generated from message porter.v1.AWSClusterNetwork
 */
export declare class AWSClusterNetwork extends Message<AWSClusterNetwork> {
  /**
   * vpc_cidr is the range of the VPC network. This is used to specify the network that Porter will use.
   *
   * @generated from field: string vpc_cidr = 1;
   */
  vpcCidr: string;

  /**
   * service_cidr is the range of the network that services will be assigned IPs from, on the AWS vpc.
   *
   * @generated from field: string service_cidr = 2;
   */
  serviceCidr: string;

  constructor(data?: PartialMessage<AWSClusterNetwork>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "porter.v1.AWSClusterNetwork";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AWSClusterNetwork;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AWSClusterNetwork;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AWSClusterNetwork;

  static equals(a: AWSClusterNetwork | PlainMessage<AWSClusterNetwork> | undefined, b: AWSClusterNetwork | PlainMessage<AWSClusterNetwork> | undefined): boolean;
}

/**
 * EKSNodeGroup is the configuration for an EKS node group/auto scaling group
 *
 * @generated from message porter.v1.EKSNodeGroup
 */
export declare class EKSNodeGroup extends Message<EKSNodeGroup> {
  /**
   * @generated from field: string instance_type = 1;
   */
  instanceType: string;

  /**
   * @generated from field: uint32 min_instances = 2;
   */
  minInstances: number;

  /**
   * @generated from field: uint32 max_instances = 3;
   */
  maxInstances: number;

  /**
   * node_group_type is used to specify the type of node group. This is used to specify what node groups are used by Porter, vs users.
   *
   * @generated from field: porter.v1.NodeGroupType node_group_type = 4;
   */
  nodeGroupType: NodeGroupType;

  /**
   * is_stateful is deprecated. It was initially used to specify if a nodegroup had state, and needed to be kept in a single AZ.
   *
   * @generated from field: bool is_stateful = 5 [deprecated = true];
   * @deprecated
   */
  isStateful: boolean;

  /**
   * additional_policies is a list of IAM policies to attach to the node group role, on top of the policies applied by Porter.
   * deprecated: policies should be managed before cluster provisioning instead
   *
   * @generated from field: repeated string additional_policies = 6 [deprecated = true];
   * @deprecated
   */
  additionalPolicies: string[];

  /**
   * additional_taints is a list of NoSchedule taints to apply to the node group.
   * These will be applied on top of the default porter.run/workload-kind taints.
   *
   * @generated from field: repeated string additional_taints = 7;
   */
  additionalTaints: string[];

  /**
   * disk_size_gb is the size of the disk in GB for the node group instances. If unspecified, this will default to 50.
   *
   * @generated from field: uint32 disk_size_gb = 8;
   */
  diskSizeGb: number;

  /**
   * node_group_id is the id of the node group. This uniquely identifies NodeGroupType=User and is generated on creation if not provided.
   *
   * @generated from field: string node_group_id = 9;
   */
  nodeGroupId: string;

  /**
   * node_group_name is the vanity name of the node group. This is required for NodeGroupType=User and can be changed by the user.
   *
   * @generated from field: string node_group_name = 10;
   */
  nodeGroupName: string;

  constructor(data?: PartialMessage<EKSNodeGroup>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "porter.v1.EKSNodeGroup";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EKSNodeGroup;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EKSNodeGroup;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EKSNodeGroup;

  static equals(a: EKSNodeGroup | PlainMessage<EKSNodeGroup> | undefined, b: EKSNodeGroup | PlainMessage<EKSNodeGroup> | undefined): boolean;
}

/**
 * @generated from message porter.v1.LoadBalancer
 */
export declare class LoadBalancer extends Message<LoadBalancer> {
  /**
   * load_balancer_type is the type of load balancer to deploy. If unspecified, this will be assumed to be NLB for AWS
   *
   * @generated from field: porter.v1.LoadBalancerType load_balancer_type = 1;
   */
  loadBalancerType: LoadBalancerType;

  /**
   * wildcard_domain is used in ALB loadbalancer deployment when allowlisting IPs. This has no effect when load_balancer_type is NLB
   *
   * @generated from field: string wildcard_domain = 2;
   */
  wildcardDomain: string;

  /**
   * allowlist_ip_ranges are comma separated CIDRS, which are the only ranges who will be granted access to ALB ingress resources. This has no effect when load_balancer_type is NLB
   *
   * @generated from field: string allowlist_ip_ranges = 3;
   */
  allowlistIpRanges: string;

  /**
   * enable_wafv2 enables WAFv2 on the ALB. This has no effect when load_balancer_type is NLB
   *
   * @generated from field: bool enable_wafv2 = 4;
   */
  enableWafv2: boolean;

  /**
   * wafv2_arn is the ARN of the WAFv2 ACL to attach to the ALB. This has no effect when load_balancer_type is NLB, or if enable_wafv2 is false
   *
   * @generated from field: string wafv2_arn = 5;
   */
  wafv2Arn: string;

  /**
   * additional_certificate_arns is a list of ACM certificate ARNs to attach to the ALB. This has no effect when load_balancer_type is NLB. These will be added in order, before the ACM certificate created by Porter.
   *
   * @generated from field: repeated string additional_certificate_arns = 6;
   */
  additionalCertificateArns: string[];

  /**
   * tags is a map of AWS tags to apply to the ALB. This has no effect when load_balancer_type is NLB.
   *
   * @generated from field: map<string, string> tags = 7;
   */
  tags: { [key: string]: string };

  /**
   * enable_s3_access_logs enables S3 access logs on the ALB. This has no effect when load_balancer_type is NLB.
   *
   * @generated from field: bool enable_s3_access_logs = 8;
   */
  enableS3AccessLogs: boolean;

  constructor(data?: PartialMessage<LoadBalancer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "porter.v1.LoadBalancer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoadBalancer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoadBalancer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoadBalancer;

  static equals(a: LoadBalancer | PlainMessage<LoadBalancer> | undefined, b: LoadBalancer | PlainMessage<LoadBalancer> | undefined): boolean;
}

/**
 * EKSLogging is the configuration for EKS control plane logging which is typically managed through the AWS Console. This will create a CloudWatch log group and log stream for the enabled logs.
 *
 * @generated from message porter.v1.EKSLogging
 */
export declare class EKSLogging extends Message<EKSLogging> {
  /**
   * @generated from field: bool enable_api_server_logs = 1;
   */
  enableApiServerLogs: boolean;

  /**
   * @generated from field: bool enable_authenticator_logs = 2;
   */
  enableAuthenticatorLogs: boolean;

  /**
   * @generated from field: bool enable_scheduler_logs = 3;
   */
  enableSchedulerLogs: boolean;

  /**
   * @generated from field: bool enable_audit_logs = 4;
   */
  enableAuditLogs: boolean;

  /**
   * @generated from field: bool enable_controller_manager_logs = 5;
   */
  enableControllerManagerLogs: boolean;

  /**
   * enable_cloudwatch_logs_to_s3 controls whether eks logs that are sent to cloudwatch are shipped to an autogenerated s3 bucket
   *
   * @generated from field: bool enable_cloudwatch_logs_to_s3 = 6;
   */
  enableCloudwatchLogsToS3: boolean;

  constructor(data?: PartialMessage<EKSLogging>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "porter.v1.EKSLogging";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EKSLogging;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EKSLogging;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EKSLogging;

  static equals(a: EKSLogging | PlainMessage<EKSLogging> | undefined, b: EKSLogging | PlainMessage<EKSLogging> | undefined): boolean;
}

/**
 * EKSPreflightValues contains all needed values to perform EKS Preflight Checks
 *
 * @generated from message porter.v1.EKSPreflightValues
 */
export declare class EKSPreflightValues extends Message<EKSPreflightValues> {
  /**
   * region the region to perform the preflight checks in
   *
   * @generated from field: string region = 1;
   */
  region: string;

  constructor(data?: PartialMessage<EKSPreflightValues>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "porter.v1.EKSPreflightValues";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EKSPreflightValues;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EKSPreflightValues;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EKSPreflightValues;

  static equals(a: EKSPreflightValues | PlainMessage<EKSPreflightValues> | undefined, b: EKSPreflightValues | PlainMessage<EKSPreflightValues> | undefined): boolean;
}

/**
 * AWSVpc contains all the properties representing an AWS VPC and any networking-related information
 *
 * @generated from message porter.v1.AWSVpc
 */
export declare class AWSVpc extends Message<AWSVpc> {
  /**
   * id is a unique vpc identifier for an AWS VPC and can be used to reference the VPC in api calls
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * cidr_range is the cidr range of the VPC
   *
   * @generated from field: string cidr_range = 2;
   */
  cidrRange: string;

  /**
   * subnets is a list of subnets associated with the VPC
   *
   * @generated from field: repeated porter.v1.AWSSubnet subnets = 3;
   */
  subnets: AWSSubnet[];

  constructor(data?: PartialMessage<AWSVpc>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "porter.v1.AWSVpc";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AWSVpc;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AWSVpc;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AWSVpc;

  static equals(a: AWSVpc | PlainMessage<AWSVpc> | undefined, b: AWSVpc | PlainMessage<AWSVpc> | undefined): boolean;
}

/**
 * AWSSubnet contains all the properties representing a single subnet in an AWS VPC
 *
 * @generated from message porter.v1.AWSSubnet
 */
export declare class AWSSubnet extends Message<AWSSubnet> {
  /**
   * availability_zone is the availability zone in which the subnet resides
   *
   * @generated from field: string availability_zone = 1;
   */
  availabilityZone: string;

  /**
   * cidr_range is the cirdr range of the subnet within the VPC
   *
   * @generated from field: string cidr_range = 2;
   */
  cidrRange: string;

  constructor(data?: PartialMessage<AWSSubnet>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "porter.v1.AWSSubnet";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AWSSubnet;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AWSSubnet;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AWSSubnet;

  static equals(a: AWSSubnet | PlainMessage<AWSSubnet> | undefined, b: AWSSubnet | PlainMessage<AWSSubnet> | undefined): boolean;
}

