// @generated by protoc-gen-es v1.4.2
// @generated from file porter/v1/compliance.proto (package porter.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum porter.v1.EnumComplianceVendor
 */
export declare enum EnumComplianceVendor {
  /**
   * @generated from enum value: ENUM_COMPLIANCE_VENDOR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * ENUM_COMPLIANCE_VENDOR_VANTA signifies the compliance vendor Vanta.
   *
   * @generated from enum value: ENUM_COMPLIANCE_VENDOR_VANTA = 1;
   */
  VANTA = 1,
}

/**
 * @generated from enum porter.v1.EnumComplianceCheckStatus
 */
export declare enum EnumComplianceCheckStatus {
  /**
   * @generated from enum value: ENUM_COMPLIANCE_CHECK_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * ENUM_COMPLIANCE_CHECK_STATUS_PASSED signifies the compliance check passed.
   *
   * @generated from enum value: ENUM_COMPLIANCE_CHECK_STATUS_PASSED = 1;
   */
  PASSED = 1,

  /**
   * ENUM_COMPLIANCE_CHECK_STATUS_FAILED signifies the compliance check failed.
   *
   * @generated from enum value: ENUM_COMPLIANCE_CHECK_STATUS_FAILED = 2;
   */
  FAILED = 2,

  /**
   * ENUM_COMPLIANCE_CHECK_STATUS_NOT_APPLICABLE signifies the compliance check was not applicable.
   *
   * @generated from enum value: ENUM_COMPLIANCE_CHECK_STATUS_NOT_APPLICABLE = 3;
   */
  NOT_APPLICABLE = 3,
}

/**
 * @generated from message porter.v1.ContractComplianceCheckGroup
 */
export declare class ContractComplianceCheckGroup extends Message<ContractComplianceCheckGroup> {
  /**
   * name is the name of the compliance check group.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * status is the current status of the compliance check group.
   *
   * @generated from field: porter.v1.EnumComplianceCheckStatus status = 2;
   */
  status: EnumComplianceCheckStatus;

  /**
   * message is an optional message indicating why the compliance check group is in the current state.
   *
   * @generated from field: string message = 3;
   */
  message: string;

  constructor(data?: PartialMessage<ContractComplianceCheckGroup>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "porter.v1.ContractComplianceCheckGroup";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContractComplianceCheckGroup;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContractComplianceCheckGroup;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContractComplianceCheckGroup;

  static equals(a: ContractComplianceCheckGroup | PlainMessage<ContractComplianceCheckGroup> | undefined, b: ContractComplianceCheckGroup | PlainMessage<ContractComplianceCheckGroup> | undefined): boolean;
}

/**
 * @generated from message porter.v1.VendorComplianceCheck
 */
export declare class VendorComplianceCheck extends Message<VendorComplianceCheck> {
  /**
   * description is the vendor provided description of the compliance check.
   *
   * @generated from field: string description = 1;
   */
  description: string;

  /**
   * check_group is the name of the compliance check group that this check belongs to.
   *
   * @generated from field: string check_group = 2;
   */
  checkGroup: string;

  /**
   * status is the status of the compliance check.
   *
   * @generated from field: porter.v1.EnumComplianceCheckStatus status = 3;
   */
  status: EnumComplianceCheckStatus;

  /**
   * reason is an optional message indicating why the compliance check is in the current state.
   *
   * @generated from field: string reason = 4;
   */
  reason: string;

  constructor(data?: PartialMessage<VendorComplianceCheck>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "porter.v1.VendorComplianceCheck";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VendorComplianceCheck;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VendorComplianceCheck;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VendorComplianceCheck;

  static equals(a: VendorComplianceCheck | PlainMessage<VendorComplianceCheck> | undefined, b: VendorComplianceCheck | PlainMessage<VendorComplianceCheck> | undefined): boolean;
}

