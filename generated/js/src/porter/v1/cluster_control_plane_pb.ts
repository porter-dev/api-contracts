// @generated by protoc-gen-es v1.1.0 with parameter "target=ts,import_extension=none"
// @generated from file porter/v1/cluster_control_plane.proto (package porter.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { AssumeRoleChainLink } from "./aws_assume_role_pb";

/**
 * @generated from message porter.v1.CreateAssumeRoleChainRequest
 */
export class CreateAssumeRoleChainRequest extends Message<CreateAssumeRoleChainRequest> {
  /**
   * @generated from field: int64 project_id = 1;
   */
  projectId = protoInt64.zero;

  /**
   * @generated from field: string source_arn = 2;
   */
  sourceArn = "";

  /**
   * @generated from field: string target_access_id = 3;
   */
  targetAccessId = "";

  /**
   * @generated from field: string target_secret_key = 4;
   */
  targetSecretKey = "";

  /**
   * @generated from field: string target_session_token = 5;
   */
  targetSessionToken = "";

  constructor(data?: PartialMessage<CreateAssumeRoleChainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "porter.v1.CreateAssumeRoleChainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "source_arn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "target_access_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "target_secret_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "target_session_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAssumeRoleChainRequest {
    return new CreateAssumeRoleChainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAssumeRoleChainRequest {
    return new CreateAssumeRoleChainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAssumeRoleChainRequest {
    return new CreateAssumeRoleChainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAssumeRoleChainRequest | PlainMessage<CreateAssumeRoleChainRequest> | undefined, b: CreateAssumeRoleChainRequest | PlainMessage<CreateAssumeRoleChainRequest> | undefined): boolean {
    return proto3.util.equals(CreateAssumeRoleChainRequest, a, b);
  }
}

/**
 * @generated from message porter.v1.CreateAssumeRoleChainResponse
 */
export class CreateAssumeRoleChainResponse extends Message<CreateAssumeRoleChainResponse> {
  /**
   * @generated from field: int64 project_id = 1;
   */
  projectId = protoInt64.zero;

  /**
   * @generated from field: string target_arn = 2;
   */
  targetArn = "";

  constructor(data?: PartialMessage<CreateAssumeRoleChainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "porter.v1.CreateAssumeRoleChainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "target_arn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAssumeRoleChainResponse {
    return new CreateAssumeRoleChainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAssumeRoleChainResponse {
    return new CreateAssumeRoleChainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAssumeRoleChainResponse {
    return new CreateAssumeRoleChainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAssumeRoleChainResponse | PlainMessage<CreateAssumeRoleChainResponse> | undefined, b: CreateAssumeRoleChainResponse | PlainMessage<CreateAssumeRoleChainResponse> | undefined): boolean {
    return proto3.util.equals(CreateAssumeRoleChainResponse, a, b);
  }
}

/**
 * @generated from message porter.v1.EKSBearerTokenRequest
 */
export class EKSBearerTokenRequest extends Message<EKSBearerTokenRequest> {
  /**
   * @generated from field: int64 project_id = 1;
   */
  projectId = protoInt64.zero;

  /**
   * @generated from field: int64 cluster_id = 2;
   */
  clusterId = protoInt64.zero;

  constructor(data?: PartialMessage<EKSBearerTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "porter.v1.EKSBearerTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "cluster_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EKSBearerTokenRequest {
    return new EKSBearerTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EKSBearerTokenRequest {
    return new EKSBearerTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EKSBearerTokenRequest {
    return new EKSBearerTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EKSBearerTokenRequest | PlainMessage<EKSBearerTokenRequest> | undefined, b: EKSBearerTokenRequest | PlainMessage<EKSBearerTokenRequest> | undefined): boolean {
    return proto3.util.equals(EKSBearerTokenRequest, a, b);
  }
}

/**
 * @generated from message porter.v1.EKSBearerTokenResponse
 */
export class EKSBearerTokenResponse extends Message<EKSBearerTokenResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<EKSBearerTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "porter.v1.EKSBearerTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EKSBearerTokenResponse {
    return new EKSBearerTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EKSBearerTokenResponse {
    return new EKSBearerTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EKSBearerTokenResponse {
    return new EKSBearerTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EKSBearerTokenResponse | PlainMessage<EKSBearerTokenResponse> | undefined, b: EKSBearerTokenResponse | PlainMessage<EKSBearerTokenResponse> | undefined): boolean {
    return proto3.util.equals(EKSBearerTokenResponse, a, b);
  }
}

/**
 * @generated from message porter.v1.AssumeRoleChainTargetsRequest
 */
export class AssumeRoleChainTargetsRequest extends Message<AssumeRoleChainTargetsRequest> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  constructor(data?: PartialMessage<AssumeRoleChainTargetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "porter.v1.AssumeRoleChainTargetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssumeRoleChainTargetsRequest {
    return new AssumeRoleChainTargetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssumeRoleChainTargetsRequest {
    return new AssumeRoleChainTargetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssumeRoleChainTargetsRequest {
    return new AssumeRoleChainTargetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AssumeRoleChainTargetsRequest | PlainMessage<AssumeRoleChainTargetsRequest> | undefined, b: AssumeRoleChainTargetsRequest | PlainMessage<AssumeRoleChainTargetsRequest> | undefined): boolean {
    return proto3.util.equals(AssumeRoleChainTargetsRequest, a, b);
  }
}

/**
 * @generated from message porter.v1.AssumeRoleChainTargetsResponse
 */
export class AssumeRoleChainTargetsResponse extends Message<AssumeRoleChainTargetsResponse> {
  /**
   * @generated from field: repeated porter.v1.AssumeRoleChainLink chain_links = 1;
   */
  chainLinks: AssumeRoleChainLink[] = [];

  constructor(data?: PartialMessage<AssumeRoleChainTargetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "porter.v1.AssumeRoleChainTargetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chain_links", kind: "message", T: AssumeRoleChainLink, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssumeRoleChainTargetsResponse {
    return new AssumeRoleChainTargetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssumeRoleChainTargetsResponse {
    return new AssumeRoleChainTargetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssumeRoleChainTargetsResponse {
    return new AssumeRoleChainTargetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AssumeRoleChainTargetsResponse | PlainMessage<AssumeRoleChainTargetsResponse> | undefined, b: AssumeRoleChainTargetsResponse | PlainMessage<AssumeRoleChainTargetsResponse> | undefined): boolean {
    return proto3.util.equals(AssumeRoleChainTargetsResponse, a, b);
  }
}

/**
 * @generated from message porter.v1.KubeConfigForClusterRequest
 */
export class KubeConfigForClusterRequest extends Message<KubeConfigForClusterRequest> {
  /**
   * @generated from field: int64 project_id = 1;
   */
  projectId = protoInt64.zero;

  /**
   * @generated from field: int64 cluster_id = 2;
   */
  clusterId = protoInt64.zero;

  constructor(data?: PartialMessage<KubeConfigForClusterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "porter.v1.KubeConfigForClusterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "cluster_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KubeConfigForClusterRequest {
    return new KubeConfigForClusterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KubeConfigForClusterRequest {
    return new KubeConfigForClusterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KubeConfigForClusterRequest {
    return new KubeConfigForClusterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: KubeConfigForClusterRequest | PlainMessage<KubeConfigForClusterRequest> | undefined, b: KubeConfigForClusterRequest | PlainMessage<KubeConfigForClusterRequest> | undefined): boolean {
    return proto3.util.equals(KubeConfigForClusterRequest, a, b);
  }
}

/**
 * @generated from message porter.v1.KubeConfigForClusterResponse
 */
export class KubeConfigForClusterResponse extends Message<KubeConfigForClusterResponse> {
  /**
   * @generated from field: string kube_config = 1;
   */
  kubeConfig = "";

  constructor(data?: PartialMessage<KubeConfigForClusterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "porter.v1.KubeConfigForClusterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kube_config", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KubeConfigForClusterResponse {
    return new KubeConfigForClusterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KubeConfigForClusterResponse {
    return new KubeConfigForClusterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KubeConfigForClusterResponse {
    return new KubeConfigForClusterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: KubeConfigForClusterResponse | PlainMessage<KubeConfigForClusterResponse> | undefined, b: KubeConfigForClusterResponse | PlainMessage<KubeConfigForClusterResponse> | undefined): boolean {
    return proto3.util.equals(KubeConfigForClusterResponse, a, b);
  }
}

