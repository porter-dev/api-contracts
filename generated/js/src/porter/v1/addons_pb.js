// @generated by protoc-gen-es v1.8.0
// @generated from file porter/v1/addons.proto (package porter.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { EnvGroup } from "./porter_app_pb.js";

/**
 * @generated from enum porter.v1.AddonType
 */
export const AddonType = /*@__PURE__*/ proto3.makeEnum(
  "porter.v1.AddonType",
  [
    {no: 0, name: "ADDON_TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "ADDON_TYPE_POSTGRES", localName: "POSTGRES"},
    {no: 2, name: "ADDON_TYPE_REDIS", localName: "REDIS"},
  ],
);

/**
 * PrerequisiteAddon specifies an addon that must be installed before any apps can be installed
 * the addon should be installed with the specified config
 *
 * @generated from message porter.v1.PrerequisiteAddon
 */
export const PrerequisiteAddon = /*@__PURE__*/ proto3.makeMessageType(
  "porter.v1.PrerequisiteAddon",
  () => [
    { no: 1, name: "commit_sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Addon is the configuration object for tooling or services that can be applied to the cluster alongside porter apps.
 *
 * @generated from message porter.v1.Addon
 */
export const Addon = /*@__PURE__*/ proto3.makeMessageType(
  "porter.v1.Addon",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(AddonType) },
    { no: 3, name: "env_groups", kind: "message", T: EnvGroup, repeated: true },
    { no: 4, name: "postgres", kind: "message", T: Postgres, oneof: "config" },
    { no: 5, name: "redis", kind: "message", T: Redis, oneof: "config" },
  ],
);

/**
 * Postgres is the configuration for postgres
 *
 * @generated from message porter.v1.Postgres
 */
export const Postgres = /*@__PURE__*/ proto3.makeMessageType(
  "porter.v1.Postgres",
  () => [
    { no: 1, name: "cpu_cores", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "ram_megabytes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "storage_gigabytes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * Redis is the configuration for redis
 *
 * @generated from message porter.v1.Redis
 */
export const Redis = /*@__PURE__*/ proto3.makeMessageType(
  "porter.v1.Redis",
  () => [
    { no: 1, name: "cpu_cores", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "ram_megabytes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "storage_gigabytes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

