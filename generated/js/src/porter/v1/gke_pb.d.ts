// @generated by protoc-gen-es v1.4.2
// @generated from file porter/v1/gke.proto (package porter.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum porter.v1.GKENodePoolType
 */
export declare enum GKENodePoolType {
  /**
   * @generated from enum value: GKE_NODE_POOL_TYPE_UNSPECIFIED = 0;
   */
  GKE_NODE_POOL_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: GKE_NODE_POOL_TYPE_SYSTEM = 1;
   */
  GKE_NODE_POOL_TYPE_SYSTEM = 1,

  /**
   * @generated from enum value: GKE_NODE_POOL_TYPE_MONITORING = 2;
   */
  GKE_NODE_POOL_TYPE_MONITORING = 2,

  /**
   * @generated from enum value: GKE_NODE_POOL_TYPE_APPLICATION = 3;
   */
  GKE_NODE_POOL_TYPE_APPLICATION = 3,

  /**
   * @generated from enum value: GKE_NODE_POOL_TYPE_CUSTOM = 4;
   */
  GKE_NODE_POOL_TYPE_CUSTOM = 4,
}

/**
 * @generated from message porter.v1.GKE
 */
export declare class GKE extends Message<GKE> {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * @generated from field: string cluster_version = 2;
   */
  clusterVersion: string;

  /**
   * @generated from field: porter.v1.GKENetwork network = 3;
   */
  network?: GKENetwork;

  /**
   * @generated from field: string region = 4;
   */
  region: string;

  /**
   * @generated from field: repeated porter.v1.GKENodePool node_pools = 5;
   */
  nodePools: GKENodePool[];

  constructor(data?: PartialMessage<GKE>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "porter.v1.GKE";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GKE;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GKE;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GKE;

  static equals(a: GKE | PlainMessage<GKE> | undefined, b: GKE | PlainMessage<GKE> | undefined): boolean;
}

/**
 * @generated from message porter.v1.GKENodePool
 */
export declare class GKENodePool extends Message<GKENodePool> {
  /**
   * @generated from field: string instance_type = 1;
   */
  instanceType: string;

  /**
   * @generated from field: uint32 min_instances = 2;
   */
  minInstances: number;

  /**
   * @generated from field: uint32 max_instances = 3;
   */
  maxInstances: number;

  /**
   * node_pool_type is used to specify the type of node group. This is used to specify what node groups are used by Porter, vs users.
   *
   * @generated from field: porter.v1.GKENodePoolType node_pool_type = 4;
   */
  nodePoolType: GKENodePoolType;

  /**
   * additional_taints is a list of NoSchedule taints to apply to the node group.
   * These will be applied on top of the default porter.run/workload-kind taints.
   *
   * @generated from field: repeated string additional_taints = 5;
   */
  additionalTaints: string[];

  /**
   * is_spot_instance is used to specify whether the node group should use spot instances.
   *
   * @generated from field: bool is_spot_instance = 6;
   */
  isSpotInstance: boolean;

  constructor(data?: PartialMessage<GKENodePool>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "porter.v1.GKENodePool";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GKENodePool;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GKENodePool;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GKENodePool;

  static equals(a: GKENodePool | PlainMessage<GKENodePool> | undefined, b: GKENodePool | PlainMessage<GKENodePool> | undefined): boolean;
}

/**
 * GKENetwork contains all information required to configure the GKE cluster's network
 *
 * @generated from message porter.v1.GKENetwork
 */
export declare class GKENetwork extends Message<GKENetwork> {
  /**
   * cidr_range is the range of the network. This is used to specify the network that Porter will use.
   *
   * @generated from field: string cidr_range = 1;
   */
  cidrRange: string;

  /**
   * control_plane_cidr is a range reserved by GKE for control plane functions such as running a global load balancer.
   *
   * @generated from field: string control_plane_cidr = 2;
   */
  controlPlaneCidr: string;

  /**
   * pod_cidr is the range of the network that pods will be assigned IPs from, on the GCP subnet.
   *
   * @generated from field: string pod_cidr = 3;
   */
  podCidr: string;

  /**
   * service_cidr is the range of the network that services will be assigned IPs from, on the GCP subnet.
   *
   * @generated from field: string service_cidr = 4;
   */
  serviceCidr: string;

  constructor(data?: PartialMessage<GKENetwork>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "porter.v1.GKENetwork";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GKENetwork;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GKENetwork;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GKENetwork;

  static equals(a: GKENetwork | PlainMessage<GKENetwork> | undefined, b: GKENetwork | PlainMessage<GKENetwork> | undefined): boolean;
}

/**
 * GKEPreflightValues is cidr ranges needed for PreflightChecks
 *
 * @generated from message porter.v1.GKEPreflightValues
 */
export declare class GKEPreflightValues extends Message<GKEPreflightValues> {
  /**
   * //Network contains all information required to configure the GKE cluster's network
   *
   * @generated from field: porter.v1.GKENetwork network = 1;
   */
  network?: GKENetwork;

  constructor(data?: PartialMessage<GKEPreflightValues>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "porter.v1.GKEPreflightValues";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GKEPreflightValues;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GKEPreflightValues;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GKEPreflightValues;

  static equals(a: GKEPreflightValues | PlainMessage<GKEPreflightValues> | undefined, b: GKEPreflightValues | PlainMessage<GKEPreflightValues> | undefined): boolean;
}

