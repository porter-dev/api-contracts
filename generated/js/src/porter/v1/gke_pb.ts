// @generated by protoc-gen-es v1.1.0 with parameter "target=ts,import_extension=none"
// @generated from file porter/v1/gke.proto (package porter.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message porter.v1.GKE
 */
export class GKE extends Message<GKE> {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * @generated from field: string cluster_version = 2;
   */
  clusterVersion = "";

  /**
   * @generated from field: string issuer_email = 3;
   */
  issuerEmail = "";

  /**
   * @generated from field: string cidr_range = 4;
   */
  cidrRange = "";

  constructor(data?: PartialMessage<GKE>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "porter.v1.GKE";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cluster_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "issuer_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "cidr_range", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GKE {
    return new GKE().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GKE {
    return new GKE().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GKE {
    return new GKE().fromJsonString(jsonString, options);
  }

  static equals(a: GKE | PlainMessage<GKE> | undefined, b: GKE | PlainMessage<GKE> | undefined): boolean {
    return proto3.util.equals(GKE, a, b);
  }
}

