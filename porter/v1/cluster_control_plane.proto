syntax = "proto3";

package porter.v1;

import "google/protobuf/timestamp.proto";
import "porter/v1/addons.proto";
import "porter/v1/aws_assume_role.proto";
import "porter/v1/cloud_provider_credentials.proto";
import "porter/v1/cluster.proto";
import "porter/v1/contract.proto";
import "porter/v1/eks.proto";
import "porter/v1/env_group.proto";
import "porter/v1/errors.proto";
import "porter/v1/gke.proto";
import "porter/v1/porter_app.proto";

message QuotaIncreaseRequest {
  int64 project_id = 1;
  //cloud_provider the given cloud provider will use to make quota increases
  EnumCloudProvider cloud_provider = 2;
  // cloud_provider_credentials_id [REQUIRED] is the Porter credentials that will be used for provisioning a cluster.
  // These must be stored within Porter, prior to cluster creation. For AWS this refers to the last link in an assume role chain
  string cloud_provider_credentials_id = 3;
  //quota_increases list of quota increases to be requsted
  repeated EnumQuotaIncrease quota_increases = 4;

  oneof preflight_values {
    //gke_preflight_values the values that GKE will use to perform quota increases
    GKEPreflightValues gke_preflight_values = 5;
    //eks_preflight_values the values that AWS will use to perform quota increases
    EKSPreflightValues eks_preflight_values = 6;
    //AKS aks_kind = 6;
  }
}

message QuotaIncreaseResponse {
  //error if any of quota increases failed
  Error error = 1;
}

message PreflightCheckRequest {
  // Deprecated: use contract instead
  int64 project_id = 1 [deprecated = true];
  // cloud_provider [REQUIRED] represents the provider that we will provisioning the cluster in
  // Deprecated: use contract instead
  EnumCloudProvider cloud_provider = 2 [deprecated = true];
  // cloud_provider_credentials_id [REQUIRED] is the Porter credentials that will be used for provisioning a cluster.
  // These must be stored within Porter, prior to cluster creation. For AWS this refers to the last link in an assume role chain
  // Deprecated: use contract instead
  string cloud_provider_credentials_id = 3 [deprecated = true];

  oneof preflight_values {
    // gke_preflight_values the values that GKE will use to perform preflight checks
    // Deprecated: use contract instead
    GKEPreflightValues gke_preflight_values = 4 [deprecated = true];
    // eks_preflight_values the values that AWS will use to perform preflight checks
    // Deprecated: use contract instead
    EKSPreflightValues eks_preflight_values = 5 [deprecated = true];

    //AKS aks_kind = 6;
  }
  Contract contract = 6;
}

message PreflightCheckResponse {
  // preflight_checks keys are name of preflight check and error will be if the preflight checks fails, nil if it passes
  map<string, Error> preflight_checks = 1;
}

message QuotaPreflightCheckRequest {
  option deprecated = true;
  int64 project_id = 1;
  string target_arn = 2;
  string external_id = 3;
  string region = 4;
}

message QuotaPreflightCheckResponse {
  option deprecated = true;
}

message CreateAssumeRoleChainRequest {
  option deprecated = true;

  int64 project_id = 1;
  string source_arn = 2;
  string target_access_id = 3;
  string target_secret_key = 4;
  string target_session_token = 5;
  string target_arn = 6;
  string external_id = 7;
}

message CreateAssumeRoleChainResponse {
  option deprecated = true;

  int64 project_id = 1;
  string target_arn = 2;
}

message SaveAzureCredentialsRequest {
  option deprecated = true;
  int64 project_id = 1;
  string client_id = 2;
  string subscription_id = 3;
  string tenant_id = 4;
  bytes service_principal_secret = 5;
}

message SaveAzureCredentialsResponse {
  option deprecated = true;

  int64 project_id = 1;
  string credentials_identifier = 2;
}

message KubeConfigForClusterRequest {
  int64 project_id = 1;
  int64 cluster_id = 2;
}

message KubeConfigForClusterResponse {
  string kube_config = 1;
}

message UpdateContractRequest {
  Contract contract = 1;
}

message UpdateContractResponse {
  ContractRevision contract_revision = 1;
}

message ClusterStatusRequest {
  int64 project_id = 1;
  int64 cluster_id = 2;
}

message ClusterStatusResponse {
  int64 project_id = 1;
  int64 cluster_id = 2;
  string phase = 3;
  bool infrastructure_status = 4;
  bool control_plane_status = 5;
}

message DeleteClusterRequest {
  ContractRevision contract_revision = 1;
}

message DeleteClusterResponse {
  int64 project_id = 1;
  int64 cluster_id = 2;
}

message ListRepositoriesForRegistryRequest {
  int64 project_id = 1;
  string registry_uri = 2;
}

message ListRepositoriesForRegistryResponse {
  repeated Repository repositories = 1;
}

message Repository {
  string name = 1;
  string uri = 3;
}

message ListImagesForRepositoryRequest {
  int64 project_id = 1;
  string registry_uri = 2;
  string repo_name = 3;
}

message ListImagesForRepositoryResponse {
  repeated Image images = 1;
}

message Image {
  // Deprecated: use ImageInfo instead
  option deprecated = true;
  string repository_name = 1;
  string tag = 2;
  string digest = 3;
  google.protobuf.Timestamp updated_at = 4;
}

// ImageInfo describes everything related to a cloud-agnostic Docker image
message ImageInfo {
  // uri the uri of an image. A valid image pull will use this uri suffixed by a tag
  string uri = 1;
  // artifacts refers to the instances of an image in an image repository, each sharing the same uri
  repeated ImageArtifact artifacts = 2;
}

message ImageArtifact {
  // tag is the tag associated with the artifact
  string tag = 1;
  // updated_at is the time at which the artifact was created or updated
  google.protobuf.Timestamp updated_at = 2;
}

message TokenForRegistryRequest {
  int64 project_id = 1;
  string registry_uri = 2;
}

message TokenForRegistryResponse {
  string token = 1;
  google.protobuf.Timestamp expiry = 2;
}

message ReadContractRequest {
  ContractRevision contract_revision = 1;
}

message ReadContractResponse {
  string base64_contract = 1;
}

message ValidatePorterAppRequest {
  int64 project_id = 1;
  // deployment_target_id is the id of the deployment target where the app will be installed. Deprecated: use deployment_target_identifier.
  string deployment_target_id = 2 [deprecated = true];
  // commit_sha is the current commit sha to be built and applied
  string commit_sha = 3;
  // app is the definition of the PorterApp to be applied
  PorterApp app = 4;
  // deletions is an object containing the names of fields to be deleted from the app
  Deletions deletions = 5;
  // app_overrides contains environment specific overrides if they exist, applied depending on the deployment target
  PorterApp app_overrides = 6;
  // base_deployment_target_id is used to find a revision of the app in the base deployment target, which hydrates the preview app template
  // deprecated: use the base deployment target directly on the template instead
  string base_deployment_target_id = 7 [deprecated = true];
  // deployment_target_identifier is the object that identifies the deployment target where the app will be installed
  DeploymentTargetIdentifier deployment_target_identifier = 8;
}

message ValidatePorterAppResponse {
  PorterApp app = 1;
}

message ApplyPorterAppRequest {
  int64 project_id = 1;
  // deployment_target_id is the id of the deployment target where the app will be installed. Deprecated: use deployment_target_identifier.
  string deployment_target_id = 2 [deprecated = true];
  // app is the definition of the PorterApp to be applied
  PorterApp app = 3;
  // porter_app_revision_id is the id of the PorterAppRevision to be applied.  This is used by the CLI to provide updates to an existing app revision. If provided, app must be empty.
  string porter_app_revision_id = 4;
  // force_build is a flag that forces the app to rebuild, regardless of the existing tag. This is used on initial apply by the CLI.
  bool force_build = 5;
  // app_env is the current set of environment variables for the upcoming app revision
  EnvGroupVariables app_env = 6;
  // is_hard_env_update is a flag that indicates whether the app environment should be fully overwritten, or if the new app env variables should be merged with the existing
  bool is_hard_env_update = 7;
  // deployment_target_identifier is the object that identifies the deployment target where the app will be installed
  DeploymentTargetIdentifier deployment_target_identifier = 8;
}

message ApplyPorterAppResponse {
  string porter_app_revision_id = 1;
  // cli_action is the action that the CLI should take after applying the PorterApp (at the time of writing, either build the image or track whether a predeploy job has completed)
  EnumCLIAction cli_action = 2;
}

message UpdateAppRequest {
  int64 project_id = 1;
  // deployment_target_identifier is the object that identifies the deployment target for the app
  DeploymentTargetIdentifier deployment_target_identifier = 2;
  // app is the (potentially partial) definition of the PorterApp to be applied
  PorterApp app = 3;
  // app_revision_id is the id of the PorterAppRevision to be applied.  This is used by the CLI to provide updates to an existing app revision. If provided, app must be empty.
  string app_revision_id = 4;
  // app_env is the current set of environment variables for the upcoming app revision
  EnvGroupVariables app_env = 5;
  // deletions is an object containing the names of fields to be deleted from the app
  Deletions deletions = 6;
  // app_overrides contains environment specific overrides if they exist, applied depending on the deployment target
  PorterApp app_overrides = 7;
  // is_env_override is a flag that indicates whether the app environment should be fully overwritten, or if the new app env variables should be merged with the existing
  bool is_env_override = 8;
  // is_predeploy_eligible is a flag that indicates whether the revision is ready for predeploy to run, usually after a successful build
  bool is_predeploy_eligible = 9;
  // commit_sha is the current commit sha to be built and applied. If provided, it is assumed that the app source has changed
  string commit_sha = 10;
  // addons is a list of addons which should be deployed alongside the app
  repeated Addon addons = 11;
  // addon_overrides contains environment specific overrides for addons if they exist, applied depending on the deployment target
  // if any addons are provided, these will be the only addons deployed alongside the app and the others will be ignored
  repeated Addon addon_overrides = 12;
}

message UpdateAppResponse {
  // app_revision_id is the id of the PorterAppRevision that was updated
  string app_revision_id = 1;
  // cli_action is the action that the CLI should take after applying the PorterApp (at the time of writing, either build the image or track whether a predeploy job has completed)
  EnumCLIAction cli_action = 2;
}

message UpdateRevisionStatusRequest {
  int64 project_id = 1;
  // app_revision_id is the id of the PorterAppRevision
  string app_revision_id = 2;
  // revision_status is the new status of the revision
  EnumRevisionStatus revision_status = 3;
}

message UpdateRevisionStatusResponse {}

message RollbackRevisionRequest {
  int64 project_id = 1;
  // app_id is the id of the PorterApp to roll back
  int64 app_id = 2;
  // deployment_target_id is the id of the deployment target where the app is installed. Deprecated: use deployment_target_identifier.
  string deployment_target_id = 3 [deprecated = true];
  // app_revision_id is the id of the PorterAppRevision
  string app_revision_id = 4;
  // deployment_target_identifier is the object that identifies the deployment target for the app
  DeploymentTargetIdentifier deployment_target_identifier = 5;
}

message RollbackRevisionResponse {
  // target_revision_number is the revision number of the revision that was rolled back to
  int32 target_revision_number = 1;
  // app_revision_id is the id of the newly created PorterAppRevision
  string app_revision_id = 2;
}

// DeletePorterAppRequest is the request object when deleting a porter app from a given project
message DeletePorterAppRequest {
  // project_id is the id of the project that the PorterApp belongs to
  int64 project_id = 1;
  // app_name is the name of the porter app to be deleted
  string app_name = 2;
}

// DeletePorterAppResponse is the response object when deleting a porter app from a given project
message DeletePorterAppResponse {
  // app_id is the id of the PorterApp that was deleted
  int64 app_id = 1;
}

// DeleteAppDeploymentRequest is the request object when removing a porter app from a given deployment target
message DeleteAppDeploymentRequest {
  int64 project_id = 1;
  // deployment_target_id is the id of the deployment target where the app is installed. Deprecated: use deployment_target_identifier.
  string deployment_target_id = 2 [deprecated = true];
  // app_name is the name of the porter app to be uninstalled
  string app_name = 3;
  // deployment_target_identifier is the object that identifies the deployment target for the app
  DeploymentTargetIdentifier deployment_target_identifier = 4;
}

// DeleteAppDeploymentResponse is the response object when removing a porter app from a given deployment target
message DeleteAppDeploymentResponse {}

// DeleteDeploymentTargetRequest is the request object when removing a deployment target from a given cluster
message DeleteDeploymentTargetRequest {
  int64 project_id = 1;
  // deployment_target_id is the id of the deployment target to be deleted. Deprecated: use deployment_target_identifier.
  string deployment_target_id = 2 [deprecated = true];
  // deployment_target_identifier is the object that identifies the deployment target for the app
  DeploymentTargetIdentifier deployment_target_identifier = 3;
}

// DeleteDeploymentTargetResponse is the response object when removing a deployment target from a given cluster
message DeleteDeploymentTargetResponse {}

message CurrentAppRevisionRequest {
  int64 project_id = 1;
  // app_id is the id of the PorterApp that is currently installed
  int64 app_id = 2;
  // deployment_target_id is the id of the deployment target where the app is installed. Deprecated: use deployment_target_identifier.
  string deployment_target_id = 3 [deprecated = true];
  // deployment_target_identifier is the object that identifies the deployment target for the app
  DeploymentTargetIdentifier deployment_target_identifier = 4;
}

message AppRevision {
  // app is the definition of the PorterApp that is currently installed
  PorterApp app = 1;
  // status is the status of the revision
  string status = 2;
  // revision_number is the revision number respective to the application and deployment target
  uint64 revision_number = 3;
  // created_at is the time the revision was created
  google.protobuf.Timestamp created_at = 4;
  // updated_at is the time the revision was last updated
  google.protobuf.Timestamp updated_at = 5;
  // id is the id of the revision
  string id = 6;
  // deployment_target_id is the id of the deployment target where the revision occurs
  string deployment_target_id = 7;
  // app_instance_id is the id of the app instance
  string app_instance_id = 8;
  // app_instance_name is the name of the app instance
  string app_instance_name = 9;
  // porter_app_id is the id of the porter app
  int64 porter_app_id = 10;
}

// AppRevisionStatusRequest is used to query the status of an app revision
message AppRevisionStatusRequest {
  int64 project_id = 1;
  // app_revision_id is the id of the revision to query
  string app_revision_id = 2;
}

// AppRevisionStatusResponse is the response object from querying the status of an app revision
message AppRevisionStatusResponse {
  // predeploy_started indicates whether the predeploy has started
  bool predeploy_started = 1;
  // predeploy_successful indicates whether the predeploy was successful
  bool predeploy_successful = 2;
  // predeploy_failed indicates whether the predeploy failed
  bool predeploy_failed = 3;
  // install_started indicates whether the install has started
  bool install_started = 4;
  // install_successful indicates whether the revision install has completed successfully
  bool install_successful = 5;
  // install_failed indicates whether the revision install has failed
  bool install_failed = 6;
  // deployment_started indicates whether the deployment has started
  bool deployment_started = 7;
  // deployment_successful indicates whether the revision deployment has completed successfully
  bool deployment_successful = 8;
  // deployment_failed indicates whether the revision deployment has failed
  bool deployment_failed = 9;
  // is_in_terminal_status indicates whether the revision is in a terminal status (its status will not change)
  bool is_in_terminal_status = 10;
}

// UpdateRevisionPayload is used to send messages via nats to update a revision
message UpdateRevisionPayload {
  // project_id is the id of the project that the revision belongs to
  int64 project_id = 1;
  // revision_id is the id of the revision
  string revision_id = 2;
  // commit_sha is the commit_sha of a new build
  string commit_sha = 3;
  // image is the image information for a new image
  AppImage image = 4;
}

// UpdateAddonPayload is used to send messages via nats to update an addon
message UpdateAddonPayload {
  // project_id is the id of the project that the revision belongs to
  int64 project_id = 1;
  // commit_sha is the commit containing the latest values for the addon in the config repo
  string commit_sha = 2;
}

message RequireAppPayload {
  // project_id is the id of the project the app belongs to
  int64 project_id = 1;
  // app_name is the name of the app
  string app_name = 2;
  // app_revision_id is the id of the app revision specifying this requirement, applied to the deployment target where the requirement is expected
  string app_revision_id = 3;
  // source_deployment_target is the object that identifies the deployment target where the app definition is coming from
  // if not provided, this will be the default target for the same cluster as the target where the requirement is expected
  DeploymentTargetIdentifier source_deployment_target = 4;
}

message CurrentAppRevisionResponse {
  // revision is the currently deployed app revision for a given porter_app and deployment_target
  AppRevision app_revision = 1;
}

message ListAppRevisionsRequest {
  int64 project_id = 1;
  // app_id is the id of the PorterApp that is currently installed
  int64 app_id = 2;
  // deployment_target_id is the id of the deployment target where the app is installed. Deprecated: use deployment_target_identifier.
  string deployment_target_id = 3 [deprecated = true];
  // deployment_target_identifier is the object that identifies the deployment target for the app
  DeploymentTargetIdentifier deployment_target_identifier = 4;
}

message ListAppRevisionsResponse {
  // app_revisions is the list of app revisions for the given app and deployment target
  repeated AppRevision app_revisions = 1;
}

message LatestAppRevisionsRequest {
  int64 project_id = 1;
  // deployment_target_identifier is the object that identifies the deployment target to retrieve revisions from
  DeploymentTargetIdentifier deployment_target_identifier = 2;
  // deployment_target_id is the id of the deployment target to retrieve revisions from. Deprecated: use deployment_target_identifier.
  string deployment_target_id = 3 [deprecated = true];
}

message LatestAppRevisionsResponse {
  // app_revisions is the list of app revisions for the given deployment target
  repeated AppRevision app_revisions = 1;
}

message GetAppRevisionRequest {
  int64 project_id = 1;
  // app_revision_id is the id of the PorterAppRevision to return
  string app_revision_id = 2;
}

message GetAppRevisionResponse {
  // app_revision is the PorterAppRevision that was requested
  AppRevision app_revision = 1;
}

message AppTemplateRequest {
  int64 project_id = 1;
  // app_id is the id of the PorterApp to return the template for
  int64 app_id = 2;
}

message AppTemplateResponse {
  // app_template is the PorterApp template hydrated with the latest revision of the base app
  PorterApp app_template = 1;
  // app_env is the current set of environment variables that will be used alongside the app template
  EnvGroupVariables app_env = 2;
}

message PredeployStatusRequest {
  int64 project_id = 1;
  // app_revision_id is the revision id of the PorterApp which should have its predeploy status checked
  string app_revision_id = 2;
}

message PredeployStatusResponse {
  // predeploy_status is the status of the predeploy job
  EnumPredeployStatus predeploy_status = 1;
}

enum EnumPredeployStatus {
  ENUM_PREDEPLOY_STATUS_UNSPECIFIED = 0;
  // ENUM_PREDEPLOY_STATUS_IN_PROGRESS signifies the predeploy is still in progress.
  ENUM_PREDEPLOY_STATUS_IN_PROGRESS = 1;
  // ENUM_PREDEPLOY_STATUS_FAILED signifies the predeploy job failed.
  ENUM_PREDEPLOY_STATUS_FAILED = 2;
  // ENUM_PREDEPLOY_STATUS_SUCCESSFUL signifies the predeploy job was successful.
  ENUM_PREDEPLOY_STATUS_SUCCESSFUL = 3;
}

enum EnumQuotaIncrease {
  ENUM_QUOTA_INCREASE_UNSPECIFIED = 0;
  // ENUM_QUOTA_INCREASE_AWS_VPC signifies the quota increase is for AWS VPC
  ENUM_QUOTA_INCREASE_AWS_VPC = 1;
  // ENUM_QUOTA_INCREASE_AWS_VCPU signifies the quota increase is for AWS VCPU
  ENUM_QUOTA_INCREASE_AWS_VCPU = 2;
  // ENUM_QUOTA_INCREASE_AWS_EIP signifies the quota increase is for AWS EIP
  ENUM_QUOTA_INCREASE_AWS_EIP = 3;
  // ENUM_QUOTA_INCREASE_AWS_NAT signifies the quota increase is for AWS NAT
  ENUM_QUOTA_INCREASE_AWS_NAT = 4;
  // ENUM_QUOTA_INCREASE_GCP signifies the quota increase is for GCP
  ENUM_QUOTA_INCREASE_GCP = 5;
  // ENUM_QUOTA_INCREASE_AZURE signifies the quota increase is for Azure
  ENUM_QUOTA_INCREASE_AZURE = 6;
}

message DeploymentTargetDetailsRequest {
  int64 project_id = 1;
  string deployment_target_id = 2;
}

message DeploymentTargetDetailsResponse {
  // namespace is the namespace that the deployment target points to
  string namespace = 1 [deprecated = true];
  // cluster_id is the id of the cluster that the deployment target points to
  int64 cluster_id = 2 [deprecated = true];
  // is_preview indicates whether this is a preview deployment target or not
  bool is_preview = 3 [deprecated = true];
  // deployment_target_name is the name of the deployment target
  string deployment_target_name = 4 [deprecated = true];
  // deployment_target is the requested deployment target
  DeploymentTarget deployment_target = 5;
}

// CreateDeploymentTargetRequest is the request object for CreateDeploymentTarget
message CreateDeploymentTargetRequest {
  int64 project_id = 1;
  // name is the name of the deployment target
  string name = 2;
  // namespace is the namespace that the deployment target points to
  string namespace = 3;
  // cluster_id is the id of the cluster that the deployment target points to
  int64 cluster_id = 4;
  // is_preview indicates whether this is a preview deployment target or not
  bool is_preview = 5;
}

// CreateDeploymentTargetResponse is the response object for CreateDeploymentTarget
message CreateDeploymentTargetResponse {
  string deployment_target_id = 1;
}

// DeploymentTargetsRequest is the request object for DeploymentTargets
message DeploymentTargetsRequest {
  int64 project_id = 1;
  // cluster_id is the id of the cluster to find deployment targets for
  int64 cluster_id = 2;
}

// DeploymentTargetsResponse is the response object for DeploymentTargets
message DeploymentTargetsResponse {
  repeated DeploymentTarget deployment_targets = 1;
}

// DefaultDeploymentTargetRequest is the request object for DefaultDeploymentTarget
message DefaultDeploymentTargetRequest {
  int64 project_id = 1;
  // cluster_id is the id of cluster to find the default deployment target for
  // each cluster has only one default deployment target
  int64 cluster_id = 2;
}

// DefaultDeploymentTargetResponse is the response object for DefaultDeploymentTarget
message DefaultDeploymentTargetResponse {
  // deployment_target is the default deployment target for the given cluster
  DeploymentTarget deployment_target = 1;
}

enum EnumCLIAction {
  ENUM_CLI_ACTION_UNSPECIFIED = 0;
  // ENUM_CLI_ACTION_NONE signals the CLI to do nothing after applying the PorterApp.
  ENUM_CLI_ACTION_NONE = 1;
  // ENUM_CLI_ACTION_BUILD signals the CLI to build the image and call ApplyPorterApp again after a successful build.
  ENUM_CLI_ACTION_BUILD = 2;
  // ENUM_CLI_ACTION_TRACK_PREDEPLOY signals the CLI to track the progress of the predeploy job and call ApplyPorterApp again after a successful run.
  ENUM_CLI_ACTION_TRACK_PREDEPLOY = 3;
}

enum EnumRevisionStatus {
  ENUM_REVISION_STATUS_UNSPECIFIED = 0;
  // ENUM_REVISION_STATUS_PREDEPLOY signifies the predeploy job failed.
  ENUM_REVISION_STATUS_PREDEPLOY_FAILED = 1;
  // ENUM_REVISION_STATUS_DEPLOY_FAILED signifies the deploy job failed.
  ENUM_REVISION_STATUS_DEPLOY_FAILED = 2;
  // ENUM_REVISION_STATUS_BUILD_FAILED signifies the build failed.
  ENUM_REVISION_STATUS_BUILD_FAILED = 3;
  // ENUM_REVISION_STATUS_BUILD_SUCCESSFUL signifies the build was successful.
  ENUM_REVISION_STATUS_BUILD_SUCCESSFUL = 4;
}

message SeedAppRevisionsRequest {
  int64 project_id = 1;
  int64 cluster_id = 2;
  string release_name = 3;
  // source_namespace is the namespace where the app to be migrated is currently installed
  string source_namespace = 4;
  // target_namespace is the namespace where the app will be installed. This will determine where the env groups are seeded.
  string target_namespace = 5;
  // use_health_helm_values is a flag that indicates whether to add the health helm values to the helm overrides for the app instead of the simplified interface from the app contract
  bool use_health_helm_values = 6;
}

message SeedAppRevisionsResponse {
  // latest_revision_diff is the diff of between the latest helm revision of the app and the latest app revision that was seeded
  string latest_revision_diff = 1;
}

// EnvGroupVariablesRequest is the request object when retrieving the variables for a given EnvGroup
message EnvGroupVariablesRequest {
  int64 project_id = 1;
  // deployment_target_id is the id of the deployment target for the env group. Deprecated: use deployment_target_identifier.
  string deployment_target_id = 2 [deprecated = true];
  EnvGroup env_group = 3;
  // deployment_target_identifier is the object that identifies the deployment target for the env group
  DeploymentTargetIdentifier deployment_target_identifier = 4;
}

// EnvGroupVariablesResponse is the response object when retrieving the variables for a given EnvGroup
message EnvGroupVariablesResponse {
  EnvGroupVariables env_group_variables = 1;
}

// LatestEnvGroupWithVariablesRequest is the request object when retrieving the latest EnvGroup and its variables for a given deployment target
message LatestEnvGroupWithVariablesRequest {
  int64 project_id = 1;
  // deployment_target_id is the id of the deployment target where the app is installed. Deprecated: use deployment_target_identifier.
  string deployment_target_id = 2 [deprecated = true];
  string env_group_name = 3;
  // deployment_target_identifier is the object that identifies the deployment target for the env group
  DeploymentTargetIdentifier deployment_target_identifier = 4;
}

// LatestEnvGroupWithVariablesResponse is the response object when retrieving the latest EnvGroup and its variables for a given deployment target
message LatestEnvGroupWithVariablesResponse {
  EnvGroup env_group = 1;
  EnvGroupVariables env_group_variables = 2;
}

message UpdateAppImageRequest {
  int64 project_id = 1;
  string app_name = 2;
  // deployment_target_id is the id of the deployment target where the app is installed. Deprecated: use deployment_target_identifier.
  string deployment_target_id = 3 [deprecated = true];
  string repository_url = 4;
  string tag = 5;
  // deployment_target_identifier is the object that identifies the deployment target for the app
  DeploymentTargetIdentifier deployment_target_identifier = 6;
}

message UpdateAppImageResponse {
  string repository_url = 1;
  string tag = 2;
}

message UpdateAppBuildSettingsRequest {
  int64 project_id = 1;
  string app_name = 2;
  DeploymentTargetIdentifier deployment_target_identifier = 3;
  Build build = 4;
}

message UpdateAppBuildSettingsResponse {
  string revision_id = 1;
}

// UpdateAppsLinkedToEnvGroupRequest is the request object for UpdateAppsLinkedToEnvGroup
message UpdateAppsLinkedToEnvGroupRequest {
  int64 project_id = 1;
  int64 cluster_id = 2;
  string env_group_name = 3;
}

// UpdateAppsLinkedToEnvGroupResponse is the response object for UpdateAppsLinkedToEnvGroup
message UpdateAppsLinkedToEnvGroupResponse {}

// AppHelmValuesRequest is the request object when retrieving the helm values for a given app
message AppHelmValuesRequest {
  int64 project_id = 1;
  int64 app_id = 2;
  // deployment_target_id is the id of the deployment target where the app is installed. Deprecated: use deployment_target_identifier.
  string deployment_target_id = 3 [deprecated = true];
  // with_defaults indicates whether to merge the default Helm values with the explicitly provided values
  bool with_defaults = 4;
  // deployment_target_identifier is the object that identifies the deployment target for the app
  DeploymentTargetIdentifier deployment_target_identifier = 5;
}

// AppHelmValuesResponse is the response object when retrieving the helm values for a given app
message AppHelmValuesResponse {
  // values is base64-encoded, stringified json of the latest helm values for the app
  string b64_values = 1;
}

// ManualServiceRunRequest is the request object for ManualServiceRun
message ManualServiceRunRequest {
  int64 project_id = 1;
  string app_name = 2;
  // deployment_target_id is the id of the deployment target where the app is installed. Deprecated: use deployment_target_identifier.
  string deployment_target_id = 3 [deprecated = true];
  string service_name = 4;
  // Command is the command to run on the service.  If not specified, the run command for the service will be used, as defined in the latest app revision.
  optional string command = 5;
  // deployment_target_identifier is the object that identifies the deployment target for the app
  DeploymentTargetIdentifier deployment_target_identifier = 6;
}

// ManualServiceRunResponse is the response object for ManualServiceRun
message ManualServiceRunResponse {
  // job_run_id is the id of the job run that was created, if any
  string job_run_id = 1;
}

// ImagesRequest is the request object for listing images
message ImagesRequest {
  int64 project_id = 1;
}

// ImagesResponse is the response object for listing images
message ImagesResponse {
  repeated ImageInfo images = 1;
}

// CreateAppInstanceRequest is the request object for creating an app instance
message CreateAppInstanceRequest {
  int64 project_id = 1;
  string app_name = 2;
  // deployment_target_identifier is the object that identifies the deployment target where the app is installed.
  DeploymentTargetIdentifier deployment_target_identifier = 3;
  int64 porter_app_id = 4;
}

// CreateAppInstanceResponse is the response object for creating an app instance
message CreateAppInstanceResponse {
  string app_instance_id = 1;
}

// DeleteAppInstanceRequest is the request object for deleting an app instance
message DeleteAppInstanceRequest {
  int64 project_id = 1;
  string app_name = 2;
  // deployment_target_identifier is the object that identifies the deployment target where the app is installed.
  DeploymentTargetIdentifier deployment_target_identifier = 3;
}

// DeleteAppInstanceResponse is the response object for deleting an app instance
message DeleteAppInstanceResponse {}

// ListAppInstanceRequest is the request object for listing app instances
message ListAppInstancesRequest {
  int64 project_id = 1;
  // deployment_target_identifier is the object that identifies the deployment target where the app is installed. It is optional.
  DeploymentTargetIdentifier deployment_target_identifier = 2;
}

// ListAppInstancesResponse is the response object for listing app instances
message ListAppInstancesResponse {
  repeated AppInstance app_instances = 1;
}

message AppInstance {
  // id is the id of the app instance
  string id = 1;
  // name is the name of the app instance
  string name = 2;
  // deployment_target_id is the id of the deployment target where the app is installed
  string deployment_target_id = 3;
  // porter_app_id is the id of the porter app
  int64 porter_app_id = 4;
}

// CreateNotificationRequest is the request object for creating notifications
message CreateNotificationRequest {
  int64 project_id = 1;
  int64 cluster_id = 2;
  // deployment_target_identifier is the object that identifies the deployment target for the app
  DeploymentTargetIdentifier deployment_target_identifier = 3;
  // app_name is the name of the app
  string app_name = 4;
  // service_name is the name of the service of the app that the notification corresponds with
  string service_name = 5;
  // app_revision_id is the revision id of the app that the notification corresponds with
  string app_revision_id = 6;
  // porter_agent_event_id is the id of the event that triggers the porter agent. This field is used to dedupe notifications
  int64 porter_agent_event_id = 7;
  // raw_summary is the raw summary of the notification, used to determine an error code and then converted to a human readable form
  string raw_summary = 8;
  // raw_detail is the raw detail of the notification, used to determine an error code and then converted to a human readable form
  string raw_detail = 9;
  // job_run_id is the id of the job run, if the service is a job type service
  string job_run_id = 10;
}

// CreateNotificationResponse is the response object for creating notifications
message CreateNotificationResponse {}

// UpdateServiceDeploymentStatusRequest is the request object for updating the deployment status of a service
message UpdateServiceDeploymentStatusRequest {
  int64 project_id = 1;
  // deployment_target_identifier is the object that identifies the deployment target for the app
  DeploymentTargetIdentifier deployment_target_identifier = 2;
  // app_name is the name of the app
  string app_name = 3;
  // app_revision_id is the revision id of the app that the deployment corresponds with
  string app_revision_id = 4;
  // service_name is the name of the service
  string service_name = 5;
  // status is the status to update the service deployment to
  EnumServiceDeploymentStatus status = 6;
}

enum EnumServiceDeploymentStatus {
  ENUM_SERVICE_DEPLOYMENT_STATUS_UNSPECIFIED = 0;
  ENUM_SERVICE_DEPLOYMENT_STATUS_PROGRESSING = 1;
  ENUM_SERVICE_DEPLOYMENT_STATUS_SUCCESS = 2;
  ENUM_SERVICE_DEPLOYMENT_STATUS_FAILED = 3;
}

// UpdateServiceDeploymentStatusResponse is the response object for updating the deployment status of a service
message UpdateServiceDeploymentStatusResponse {}

// AreExternalEnvGroupProvidersEnabledRequest is the request object AreExternalEnvGroupProvidersEnabled
message AreExternalEnvGroupProvidersEnabledRequest {
  // project_id is the id of the project in which to check whether external env group providers are enabled
  int64 project_id = 1;
  // cluster_id is the id of the cluster in which to check whether external env group providers are enabled
  int64 cluster_id = 2;
}

// AreExternalEnvGroupProvidersEnabledResponse is the response object for AreExternalEnvGroupProvidersEnabled
message AreExternalEnvGroupProvidersEnabledResponse {
  // enabled is a flag that indicates whether external env group providers are enabled
  bool enabled = 1;
  // reprovision_required is a flag that indicates whether the cluster needs to be reprovisioned to enable external env group providers
  bool reprovision_required = 2;
  // k8s_upgrade_required is a flag that indicates whether the cluster needs to be upgraded to enable external env group providers
  bool k8s_upgrade_required = 3;
}

// EnableExternalEnvGroupProvidersRequest is the request object for EnableExternalEnvGroupProviders
message EnableExternalEnvGroupProvidersRequest {
  // project_id is the id of the project where external env group providers should be enabled
  int64 project_id = 1;
  // cluster_id is the id of the cluster where external env group providers should be enabled
  int64 cluster_id = 2;
}

// EnableExternalEnvGroupProvidersResponse is the response object for EnableExternalEnvGroupProviders
message EnableExternalEnvGroupProvidersResponse {}

// CreateOrUpdateEnvGroupRequest is the request object for CreateOrUpdateEnvGroup
message CreateOrUpdateEnvGroupRequest {
  // project_id is the id of the project where the env group will be created
  int64 project_id = 1;
  // cluster_id is the id of the cluster where the env group will be created
  int64 cluster_id = 2;
  // env_group_provider_type is the type of provider for the env group
  EnumEnvGroupProviderType env_group_provider_type = 3;
  // env_group_name is the name of the env group
  string env_group_name = 4;
  // env_group_auth_token is the auth token for the env group. Not required for Porter env groups.
  string env_group_auth_token = 5;
}

// CreateOrUpdateEnvGroupResponse is the response object for CreateOrUpdateEnvGroup
message CreateOrUpdateEnvGroupResponse {}

// DeleteEnvGroupRequest is the request object for DeleteEnvGroup
message DeleteEnvGroupRequest {
  // project_id is the id of the project where the env group will be deleted
  int64 project_id = 1;
  // cluster_id is the id of the cluster where the env group will be deleted
  int64 cluster_id = 2;
  // env_group_provider_type is the type of provider for the env group
  EnumEnvGroupProviderType env_group_provider_type = 3;
  // env_group_name is the name of the env group to delete
  string env_group_name = 4;
}

// DeleteEnvGroupResponse is the response object for DeleteEnvGroup
message DeleteEnvGroupResponse {}

service ClusterControlPlaneService {
  // QuotaIncrease will auto request increases to the quota in a specific region given a list of quotas
  rpc QuotaIncrease(QuotaIncreaseRequest) returns (QuotaIncreaseResponse) {}

  // UpdateCloudProviderCredentials creates or updates the credentials used for accessing the specific cloud
  rpc UpdateCloudProviderCredentials(UpdateCloudProviderCredentialsRequest) returns (UpdateCloudProviderCredentialsResponse) {}

  // QuotaPreflightCheck checks if the target account and region has sufficient resources (EIP addresses and VPCs) to provision a new cluster
  rpc QuotaPreflightCheck(QuotaPreflightCheckRequest) returns (QuotaPreflightCheckResponse) {
    option deprecated = true;
  }

  // PreflightCheck checks if the target account is able to provision a cluster
  rpc PreflightCheck(PreflightCheckRequest) returns (PreflightCheckResponse) {}

  // CreateAssumeRoleChain creates a new assume role chain for a given project and checks if the target assumed role has sufficient permissions. Use UpdateCloudProviderCredentials instead.
  rpc CreateAssumeRoleChain(CreateAssumeRoleChainRequest) returns (CreateAssumeRoleChainResponse) {
    option deprecated = true;
  }

  // SaveAzureCredentials stores the new azure service principal credentials and creates the azure cluster identity. Deprecated. Use UpdateCloudProviderCredentials instead.
  rpc SaveAzureCredentials(SaveAzureCredentialsRequest) returns (SaveAzureCredentialsResponse) {
    option deprecated = true;
  }

  // KubeConfigForCluster gets a valid kubeconfig from the management cluster, for a given workload cluster
  rpc KubeConfigForCluster(KubeConfigForClusterRequest) returns (KubeConfigForClusterResponse) {}

  // UpdateContract takes in a Porter Contract, actioning upon it where necessary
  rpc UpdateContract(UpdateContractRequest) returns (UpdateContractResponse) {}

  // ReadContract returns the base64 encoded contract for a given cluster and project
  rpc ReadContract(ReadContractRequest) returns (ReadContractResponse) {}

  // ClusterStatus returns the status of a given workload cluster
  rpc ClusterStatus(ClusterStatusRequest) returns (ClusterStatusResponse) {}

  // DeleteCluster uninstalls system components from a given workload cluster before deleting it.
  // This should ultimately be wrapped into UpdateContract
  rpc DeleteCluster(DeleteClusterRequest) returns (DeleteClusterResponse) {}

  // TokenForRegistry returns a token for accessing a given registry
  rpc TokenForRegistry(TokenForRegistryRequest) returns (TokenForRegistryResponse) {}

  // ValidatePorterApp validates and hydrates a definition of a porter app, based on the porter.yaml file
  rpc ValidatePorterApp(ValidatePorterAppRequest) returns (ValidatePorterAppResponse) {}

  // ApplyPorterApp applies a porter app as defined by the provided porter.yaml file to a given deployment id
  rpc ApplyPorterApp(ApplyPorterAppRequest) returns (ApplyPorterAppResponse) {}

  // UpdateApp hydrates a definition of a porter app, and takes necessary actions to update the app on the cluster
  rpc UpdateApp(UpdateAppRequest) returns (UpdateAppResponse) {}

  // RollbackRevision reverts an app to the previous revision, or optionally to the revision specified
  rpc RollbackRevision(RollbackRevisionRequest) returns (RollbackRevisionResponse) {}

  // UpdateRevisionStatus updates the status of a revision
  rpc UpdateRevisionStatus(UpdateRevisionStatusRequest) returns (UpdateRevisionStatusResponse) {}

  // AppRevisionStatus returns the status of a revision
  rpc AppRevisionStatus(AppRevisionStatusRequest) returns (AppRevisionStatusResponse) {}

  // DeletePorterApp deletes all instances of a porter app across deployment targets in a given project
  rpc DeletePorterApp(DeletePorterAppRequest) returns (DeletePorterAppResponse) {}

  // DeleteAppDeployment deletes a porter app from a given deployment target
  rpc DeleteAppDeployment(DeleteAppDeploymentRequest) returns (DeleteAppDeploymentResponse) {}

  // DeleteDeploymentTarget deletes a deployment target from a given cluster
  rpc DeleteDeploymentTarget(DeleteDeploymentTargetRequest) returns (DeleteDeploymentTargetResponse) {}

  // CurrentAppRevision returns the currently deployed app revision for a given porter_app and deployment_target
  rpc CurrentAppRevision(CurrentAppRevisionRequest) returns (CurrentAppRevisionResponse) {}

  rpc ListAppRevisions(ListAppRevisionsRequest) returns (ListAppRevisionsResponse) {}

  // LatestAppRevisions returns the currently deployed app revisions for a given deployment_target
  rpc LatestAppRevisions(LatestAppRevisionsRequest) returns (LatestAppRevisionsResponse) {}

  // GetAppRevision returns the app revision for a given app revision id
  rpc GetAppRevision(GetAppRevisionRequest) returns (GetAppRevisionResponse) {}

  // AppTemplate returns the app template for a given app id
  rpc AppTemplate(AppTemplateRequest) returns (AppTemplateResponse) {}

  // PredeployStatus returns the status of the predeploy job for a given app revision
  rpc PredeployStatus(PredeployStatusRequest) returns (PredeployStatusResponse) {}

  // DeploymentTargetDetails returns the details of a deployment target job given the id.  This is a work-around to moving all namespace-related
  // logic to CCP and should only be used to support metrics and logging (and confirming cluster RBAC). This will fail once
  // we start using deployment targets that do not have a selector kind of "namespace"
  rpc DeploymentTargetDetails(DeploymentTargetDetailsRequest) returns (DeploymentTargetDetailsResponse) {}

  // CreateDeploymentTarget creates a new deployment target for a given cluster, returning the deployment target id. If a deployment target with the same name already exists with
  // the same namespace, cluster and preview status, the existing deployment target ID will be returned. Otherwise, an error will be returned.
  rpc CreateDeploymentTarget(CreateDeploymentTargetRequest) returns (CreateDeploymentTargetResponse) {}

  // DeploymentTargets returns all of the deployment targets for a given project
  rpc DeploymentTargets(DeploymentTargetsRequest) returns (DeploymentTargetsResponse) {}

  // DefaultDeploymentTarget returns the default deployment target for a given cluster
  rpc DefaultDeploymentTarget(DefaultDeploymentTargetRequest) returns (DefaultDeploymentTargetResponse) {}

  // SeedAppRevision seeds app revisions for a given project id, cluster id, release name, namespace.  It should only be called
  // from the Cluster Control Plane CLI and should be removed once all legacy users are migrated to the new apply validate.
  rpc SeedAppRevisions(SeedAppRevisionsRequest) returns (SeedAppRevisionsResponse) {}

  // EnvGroupVariables returns the variables for a given env group name and version
  rpc EnvGroupVariables(EnvGroupVariablesRequest) returns (EnvGroupVariablesResponse) {}

  // LatestEnvGroupWithVariables returns the latest env group and variables for a given env group name in the given deployment target
  rpc LatestEnvGroupWithVariables(LatestEnvGroupWithVariablesRequest) returns (LatestEnvGroupWithVariablesResponse) {}

  // UpdateAppImage updates the image of a porter app and applies the new app revision to the deployment target.
  rpc UpdateAppImage(UpdateAppImageRequest) returns (UpdateAppImageResponse) {}

  // UpdateAppBuildSettings updates the build settings for an app
  rpc UpdateAppBuildSettings(UpdateAppBuildSettingsRequest) returns (UpdateAppBuildSettingsResponse) {}

  // UpdateAppsLinkedToEnvGroup updates all apps that are linked to a given env group
  rpc UpdateAppsLinkedToEnvGroup(UpdateAppsLinkedToEnvGroupRequest) returns (UpdateAppsLinkedToEnvGroupResponse) {}

  // AppHelmValues retrieves the raw helm values used to install an app on the cluster.
  rpc AppHelmValues(AppHelmValuesRequest) returns (AppHelmValuesResponse) {}

  // ManualServiceRun creates a pod/job with the same spec as the provided service (as defined in the latest app revision)
  // and runs the provided command, or if no command is provided, runs the command defined for the service.
  rpc ManualServiceRun(ManualServiceRunRequest) returns (ManualServiceRunResponse) {}

  // ClusterNetworkSettings gets the network settings (region, subnets, vpc) for a given project/cluster combination
  rpc ClusterNetworkSettings(ClusterNetworkSettingsRequest) returns (ClusterNetworkSettingsResponse) {}

  // SharedNetworkSettings gets the network settings (region, subnets, vpc) for a given project/cluster/service combination
  rpc SharedNetworkSettings(SharedNetworkSettingsRequest) returns (SharedNetworkSettingsResponse) {}

  // Images returns images matching provided filter parameters
  rpc Images(ImagesRequest) returns (ImagesResponse) {}

  // CreateAppInstance creates a new app instance for a given name and deployment target. If an app instance with the same name and deployment target already exists, the existing app instance ID will be returned.
  rpc CreateAppInstance(CreateAppInstanceRequest) returns (CreateAppInstanceResponse) {}

  // DeleteAppInstance deletes an app instance and all associated revisions.
  rpc DeleteAppInstance(DeleteAppInstanceRequest) returns (DeleteAppInstanceResponse) {}

  // ListAppInstances lists app instance in a project (and deployment target if provided).
  rpc ListAppInstances(ListAppInstancesRequest) returns (ListAppInstancesResponse) {}

  // CreateNotification creates a notification for a porter app and service at a given app revision
  rpc CreateNotification(CreateNotificationRequest) returns (CreateNotificationResponse) {}

  // UpdateServiceDeploymentStatus updates the current deployment status of a service with a new status
  rpc UpdateServiceDeploymentStatus(UpdateServiceDeploymentStatusRequest) returns (UpdateServiceDeploymentStatusResponse) {}

  // DockerConfigFileForRegistry returns a stringified config.json for accessing a given registry.
  // Deprecated. Use TokenForRegistry instead.
  rpc DockerConfigFileForRegistry(DockerConfigFileForRegistryRequest) returns (DockerConfigFileForRegistryResponse) {
    option deprecated = true;
  }

  // ECRTokenForRegistry returns a docker-compatible token for accessing a given ECR registry.
  // This cannot be deleted before TokenForRegistry supports AWS and we edit RegistryGetECRTokenHandler to call that endpoint.
  // Deprecated. Use TokenForRegistry instead.
  rpc ECRTokenForRegistry(ECRTokenForRegistryRequest) returns (ECRTokenForRegistryResponse) {
    option deprecated = true;
  }

  // AssumeRoleCredentials should be used vary sparingly, and ONLY for replacing AWS Integrations which have no workaround on the Porter API.
  // This endpoint returns temporary AWS credentials for a given AWS Account ID, and should not be expanded further to allow specifc role selection without being tied to a project and cluster.
  // Deprecated. This is no longer needed once ListRepositoriesForRegistry, ListImages, and CreateRepository supports AWS
  rpc AssumeRoleCredentials(AssumeRoleCredentialsRequest) returns (AssumeRoleCredentialsResponse) {
    option deprecated = true;
  }

  // AssumeRoleChainTargets gets the final destination target_arns for a given project.
  // Deprecated. Do not use.
  rpc AssumeRoleChainTargets(AssumeRoleChainTargetsRequest) returns (AssumeRoleChainTargetsResponse) {
    option deprecated = true;
  }

  // CertificateAuthorityData gets the certificate authority data for a customer cluster
  rpc CertificateAuthorityData(CertificateAuthorityDataRequest) returns (CertificateAuthorityDataResponse) {
    option deprecated = true;
  }

  // EKSBearerToken gets a bearer token for programatic access to an EKS cluster's kubernetes API.
  // Deprecated. Use KubeConfigForCluster instead.
  rpc EKSBearerToken(EKSBearerTokenRequest) returns (EKSBearerTokenResponse) {
    option deprecated = true;
  }

  // ListRepositoriesForRegistry lists the repositories for a given registry, provided it is in the scope of the project id
  // Deprecated. Use Images instead.
  rpc ListRepositoriesForRegistry(ListRepositoriesForRegistryRequest) returns (ListRepositoriesForRegistryResponse) {
    option deprecated = true;
  }

  // ListImagesForRepository lists the repositories for a given registry, provided it is in the scope of the project id
  // Deprecated. Use Images instead.
  rpc ListImagesForRepository(ListImagesForRepositoryRequest) returns (ListImagesForRepositoryResponse) {
    option deprecated = true;
  }

  // DatastoreStatus returns the status of a given datastore within a project/cluster scope
  rpc DatastoreStatus(DatastoreStatusRequest) returns (DatastoreStatusResponse) {}

  // RegistryStatus returns the status of a given docker registry within a project scope
  rpc RegistryStatus(RegistryStatusRequest) returns (RegistryStatusResponse) {}

  // EnableExternalEnvGroupProvider will enable support for external env group providers on the cluster
  rpc EnableExternalEnvGroupProviders(EnableExternalEnvGroupProvidersRequest) returns (EnableExternalEnvGroupProvidersResponse) {}

  // AreExternalEnvGroupProviderEnabled will return whether external env group providers are enabled on the cluster
  rpc AreExternalEnvGroupProvidersEnabled(AreExternalEnvGroupProvidersEnabledRequest) returns (AreExternalEnvGroupProvidersEnabledResponse) {}

  // CreateOrUpdateEnvGroup will create or update an env group
  rpc CreateOrUpdateEnvGroup(CreateOrUpdateEnvGroupRequest) returns (CreateOrUpdateEnvGroupResponse) {}

  // DeleteEnvGroup will delete an env group
  rpc DeleteEnvGroup(DeleteEnvGroupRequest) returns (DeleteEnvGroupResponse) {}
}

message EKSBearerTokenRequest {
  option deprecated = true;
  int64 project_id = 1;
  int64 cluster_id = 2;
}

message EKSBearerTokenResponse {
  option deprecated = true;
  string token = 1;
}

message CertificateAuthorityDataRequest {
  option deprecated = true;
  int64 project_id = 1;
  int64 cluster_id = 2;
}

message CertificateAuthorityDataResponse {
  option deprecated = true;
  string certificate_authority_data = 1;
}

message AssumeRoleChainTargetsRequest {
  option deprecated = true;
  string project_id = 1;
}

message AssumeRoleChainTargetsResponse {
  option deprecated = true;
  repeated AssumeRoleChainLink chain_links = 1;
}

message ECRTokenForRegistryRequest {
  option deprecated = true;
  int64 project_id = 1;
  string region = 2;
  string aws_account_id = 3;
}

message ECRTokenForRegistryResponse {
  option deprecated = true;
  string token = 1;
  google.protobuf.Timestamp expiry = 2;
}

message AssumeRoleCredentialsRequest {
  option deprecated = true;
  string aws_account_id = 1;
  int64 project_id = 2;
}

message AssumeRoleCredentialsResponse {
  option deprecated = true;
  string aws_access_id = 1;
  string aws_secret_key = 2;
  string aws_session_token = 3;
}

message DockerConfigFileForRegistryRequest {
  option deprecated = true;
  int64 project_id = 1;
  string registry_uri = 2;
}

message DockerConfigFileForRegistryResponse {
  option deprecated = true;
  bytes docker_config_file = 1;
}

// ClusterNetworkSettingsRequest is the request object for fetching cloud provider network settings for a cluster
message ClusterNetworkSettingsRequest {
  int64 project_id = 1;
  int64 cluster_id = 2;
}

//ClusterNetworkSettingsResponse is the response object containing cloud provider network settings for a cluster
message ClusterNetworkSettingsResponse {
  //region is the cloud provider region in which the cluster is located
  string region = 1;
  //subnet_ids contains a string list of cloud provider subnets associated with the cluster
  repeated string subnet_ids = 2;
  //cloud_provider the given cloud provider for the cluster being queried
  EnumCloudProvider cloud_provider = 3;
  //cloud_provider_network contains the relevant cluster network config for the cloud provider on which the cluster exists
  oneof cloud_provider_network {
    //eks_cloud_provider_network is the aws vpc for the cluster
    AWSVpc eks_cloud_provider_network = 4;
  }
}

// DatastoreStatusRequest is the request object for fetching the status of a datastore in on a cluster
message DatastoreStatusRequest {
  // project_id id of the project that the datastore belongs to
  int64 project_id = 1;
  // cluster_id id of the cluster that the datastore belongs to
  int64 cluster_id = 2;
  // type type of the datastore
  EnumDatastore type = 3;
  // name name of the datastore
  string name = 4;
}

enum EnumDatastore {
  ENUM_DATASTORE_UNSPECIFIED = 0;
  ENUM_DATASTORE_RDS_POSTGRESQL = 1;
  ENUM_DATASTORE_RDS_AURORA_POSTGRESQL = 2;
  ENUM_DATASTORE_ELASTICACHE_REDIS = 3;
}

// DatastoreStatusResponse is the response object containing the status of the datastore
message DatastoreStatusResponse {
  // status is the status of the datastore
  string status = 1;
}

// RegistryStatusRequest is the request object for fetching the status of a docker registry associated to a project
message RegistryStatusRequest {
  // project_id id of the project that the ecr registry belongs to
  int64 project_id = 1;
  // registry_id id of the ecr registry
  int64 registry_id = 2;
}

// RegistryStatusResponse is the response object containing the status of the docker registry
message RegistryStatusResponse {
  //is_vulnerability_scanning_enabled is a boolean containing whether scanning is properly enabled or not
  bool is_vulnerability_scanning_enabled = 1;
}

// SharedNetworkSettingsRequest is the request object for fetching cloud provider network settings for where a service should be provisioned relative to a cluster
message SharedNetworkSettingsRequest {
  // project_id id of the project that the service will be provisioned in
  int64 project_id = 1;
  // cluster_id id of the cluster that the service will be peered to in
  int64 cluster_id = 2;
  //service_type type of the service
  string service_type = 3;
}

//SharedNetworkSettingsResponse is the response object containing cloud provider network settings for a service provisioned relative to a cluster
message SharedNetworkSettingsResponse {
  //region is the cloud provider region in which the cluster is located
  string region = 1;
  //cidr_range is the cidr range of the VPC
  string cidr_range = 2;
  //subnet_ids contains a string list of cloud provider subnets associated with the cluster
  repeated string subnet_ids = 3;
  //cloud_provider the given cloud provider for the cluster being queried
  EnumCloudProvider cloud_provider = 4;
  //cloud_provider_network contains the relevant cluster network config for the cloud provider on which the cluster exists
  oneof cloud_provider_network {
    //eks_cloud_provider_network is the aws vpc for the cluster
    AWSVpc eks_cloud_provider_network = 5;
  }
}
