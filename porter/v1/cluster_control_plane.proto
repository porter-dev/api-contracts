syntax = "proto3";

package porter.v1;

import "porter/v1/aws_assume_role.proto";

message CreateAssumeRoleChainRequest {
  int64 project_id = 1;
  string source_arn = 2;
  string target_access_id = 3;
  string target_secret_key = 4;
  string target_session_token = 5;
}

message CreateAssumeRoleChainResponse {
  int64 project_id = 1;
  string target_arn = 2;
}

message AWSCredentialsRequest {
  int64 project_id = 1;
  string aws_assume_role_chain_id = 2;
}

message AWSCredentialsResponse {
  string access_id = 1;
  string secret_key = 2;
  string session_token = 3;
}

message AssumeRoleChainTargetsRequest {
  string project_id = 1;
}

message AssumeRoleChainTargetsResponse {
  repeated AssumeRoleChainLink chain_links = 1;
}

service ClusterControlPlaneService {
  // CreateAssumeRoleChain creates a new assume role chain for a given project
  rpc CreateAssumeRoleChain(CreateAssumeRoleChainRequest) returns (CreateAssumeRoleChainResponse) {}

  // AssumeRoleChainTargets gets the final destination target_arns for a given project
  rpc AssumeRoleChainTargets(AssumeRoleChainTargetsRequest) returns (AssumeRoleChainTargetsResponse) {}

  // AWSCredentials gets temporary access credentials for a given AWS Assume Role Chain
  // This should be used INCREDIBLY sparingly, and exists only to support legacy code
  // which does not support using Assume Role Chain hopping
  rpc AWSCredentials(AWSCredentialsRequest) returns (AWSCredentialsResponse) {}
}
