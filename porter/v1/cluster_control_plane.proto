syntax = "proto3";

package porter.v1;

import "porter/v1/aws_assume_role.proto";
import "porter/v1/contract.proto";

message CreateAssumeRoleChainRequest {
  int64 project_id = 1;
  string source_arn = 2;
  string target_access_id = 3;
  string target_secret_key = 4;
  string target_session_token = 5;
}

message CreateAssumeRoleChainResponse {
  int64 project_id = 1;
  string target_arn = 2;
}

message EKSBearerTokenRequest {
  int64 project_id = 1;
  int64 cluster_id = 2;
}

message EKSBearerTokenResponse {
  string token = 1;
}

message AssumeRoleChainTargetsRequest {
  string project_id = 1;
}

message AssumeRoleChainTargetsResponse {
  repeated AssumeRoleChainLink chain_links = 1;
}

message KubeConfigForClusterRequest {
  int64 project_id = 1;
  int64 cluster_id = 2;
}

message KubeConfigForClusterResponse {
  string kube_config = 1;
}

message UpdateContractRequest {
  Contract contract = 1;
}

message UpdateContractResponse {
  ContractRevision contract_revision = 1;
}

message ClusterStatusRequest {
  int64 project_id = 1;
  int64 cluster_id = 2;
}

message ClusterStatusResponse {
  int64 project_id = 1;
  int64 cluster_id = 2;
  string phase = 3;
  bool infrastructure_status = 4;
  bool control_plane_status = 5;
}

service ClusterControlPlaneService {
  // CreateAssumeRoleChain creates a new assume role chain for a given project
  rpc CreateAssumeRoleChain(CreateAssumeRoleChainRequest) returns (CreateAssumeRoleChainResponse) {}

  // AssumeRoleChainTargets gets the final destination target_arns for a given project
  rpc AssumeRoleChainTargets(AssumeRoleChainTargetsRequest) returns (AssumeRoleChainTargetsResponse) {}

  // EKSBearerToken gets a bearer token for programatic access to an EKS cluster's kubernetes API
  rpc EKSBearerToken(EKSBearerTokenRequest) returns (EKSBearerTokenResponse) {}

  // KubeConfigForCluster gets a valid kubeconfig from the management cluster, for a given workload cluster
  rpc KubeConfigForCluster(KubeConfigForClusterRequest) returns (KubeConfigForClusterResponse) {}

  // UpdateContract takes in a Porter Contract, actioning upon it where necessary
  rpc UpdateContract(UpdateContractRequest) returns (UpdateContractResponse) {}

  // ClusterStatus returns the status of a given workload cluster
  rpc ClusterStatus(ClusterStatusRequest) returns (ClusterStatusResponse) {}
}
