syntax = "proto3";

package porter.v1;

import "porter/v1/addons.proto";
import "porter/v1/cluster.proto";

// ManagedDatastore is the specification for a Porter-managed datastore
message ManagedDatastore {
  // id represents the id of the datastore. This is required for update operations, but should be left blank when creating a datastore
  string id = 1;
  // cloud_provider represents the provider that the datastore is provisioned in
  EnumCloudProvider cloud_provider = 2;
  // cloud_provider_credential_identifier is the credential used to provision the datastore
  string cloud_provider_credential_identifier = 3;
  // region is the region the datastore is provisioned in
  string region = 4;
  // name is the name of the datastore
  string name = 5;
  // kind represents the type of the datastore
  EnumDatastoreKind kind = 6;
  // kind_values are the required values depending on kind
  oneof kind_values {
    AwsRds aws_rds_kind = 7;
    AwsElasticache aws_elasticache_kind = 9;
    Postgres managed_postgres_kind = 10;
    Redis managed_redis_kind = 11;
  }
  // connected_clusters describes the connection of this datastore to clusters
  ConnectedClusters connected_clusters = 8;
}

message ConnectedClusters {
  // connected_cluster_ids is a list of cluster ids that this datastore is connected to
  repeated int64 connected_cluster_ids = 1;
}

enum EnumDatastoreKind {
  ENUM_DATASTORE_KIND_UNSPECIFIED = 0;
  ENUM_DATASTORE_KIND_AWS_RDS = 1;
  ENUM_DATASTORE_KIND_AWS_ELASTICACHE = 2;
  // ENUM_DATASTORE_KIND_MANAGED_POSTGRES refers to the postgres helm chart deployed on customer cluster
  ENUM_DATASTORE_KIND_MANAGED_POSTGRES = 3;
  // ENUM_DATASTORE_KIND_MANAGED_REDIS refers to the redis helm chart deployed on customer cluster
  ENUM_DATASTORE_KIND_MANAGED_REDIS = 4;
}

message DatastorePasswordSecretRef {
  // name is the name of the secret
  string name = 1;
  // namespace is the namespace of the secret
  string namespace = 2;
  // key is the key of the password in the secret
  string key = 3;
}

message AwsRds {
  // database_name is the name of the rds database
  optional string database_name = 1;
  // master_username is the username of the database
  optional string master_username = 2;
  // master_user_password_literal is the string value of the password; this is only used for creating the database password secret and is wiped when the contract is saved
  optional string master_user_password_literal = 3;
  // master_user_password_secret_ref is the reference to the secret that stores the password of the database
  DatastorePasswordSecretRef master_user_password_secret_ref = 4;
  // allocated_storage_gigabytes is the allocated storage of the database in gigabytes
  optional int64 allocated_storage_gigabytes = 5;
  // instance_class is the instance class of the database
  optional string instance_class = 6;
  // engine is the engine of the database
  EnumAwsRdsEngine engine = 7;
  // engine_version is the version of the engine
  optional string engine_version = 8;
}

enum EnumAwsRdsEngine {
  ENUM_AWS_RDS_ENGINE_UNSPECIFIED = 0;
  ENUM_AWS_RDS_ENGINE_POSTGRESQL = 1;
  ENUM_AWS_RDS_ENGINE_AURORA_POSTGRESQL = 2;
}

message AwsElasticache {
  // instance_class is the instance class of the database
  optional string instance_class = 1;
  // master_user_password_literal is the string value of the password; this is only used for creating the database password secret and is wiped when the contract is saved
  optional string master_user_password_literal = 2;
  // engine is the engine of the datastore
  EnumAwsElasticacheEngine engine = 3;
  // engine_version is the version of the engine
  optional string engine_version = 4;
}

enum EnumAwsElasticacheEngine {
  ENUM_AWS_ELASTICACHE_ENGINE_UNSPECIFIED = 0;
  ENUM_AWS_ELASTICACHE_ENGINE_REDIS = 1;
  ENUM_AWS_ELASTICACHE_ENGINE_MEMCACHED = 2;
}

// UpdateDatastorePayload is used to send messages via nats to update a datastore
message UpdateDatastorePayload {
  // project_id is the id of the project that the datastore belongs to
  int64 project_id = 1;
  // datastore_id is the id of the datastore
  string datastore_id = 2;
}

// DatastoreCredential is used to connect to a datastore
message DatastoreCredential {
  // host is the datastore host
  string host = 1;
  // database_name is the name of the database
  string database_name = 2;
  // username is the username required to access the datastore
  string username = 3;
  // password is the password required to access the datastore
  string password = 4;
  // port is the port to connect to
  int64 port = 5;
}
