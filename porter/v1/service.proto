syntax = "proto3";

package porter.v1;

// ServiceType is used to categorize services, being one of web, worker, or job
enum ServiceType {
  SERVICE_TYPE_UNSPECIFIED = 0;
  SERVICE_TYPE_WEB = 1;
  SERVICE_TYPE_WORKER = 2;
  SERVICE_TYPE_JOB = 3;
}

// Service is the top-level configuration for a service
message Service {
  // run is the command to start the service. Deprecated: use run_optional instead, as this allows us to tell if the field was explicitly set or not.
  string run = 1 [deprecated = true];
  // instances is the number of instances, or replicas, to run. Deprecated: use instances_optional instead.
  int32 instances = 2 [deprecated = true];
  // port is the port the service listens on
  int32 port = 3;
  // cpu_cores is the number of CPU cores to allocate to the service
  float cpu_cores = 4;
  // ram_megabytes is the amount of memory to allocate to the service
  int32 ram_megabytes = 5;
  // config is the service-specific configuration
  oneof config {
    WebServiceConfig web_config = 6;
    WorkerServiceConfig worker_config = 7;
    JobServiceConfig job_config = 8;
  }
  // type is the type of service
  ServiceType type = 9;
  // absolute_name is the name that should be used verbatim on the cluster. If not specified, a name is generated from the app, service and service type.
  string absolute_name = 10;

  // smart_optimization is to toggle the smart optimization feature
  optional bool smart_optimization = 11;

  // run_optional is the command to start the service
  optional string run_optional = 12;

  // gpu_cores_nvidia is the number of GPU cores to allocate to the service. This is only used for nvidia-backed GPU's at present. If set to a non-zero value, this service will only be scheduled if a GPU node with the specified number of cores is available.
  float gpu_cores_nvidia = 13 [deprecated = true];

  // name is the user-defined name for the service
  string name = 14;

  // instances_optional is the number of instances, or replicas, to run
  optional int32 instances_optional = 15;

  //gpu_cores is the number GPU cores to allocate to the service. This is only used for nvidia-backed s at present. If set to a non-zero value, this service will only be scheduled if a GPU node with the specified number of cores is available.  Deprecated: use gpus instead.
  optional float gpu_cores = 16 [deprecated = true];

  // gpu is the an object with information related to the gpu resources to allocate to the service
  GPU gpu = 17;

  // terminationGracePeriodSeconds is the number of seconds to wait before terminating the service
  optional int32 termination_grace_period_seconds = 18;
}

// WebServiceConfig is the configuration for a web service
message WebServiceConfig {
  // autoscaling is the autoscaling configuration
  Autoscaling autoscaling = 1;
  // domains is the list of custom domains for this service
  repeated Domain domains = 2;
  // health_check is the health check configuration, used to determine if the service is healthy
  HealthCheck health_check = 3;
  // private indicates whether or not the web service should be private (not publicly accessible)
  optional bool private = 4;
  // ingress_annotations is a map of annotations to apply to the ingress resource
  map<string, string> ingress_annotations = 5;
  // disable_tls indicates whether or not the web service has TLS certificates managed on the cluster. If set to true, exposed applications will not be protected by TLS, unless managed elsewhere.
  optional bool disable_tls = 6;
}

// WorkerServiceConfig is the configuration for a worker service
message WorkerServiceConfig {
  Autoscaling autoscaling = 1;
  HealthCheck health_check = 2;
}

// JobServiceConfig is the configuration for a job service
message JobServiceConfig {
  // allow_concurrent indicates whether or not runs of the job can be processed concurrently.  Deprecated: use allow_concurrent_optional instead, as this allows us to tell if the field was set in porter.yaml or not.
  bool allow_concurrent = 1 [deprecated = true];
  // cron is the cron expression for the job
  string cron = 2;
  // suspend_cron indicates whether or not the cron should be suspended
  optional bool suspend_cron = 3;
  // allow_concurrent_optional indicates whether or not runs of the job can be processed concurrently
  optional bool allow_concurrent_optional = 4;
  // timeout_seconds is the number of seconds to wait before timing out the job
  int64 timeout_seconds = 5;
}

// Domain is the configuration for a custom domain for a web service
message Domain {
  string name = 1;
}

// Autoscaling is the autoscaling configuration
message Autoscaling {
  // enabled explicitly enables or disables autoscaling
  bool enabled = 1;
  // min_instances is the minimum number of instances to run
  // Deprecated: use min_instances_optional instead, as this allows us to tell if the field was explicitly set or not.
  int32 min_instances = 2 [deprecated = true];
  // max_instances is the maximum number of instances to run
  // Deprecated: use max_instances_optional instead, as this allows us to tell if the field was explicitly set or not.
  int32 max_instances = 3 [deprecated = true];
  // cpu_threshold_percent is the CPU threshold percentage to trigger scaling
  int32 cpu_threshold_percent = 4;
  // memory_threshold_percent is the memory threshold percentage to trigger scaling
  int32 memory_threshold_percent = 5;
  // min_instances_optional is the minimum number of instances to run
  optional int32 min_instances_optional = 6;
  // max_instances_optional is the maximum number of instances to run
  optional int32 max_instances_optional = 7;
}

// HealthCheck is the health check configuration. Only one of http_path or command should be set, otherwise an error will be returned.
message HealthCheck {
  // enabled explicitly enables or disables health checks
  bool enabled = 1;
  // http_path is the HTTP path to use for the health check
  string http_path = 2;
  // command is the command to run for the health check
  string command = 3;
  // timeout_seconds is the number of seconds to wait before timing out the health check. If zero, a default value will be used.
  int32 timeout_seconds = 4;
  // initial_delay_seconds is the number of seconds to wait before starting the health check. If nil, a default value will be used.
  optional int32 initial_delay_seconds = 5;
}

// GPU is the gpu configuration
message GPU {
  // enabled explicitly enables or disables gpu on a given workload
  bool enabled = 1;
  //  gpu_cores_nvidia is the GPU threshold in gpus
  int32 gpu_cores_nvidia = 2;
  //other types of gpus can be added here
}
