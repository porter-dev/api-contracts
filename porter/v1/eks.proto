syntax = "proto3";

package porter.v1;

message EKS {
  string cluster_name = 1;
  string cluster_version = 2;
  string cidr_range = 3 [deprecated = true]; // use network.vpc_cidr instead
  string region = 4;
  repeated EKSNodeGroup node_groups = 5;
  LoadBalancer load_balancer = 6;
  bool enable_guard_duty = 7;
  EKSLogging logging = 8;
  // enable_kms_encryption triggers a KMS key creation and enables encryption on the EKS cluster with that key.  Once enabled, encryption can never be disabled.
  bool enable_kms_encryption = 9;

  // network is the network configuration for the EKS cluster.
  // If both cidr_range and network.vpc_cidr are set, network.vpc_cidr will be used.
  AWSClusterNetwork network = 10;

  // enable_ecr_scanning controls whether continuous scanning should be enabled for all AWS registries associated with the cluster
  bool enable_ecr_scanning = 11;

  // cloudwatch_alarm contains the configuration for setting up cloudwatch on a cluster
  CloudwatchAlarm cloudwatch_alarm = 12;

  // control_plane_cidr_allowlist is an optional list of CIDRs that are allowed to access the control plane
  repeated string control_plane_cidr_allowlist = 13;
}

// CloudwatchAlarm contains all the information required to configure cloudwatch alarms on a cluster
message CloudwatchAlarm {
  // enable toggles whether cloudwatch alarms are setup or not
  bool enable = 1;

  // emails is a list of email addresses to send alarms to
  repeated string emails = 2;
}

// AWSClusterNetwork contains all information required to configure the AWS cluster's network
message AWSClusterNetwork {
  // vpc_cidr is the range of the VPC network. This is used to specify the network that Porter will use.
  string vpc_cidr = 1;
  // service_cidr is the range of the network that services will be assigned IPs from, on the AWS vpc.
  string service_cidr = 2;
}

// EKSNodeGroup is the configuration for an EKS node group/auto scaling group
message EKSNodeGroup {
  string instance_type = 1;
  uint32 min_instances = 2;
  uint32 max_instances = 3;
  // node_group_type is used to specify the type of node group. This is used to specify what node groups are used by Porter, vs users.
  NodeGroupType node_group_type = 4;
  // is_stateful is deprecated. It was initially used to specify if a nodegroup had state, and needed to be kept in a single AZ.
  bool is_stateful = 5 [deprecated = true];
  // additional_policies is a list of IAM policies to attach to the node group role, on top of the policies applied by Porter.
  // deprecated: policies should be managed before cluster provisioning instead
  repeated string additional_policies = 6 [deprecated = true];
  // additional_taints is a list of NoSchedule taints to apply to the node group.
  // These will be applied on top of the default porter.run/workload-kind taints.
  repeated string additional_taints = 7;

  // disk_size_gb is the size of the disk in GB for the node group instances. If unspecified, this will default to 50.
  uint32 disk_size_gb = 8;
}

enum NodeGroupType {
  NODE_GROUP_TYPE_UNSPECIFIED = 0;
  NODE_GROUP_TYPE_SYSTEM = 1;
  NODE_GROUP_TYPE_MONITORING = 2;
  NODE_GROUP_TYPE_APPLICATION = 3;
  NODE_GROUP_TYPE_CUSTOM = 4;
}

message LoadBalancer {
  // load_balancer_type is the type of load balancer to deploy. If unspecified, this will be assumed to be NLB for AWS
  LoadBalancerType load_balancer_type = 1;
  // wildcard_domain is used in ALB loadbalancer deployment when allowlisting IPs. This has no effect when load_balancer_type is NLB
  string wildcard_domain = 2;
  // allowlist_ip_ranges are comma separated CIDRS, which are the only ranges who will be granted access to ALB ingress resources. This has no effect when load_balancer_type is NLB
  string allowlist_ip_ranges = 3;

  // enable_wafv2 enables WAFv2 on the ALB. This has no effect when load_balancer_type is NLB
  bool enable_wafv2 = 4;
  // wafv2_arn is the ARN of the WAFv2 ACL to attach to the ALB. This has no effect when load_balancer_type is NLB, or if enable_wafv2 is false
  string wafv2_arn = 5;

  // additional_certificate_arns is a list of ACM certificate ARNs to attach to the ALB. This has no effect when load_balancer_type is NLB. These will be added in order, before the ACM certificate created by Porter.
  repeated string additional_certificate_arns = 6;

  // tags is a map of AWS tags to apply to the ALB. This has no effect when load_balancer_type is NLB.
  map<string, string> tags = 7;

  // enable_s3_access_logs enables S3 access logs on the ALB. This has no effect when load_balancer_type is NLB.
  bool enable_s3_access_logs = 8;
}

enum LoadBalancerType {
  LOAD_BALANCER_TYPE_UNSPECIFIED = 0;
  LOAD_BALANCER_TYPE_NLB = 1;
  LOAD_BALANCER_TYPE_ALB = 2;
}

// EKSLogging is the configuration for EKS control plane logging which is typically managed through the AWS Console. This will create a CloudWatch log group and log stream for the enabled logs.
message EKSLogging {
  bool enable_api_server_logs = 1;
  bool enable_authenticator_logs = 2;
  bool enable_scheduler_logs = 3;
  bool enable_audit_logs = 4;
  bool enable_controller_manager_logs = 5;
  // enable_cloudwatch_logs_to_s3 controls whether eks logs that are sent to cloudwatch are shipped to an autogenerated s3 bucket
  bool enable_cloudwatch_logs_to_s3 = 6;
}

//EKSPreflightValues contains all needed values to perform EKS Preflight Checks
message EKSPreflightValues {
  //region the region to perform the preflight checks in
  string region = 1;
}

//AWSVpc contains all the properties representing an AWS VPC and any networking-related information
message AWSVpc {
  //id is a unique vpc identifier for an AWS VPC and can be used to reference the VPC in api calls
  string id = 1;
  //cidr_range is the cidr range of the VPC
  string cidr_range = 2;
  //subnets is a list of subnets associated with the VPC
  repeated AWSSubnet subnets = 3;
}

//AWSSubnet contains all the properties representing a single subnet in an AWS VPC
message AWSSubnet {
  //availability_zone is the availability zone in which the subnet resides
  string availability_zone = 1;
  //cidr_range is the cirdr range of the subnet within the VPC
  string cidr_range = 2;
}
