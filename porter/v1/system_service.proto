syntax = "proto3";

package porter.v1;

import "google/protobuf/timestamp.proto";
import "porter/v1/prometheus_alerts.proto";

// SystemService identifies a system service by its name, namespace and the type of k8s object it runs
message SystemService {
  // name is the name of the service
  string name = 1;
  // namespace is the namespace where it is deployed
  string namespace = 2;
  // involved_object_type is the k8s object type the service runs
  InvolvedObjectType involved_object_type = 3;
}

// Status represents the health status of a service
enum Status {
  // STATUS_UNSPECIFIED is the default value
  STATUS_UNSPECIFIED = 0;
  // STATUS_HEALTHY is the value for a fully healthy service
  STATUS_HEALTHY = 1;
  // STATUS_PARTIAL_FAILURE is the health status for a partially failed service
  // a service is in partial failure if only less than the max unavailable number of replicas declared on the service are failed
  STATUS_PARTIAL_FAILURE = 2;
  // STATUS_FAILURE is the health status for a fully failed service
  STATUS_FAILURE = 3;
}

// ClusterHealthType represents types of health history we generate for the cluster
enum ClusterHealthType {
  // CLUSTER_HEALTH_TYPE_UNSPECIFIED is the default value
  CLUSTER_HEALTH_TYPE_UNSPECIFIED = 0;
  // CLUSTER_HEALTH_TYPE_PINGABLE is history of whether we were able to ping the api-server
  CLUSTER_HEALTH_TYPE_CONNECTED = 1;
  // CLUSTER_HEALTH_TYPE_CONNECTED is history of weather we were able to connect to the cluster
  CLUSTER_HEALTH_TYPE_PINGABLE = 2;
  // CLUSTER_HEALTH_TYPE_METRICS_HEALTHY is whether the metrics services in the cluster were healthy
  CLUSTER_HEALTH_TYPE_METRICS_HEALTHY = 3;
}

// HealthStatus is a single status observed over a certain period of time
message HealthStatus {
  // start_time holds the timestamp for when this status began
  google.protobuf.Timestamp start_time = 1;
  // end_time holds the timestamp for when this status ended if provided
  // if not provided, the status is considered ongoing
  optional google.protobuf.Timestamp end_time = 2;
  // status gives the status for a service
  Status status = 3;
  // description provides more information on a status
  string description = 4;
}

// StatusPercentage is the percentage in a day that a certain status was observed
message StatusPercentage {
  Status status = 1;
  float percentage = 2;
}

// DailyHealthStatus represents health status over a day
message DailyHealthStatus {
  // status_percentages holds information on what percentage of the day different statuses were observed
  // there should be only one entry for the different Status types
  repeated StatusPercentage status_percentages = 1;
  // health_statuses is the different statuses observed over a day
  // if there is a missing time gap, the service can be considered to have been healthy during that gap
  repeated HealthStatus health_statuses = 2;
}

// SystemServiceStatusHistory holds the health status history for a particular system service over multiple days
message SystemServiceStatusHistory {
  // system_service identifies the service
  SystemService system_service = 1;
  // daily_status_history is daily health status for a service over multiple days
  // the keys are the number of days before today the DailyHealthStatus is from
  map<int32, DailyHealthStatus> daily_status_history = 2;
}

// ClusterStatusHistory holds health status history of a certain type for a cluster
message ClusterStatusHistory {
  // cluster_health_type is the type this history is generated for
  ClusterHealthType cluster_health_type = 1;
  // daily_status_history is daily health status for the cluster over multiple days for the cluster_health_type
  // the keys are the number of days before today the DailyHealthStatus is from
  map<int32, DailyHealthStatus> daily_status_history = 2;
}
