syntax = "proto3";

package porter.v1;

import "porter/v1/porter_app.proto";
import "porter/v1/service.proto";

enum AddonType {
  // ADDON_TYPE_UNSPECIFIED is the default value
  ADDON_TYPE_UNSPECIFIED = 0;
  // ADDON_TYPE_POSTGRES is the postgres addon type
  ADDON_TYPE_POSTGRES = 1;
  // ADDON_TYPE_REDIS is the redis addon type
  ADDON_TYPE_REDIS = 2;
  // ADDON_TYPE_DATADOG is the datadog addon type
  ADDON_TYPE_DATADOG = 3;
  // ADDON_TYPE_MEZMO is the mezmo addon type
  ADDON_TYPE_MEZMO = 4;
  // ADDON_TYPE_METABASE is the metabase addon type
  ADDON_TYPE_METABASE = 5;
  // ADDON_TYPE_NEWRELIC is the newrelic addon type
  ADDON_TYPE_NEWRELIC = 6;
  // ADDON_TYPE_TAILSCALE is the tailscale addon type
  ADDON_TYPE_TAILSCALE = 7;
  // ADDON_TYPE_QUIVR is the quivr addon type
  ADDON_TYPE_QUIVR = 8;
  // ADDON_TYPE_DEEPGRAM is the deepgram addon type
  ADDON_TYPE_DEEPGRAM = 9;
  // ADDON_TYPE_N8N is the n8n addon type
  ADDON_TYPE_N8N = 10;
  // ADDON_TYPE_MISTRAL_7B is the mistral 7b model addon type
  ADDON_TYPE_MISTRAL_7B = 11;
}

// AddonStatus specifies the status of an addon installation
// this is currently used to track the installation status for complex addons like deepgram and other LLM addons
enum AddonStatus {
  // ADDON_STATUS_UNSPECIFIED is the default value
  ADDON_STATUS_UNSPECIFIED = 0;
  // ADDON_STATUS_QUOTA_PENDING is the status when an addon installation is waiting for a quota upgrade
  ADDON_STATUS_QUOTA_PENDING = 1;
  // ADDON_STATUS_QUOTA_FAILED is the status when an addon can't be installed due to a failed quota upgrade
  ADDON_STATUS_QUOTA_FAILED = 2;
  // ADDON_STATUS_INFRA_PROVISIONING is the status when an addon installation is waiting for infrastructure reprovisioning
  ADDON_STATUS_INFRA_PROVISIONING = 3;
  // ADDON_STATUS_INFRA_PROVISIONING_FAILED is the status when an addon can't be installed due to a failed infrastructure reprovisioning
  ADDON_STATUS_INFRA_PROVISIONING_FAILED = 4;
  // ADDON_STATUS_INSTALLING is the status when an addon is getting installed
  ADDON_STATUS_INSTALLING = 5;
  // ADDON_STATUS_INSTALLED is the status when an addon is installed
  ADDON_STATUS_INSTALLED = 6;
  // ADDON_STATUS_INSTALL_FAILED is the status when an addon installation fails
  ADDON_STATUS_INSTALL_FAILED = 7;
}

// PrerequisiteAddon specifies an addon that must be installed before any apps can be installed
// the addon should be installed with the specified config
message PrerequisiteAddon {
  // commit_sha is the commit SHA of the addon
  string commit_sha = 1;
}

// Addon is the configuration object for tooling or services that can be applied to the cluster alongside porter apps.
message Addon {
  // name is the name of the addon
  string name = 1;
  // type is the type of type of addon
  AddonType type = 2;
  // env_groups is a list of environment groups that can be applied to the addon
  repeated EnvGroup env_groups = 3;
  // config is the addon-specific configuration
  oneof config {
    // postgres is the configuration for the postgres addon
    Postgres postgres = 4;
    // redis is the configuration for the redis addon
    Redis redis = 5;
    // datadog is the configuration for the datadog addon
    Datadog datadog = 6;
    // mezmo is the configuration for the mezmo addon
    Mezmo mezmo = 7;
    // metabase is the configuration for the metabase addon
    Metabase metabase = 8;
    // Newrelic is the configuration for the newrelic addon
    Newrelic newrelic = 9;
    // Tailscale is the configuration for the tailscale addon
    Tailscale tailscale = 10;
    // Quivr is the configuration for the quivr addon
    Quivr quivr = 11;
    // Deepgram is the configuration for the deepgram addon
    Deepgram deepgram = 12;
    // N8n is the configuration for the n8n addon
    N8n n8n = 14;
    // mistral7b is the configuration for the mistral 7b model addon
    Mistral7B mistral7b = 15;
  }
  // helm_overrides is stringified json of raw Helm overrides to use for the addon. These will override any values generated by the contract.
  HelmOverrides helm_overrides = 13;
}

// Postgres is the configuration for postgres
message Postgres {
  // cpu_cores is the number of CPU cores to allocate to the database
  float cpu_cores = 1;
  // ram_megabytes is the amount of memory to allocate to the database
  int32 ram_megabytes = 2;
  // storage_gigabytes is the amount of storage to allocate to the database
  int32 storage_gigabytes = 3;
  // master_username is the username of the database
  optional string master_username = 4;
  // master_user_password_literal is the string value of the password; this is only used for creating the datastore password secret and is wiped when the contract is saved
  optional string master_user_password_literal = 5;
}

// Redis is the configuration for redis
message Redis {
  // cpu_cores is the number of CPU cores to allocate to redis
  float cpu_cores = 1;
  // ram_megabytes is the amount of memory to allocate to redis
  int32 ram_megabytes = 2;
  // storage_gigabytes is the amount of storage to allocate to redis
  int32 storage_gigabytes = 3;
  // master_user_password_literal is the string value of the password; this is only used for creating the datastore password secret and is wiped when the contract is saved
  optional string master_user_password_literal = 4;
}

// Datadog is the configuration for Datadog
message Datadog {
  // site is the datadog site url
  optional string site = 1;
  // api_key is the api key
  optional string api_key = 2;
  // logging_enabled determines whether all container logs go to datadog
  optional bool logging_enabled = 3;
  // dogstatsd_enabled determines whether dogstatsd is enabled
  optional bool dogstatsd_enabled = 4;
  // apm_enabled determines whether apm is enabled
  optional bool apm_enabled = 5;
  // cpu_cores is the number of CPU cores to allocate to datadog
  optional float cpu_cores = 6;
  // ram_megabytes is the amount of memory to allocate to datadog
  optional int32 ram_megabytes = 7;
}

// Mezmo is the configuration for Mezmo
message Mezmo {
  // ingestion_key is the mezmo ingestion key. This is stored as a secret on the client cluster
  optional string ingestion_key = 1;
}

// MetabaseDatastore is the configuration for a datastore linked with Metabase
message MetabaseDatastore {
  string host = 1;
  int64 port = 2;
  string database_name = 3;
  string master_username = 4;
  string master_user_password_literal = 5;
}

// Metabase is the configuration for Metabase
message Metabase {
  // domains is the list of domains for this service
  repeated Domain domains = 1;
  // cpu_cores is the number of CPU cores to allocate to metabase
  optional float cpu_cores = 2;
  // ram_megabytes is the amount of memory to allocate to metabase
  optional int32 ram_megabytes = 3;
  // datastore is the configuration of the datastore that metabase is connected to
  optional MetabaseDatastore datastore = 4;
  // ingress_enabled describes whether the metabase instance has ingress enabled
  optional bool ingress_enabled = 5;
}

// Newrelic is the configuration for Newrelic
message Newrelic {
  // cluster_name is the name of the cluster
  optional string cluster_name = 1;
  // license_key is the license key
  optional string license_key = 2;
  // insights_key is the insights key
  optional string insights_key = 3;
  // personal_api_key is the personal api key
  optional string personal_api_key = 4;
  // account_id is the account id
  optional string account_id = 5;
  // logging_enabled determines whether logging is enabled
  optional bool logging_enabled = 6;
  // metrics_adapter_enabled determines whether metrics adapter is enabled
  optional bool metrics_adapter_enabled = 7;
  // prometheus_enabled determines whether prometheus is enabled
  optional bool prometheus_enabled = 8;
  // pixie_enabled determines whether pixie is enabled
  optional bool pixie_enabled = 9;
  // kube_events_enabled determines whether tracking for kube events is enabled
  optional bool kube_events_enabled = 10;
}

// Tailscale is the configuration for Tailscale
message Tailscale {
  // auth_key is the auth key for Tailscale
  optional string auth_key = 1;
  // subnet_routes are the subnet routes for Tailscale
  repeated string subnet_routes = 2;
}

// Quivr is the configuration for Quivr
message Quivr {
  // domains is the list of domains for the service
  repeated Domain domains = 1;
  // ingress_enabled describes whether the quivr instance has external ingress enabled
  optional bool ingress_enabled = 2;
  optional string openai_api_key = 3;
  optional string supabase_url = 4;
  optional string supabase_service_key = 5;
  optional string pg_database_url = 6;
  optional string jwt_secret_key = 7;
  optional string cohere_api_key = 8;
  optional string anthropic_api_key = 9;
  optional string quivr_domain = 10;
  optional string brave_search_api_key = 11;
}

// Deepgram is the configuration for Deepgram
message Deepgram {
  // api_key is the deepgram API key
  optional string api_key = 1;
  // ecr_username is the username to fetch the proprietary image
  optional string ecr_username = 2;
  // ecr_password is the password to fetch the proprietary image
  optional string ecr_password = 3;
  // ecr_email is email to fetch the proprietary image
  optional string ecr_email = 4;
  // release_tag is the version of the deepgram application
  optional string release_tag = 5;
  // model_urls is the list of urls to download deepgram models from
  repeated string model_urls = 6;
}

// AddonDatastoreConnectionInfo is the connection info for a datastore linked with an addon
message AddonDatastoreConnectionInfo {
  string host = 1;
  int64 port = 2;
  string database_name = 3;
  string master_username = 4;
  string master_user_password_literal = 5;
}

// AddonEnvVariable represents an env variable for an addon
message AddonEnvVariable {
  string key = 1;
  string value = 2;
}

// N8n is the configuration for n8n
message N8n {
  // domains is the list of domains for the service
  repeated Domain domains = 1;
  // ingress_enabled describes whether the n8n instance has external ingress enabled
  optional bool ingress_enabled = 2;
  // datastore is the configuration of the datastore that the n8n is connected to
  optional AddonDatastoreConnectionInfo datastore = 3;
  // env_variables is a map of env variables
  repeated AddonEnvVariable env_variables = 4;
}

// Mistral7B is the configuration for the Mistral 7B LLM addon
message Mistral7B {
  optional string hf_token = 1;
}
