syntax = "proto3";

package porter.v1;

import "porter/v1/aks.proto";
import "porter/v1/eks.proto";
import "porter/v1/gke.proto";

message Cluster {
  // project_id [REQUIRED] represents the Porter project that the cluster will be joined to. This is required for all cluster creations and updates
  int32 project_id = 1;
  // cluster_id [OPTIONAL] represents the Porter cluster. This is required for update operations, but should be left blank when creating a cluster
  int32 cluster_id = 2;
  // kind [REQUIRED] is the different types of supported kubernetes distros such as EKS, GKE etc.
  EnumKubernetesKind kind = 3;
  // cloud_provider [REQUIRED] represents the provider that we will provisioning the cluster in
  EnumCloudProvider cloud_provider = 4;
  // cloud_provider_credentials_id [REQUIRED] is the Porter credentials that will be used for provisioning a cluster.
  // These must be stored within Porter, prior to cluster creation. For AWS this refers to the last link in an assume role chain
  string cloud_provider_credentials_id = 5;
  // kind_values are the required values, depending on the selected cloud_provider and kind
  oneof kind_values {
    EKS eks_kind = 6;
    GKE gke_kind = 7;
    AKS aks_kind = 8;
  }
  // is_soc2_compliant force enables all the various soc2-related fields on a cluster
  // deprecated: set soc2 to be enabled under compliance profiles for the contract
  bool is_soc2_compliant = 9 [deprecated = true];
}

enum EnumKubernetesKind {
  ENUM_KUBERNETES_KIND_UNSPECIFIED = 0;
  ENUM_KUBERNETES_KIND_EKS = 1;
  ENUM_KUBERNETES_KIND_GKE = 2;
  ENUM_KUBERNETES_KIND_AKS = 3;
}

enum EnumCloudProvider {
  ENUM_CLOUD_PROVIDER_UNSPECIFIED = 0;
  ENUM_CLOUD_PROVIDER_AWS = 1;
  ENUM_CLOUD_PROVIDER_GCP = 2;
  ENUM_CLOUD_PROVIDER_AZURE = 3;
}

message UserNodeGroup {
  // id is the unique identifier for the node group
  string id = 1;
  // name is the name of the node group
  string name = 2;
  // instance_type is the type of instance used for the node group
  string instance_type = 3;
  // ram_mb is the amount of ram in MB available for the node group
  int32 ram_mb = 4;
  // cpu_cores is the number of cpu cores available for the node group
  float cpu_cores = 5;
  // gpu_cores is the number of gpu cores available for the node group
  int32 gpu_cores = 6;
}
